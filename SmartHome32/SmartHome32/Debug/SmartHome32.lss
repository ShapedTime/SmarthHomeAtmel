
SmartHome32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000020ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000046  00800060  000020ac  00002140  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000002f9  008000a6  008000a6  00002186  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002186  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000021b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002d0  00000000  00000000  000021f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000040e3  00000000  00000000  000024c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c04  00000000  00000000  000065a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000fd8  00000000  00000000  000071ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000009a8  00000000  00000000  00008184  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000bb7  00000000  00000000  00008b2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004803  00000000  00000000  000096e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002b0  00000000  00000000  0000dee6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 97 01 	jmp	0x32e	; 0x32e <__ctors_end>
       4:	0c 94 b4 01 	jmp	0x368	; 0x368 <__bad_interrupt>
       8:	0c 94 b4 01 	jmp	0x368	; 0x368 <__bad_interrupt>
       c:	0c 94 b4 01 	jmp	0x368	; 0x368 <__bad_interrupt>
      10:	0c 94 b4 01 	jmp	0x368	; 0x368 <__bad_interrupt>
      14:	0c 94 b4 01 	jmp	0x368	; 0x368 <__bad_interrupt>
      18:	0c 94 b4 01 	jmp	0x368	; 0x368 <__bad_interrupt>
      1c:	0c 94 aa 02 	jmp	0x554	; 0x554 <__vector_7>
      20:	0c 94 b4 01 	jmp	0x368	; 0x368 <__bad_interrupt>
      24:	0c 94 b4 01 	jmp	0x368	; 0x368 <__bad_interrupt>
      28:	0c 94 b4 01 	jmp	0x368	; 0x368 <__bad_interrupt>
      2c:	0c 94 b4 01 	jmp	0x368	; 0x368 <__bad_interrupt>
      30:	0c 94 b4 01 	jmp	0x368	; 0x368 <__bad_interrupt>
      34:	0c 94 b4 01 	jmp	0x368	; 0x368 <__bad_interrupt>
      38:	0c 94 b4 01 	jmp	0x368	; 0x368 <__bad_interrupt>
      3c:	0c 94 b4 01 	jmp	0x368	; 0x368 <__bad_interrupt>
      40:	0c 94 b4 01 	jmp	0x368	; 0x368 <__bad_interrupt>
      44:	0c 94 b4 01 	jmp	0x368	; 0x368 <__bad_interrupt>
      48:	0c 94 b4 01 	jmp	0x368	; 0x368 <__bad_interrupt>
      4c:	0c 94 b4 01 	jmp	0x368	; 0x368 <__bad_interrupt>
      50:	0c 94 b4 01 	jmp	0x368	; 0x368 <__bad_interrupt>

00000054 <__trampolines_end>:
      54:	3c 68       	ori	r19, 0x8C	; 140
      56:	31 3e       	cpi	r19, 0xE1	; 225
      58:	32 30       	cpi	r19, 0x02	; 2
      5a:	30 20       	and	r3, r0
      5c:	4f 4b       	sbci	r20, 0xBF	; 191
      5e:	3c 2f       	mov	r19, r28
      60:	68 31       	cpi	r22, 0x18	; 24
      62:	3e 00       	.word	0x003e	; ????

00000064 <__c.2292>:
      64:	2f 66 72 6f 6d 64 65 76 69 63 65 2f 67 65 74 69     /fromdevice/geti
      74:	70 2e 70 68 70 3f 70 61 73 73 3d 37 73 36 64 37     p.php?pass=7s6d7
      84:	26 64 69 3d 30 46 30 2d 30 30 30 2d 46 30 46 2d     &di=0F0-000-F0F-
      94:	30 30 30 2d 30 46 30 26 6f 72 64 70 3d 71 37 39     000-0F0&ordp=q79
      a4:	74 79 33 38 6a 63 6c 64 35 79 67 62 68 67 6b 6c     ty38jcld5ygbhgkl
      b4:	37 39 6c 00                                         79l.

000000b8 <__c.2294>:
      b8:	6c 65 6e 6b 65 72 61 6e 69 73 74 65 6b 2e 63 6f     lenkeranistek.co
      c8:	6d 00                                               m.

000000ca <__c.2257>:
      ca:	0a 3c 2f 70 72 65 3e 3c 62 72 3e 3c 68 72 3e 00     .</pre><br><hr>.

000000da <__c.2255>:
      da:	0a 63 68 65 63 6b 20 72 65 73 75 6c 74 3a 20 3c     .check result: <
      ea:	61 20 68 72 65 66 3d 68 74 74 70 3a 2f 2f 74 75     a href=http://tu
      fa:	78 67 72 61 70 68 69 63 73 2e 6f 72 67 2f 63 67     xgraphics.org/cg
     10a:	69 2d 62 69 6e 2f 75 70 6c 64 3e 68 74 74 70 3a     i-bin/upld>http:
     11a:	2f 2f 74 75 78 67 72 61 70 68 69 63 73 2e 6f 72     //tuxgraphics.or
     12a:	67 2f 63 67 69 2d 62 69 6e 2f 75 70 6c 64 3c 2f     g/cgi-bin/upld</
     13a:	61 3e 00                                            a>.

0000013d <__c.2253>:
     13d:	0a 41 64 64 72 65 73 73 3a 20 00                    .Address: .

00000148 <__c.2251>:
     148:	0a 4e 75 6d 62 65 72 20 73 75 63 63 65 73 73 66     .Number successf
     158:	75 6c 20 64 61 74 61 20 75 70 6c 6f 61 64 73 20     ul data uploads 
     168:	74 6f 20 77 65 62 3a 20 00                          to web: .

00000171 <__c.2249>:
     171:	4e 75 6d 62 65 72 20 6f 66 20 64 61 74 61 20 75     Number of data u
     181:	70 6c 6f 61 64 73 20 73 74 61 72 74 65 64 20 62     ploads started b
     191:	79 20 70 69 6e 67 3a 20 00                          y ping: .

0000019a <__c.2247>:
     19a:	20 28 30 3d 6e 6f 20 65 72 72 6f 72 29 0a 00         (0=no error)..

000001a9 <__c.2245>:
     1a9:	45 72 72 6f 72 20 63 6f 64 65 3a 20 00              Error code: .

000001b6 <__c.2243>:
     1b6:	77 61 69 74 69 6e 67 20 66 6f 72 20 44 4e 53 20     waiting for DNS 
     1c6:	61 6e 73 77 65 72 2e 0a 00                          answer...

000001cf <__c.2241>:
     1cf:	20 74 6f 20 61 6e 73 77 65 72 20 61 72 70 2e 0a      to answer arp..
	...

000001e0 <__c.2239>:
     1e0:	77 61 69 74 69 6e 67 20 66 6f 72 20 47 57 20 00     waiting for GW .

000001f0 <__c.2237>:
     1f0:	3c 68 32 3e 77 65 62 20 63 6c 69 65 6e 74 20 73     <h2>web client s
     200:	74 61 74 75 73 3c 2f 68 32 3e 0a 3c 70 72 65 3e     tatus</h2>.<pre>
     210:	0a 00                                               ..

00000212 <__c.2229>:
     212:	48 54 54 50 2f 31 2e 30 20 32 30 30 20 4f 4b 0d     HTTP/1.0 200 OK.
     222:	0a 43 6f 6e 74 65 6e 74 2d 54 79 70 65 3a 20 74     .Content-Type: t
     232:	65 78 74 2f 68 74 6d 6c 0d 0a 50 72 61 67 6d 61     ext/html..Pragma
     242:	3a 20 6e 6f 2d 63 61 63 68 65 0d 0a 0d 0a 00        : no-cache.....

00000251 <__c.2323>:
     251:	0d 0a 43 6f 6e 74 65 6e 74 2d 54 79 70 65 3a 20     ..Content-Type: 
     261:	61 70 70 6c 69 63 61 74 69 6f 6e 2f 78 2d 77 77     application/x-ww
     271:	77 2d 66 6f 72 6d 2d 75 72 6c 65 6e 63 6f 64 65     w-form-urlencode
     281:	64 0d 0a 0d 0a 00                                   d.....

00000287 <__c.2321>:
     287:	43 6f 6e 74 65 6e 74 2d 4c 65 6e 67 74 68 3a 20     Content-Length: 
	...

00000298 <__c.2319>:
     298:	0d 0a 55 73 65 72 2d 41 67 65 6e 74 3a 20 74 67     ..User-Agent: tg
     2a8:	72 2f 31 2e 31 0d 0a 41 63 63 65 70 74 3a 20 2a     r/1.1..Accept: *
     2b8:	2f 2a 0d 0a 00                                      /*...

000002bd <__c.2317>:
     2bd:	0d 0a 00                                            ...

000002c0 <__c.2315>:
     2c0:	20 48 54 54 50 2f 31 2e 31 0d 0a 48 6f 73 74 3a      HTTP/1.1..Host:
     2d0:	20 00                                                .

000002d2 <__c.2313>:
     2d2:	50 4f 53 54 20 00                                   POST .

000002d8 <__c.2311>:
     2d8:	0d 0a 55 73 65 72 2d 41 67 65 6e 74 3a 20 74 67     ..User-Agent: tg
     2e8:	72 2f 31 2e 31 0d 0a 41 63 63 65 70 74 3a 20 74     r/1.1..Accept: t
     2f8:	65 78 74 2f 68 74 6d 6c 0d 0a 0d 0a 00              ext/html.....

00000305 <__c.2309>:
     305:	20 48 54 54 50 2f 31 2e 31 0d 0a 48 6f 73 74 3a      HTTP/1.1..Host:
     315:	20 00                                                .

00000317 <__c.2307>:
     317:	47 45 54 20 00                                      GET .

0000031c <arpreqhdr>:
     31c:	00 01 08 00 06 04 00 01                             ........

00000324 <iphdr>:
     324:	45 00 00 82 00 00 40 00 20 00                       E.....@. .

0000032e <__ctors_end>:
     32e:	11 24       	eor	r1, r1
     330:	1f be       	out	0x3f, r1	; 63
     332:	cf e5       	ldi	r28, 0x5F	; 95
     334:	d8 e0       	ldi	r29, 0x08	; 8
     336:	de bf       	out	0x3e, r29	; 62
     338:	cd bf       	out	0x3d, r28	; 61

0000033a <__do_copy_data>:
     33a:	10 e0       	ldi	r17, 0x00	; 0
     33c:	a0 e6       	ldi	r26, 0x60	; 96
     33e:	b0 e0       	ldi	r27, 0x00	; 0
     340:	ec ea       	ldi	r30, 0xAC	; 172
     342:	f0 e2       	ldi	r31, 0x20	; 32
     344:	02 c0       	rjmp	.+4      	; 0x34a <__do_copy_data+0x10>
     346:	05 90       	lpm	r0, Z+
     348:	0d 92       	st	X+, r0
     34a:	a6 3a       	cpi	r26, 0xA6	; 166
     34c:	b1 07       	cpc	r27, r17
     34e:	d9 f7       	brne	.-10     	; 0x346 <__do_copy_data+0xc>

00000350 <__do_clear_bss>:
     350:	23 e0       	ldi	r18, 0x03	; 3
     352:	a6 ea       	ldi	r26, 0xA6	; 166
     354:	b0 e0       	ldi	r27, 0x00	; 0
     356:	01 c0       	rjmp	.+2      	; 0x35a <.do_clear_bss_start>

00000358 <.do_clear_bss_loop>:
     358:	1d 92       	st	X+, r1

0000035a <.do_clear_bss_start>:
     35a:	af 39       	cpi	r26, 0x9F	; 159
     35c:	b2 07       	cpc	r27, r18
     35e:	e1 f7       	brne	.-8      	; 0x358 <.do_clear_bss_loop>
     360:	0e 94 c6 02 	call	0x58c	; 0x58c <main>
     364:	0c 94 54 10 	jmp	0x20a8	; 0x20a8 <_exit>

00000368 <__bad_interrupt>:
     368:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000036c <ping_callback>:
// and trigger an upload to http://tuxgraphics.org/cgi-bin/upld
// This is just for testing and demonstration purpose
void ping_callback(uint8_t *ip){
        uint8_t i=0;
        // trigger only first time in case we get many ping in a row:
        if (start_web_client==0){
     36c:	20 91 ad 00 	lds	r18, 0x00AD
     370:	21 11       	cpse	r18, r1
     372:	0c c0       	rjmp	.+24     	; 0x38c <ping_callback+0x20>
                start_web_client=1;
     374:	21 e0       	ldi	r18, 0x01	; 1
     376:	20 93 ad 00 	sts	0x00AD, r18
     37a:	fc 01       	movw	r30, r24
     37c:	ae ea       	ldi	r26, 0xAE	; 174
     37e:	b0 e0       	ldi	r27, 0x00	; 0
     380:	04 96       	adiw	r24, 0x04	; 4
                // save IP from where the ping came:
                while(i<4){
                        pingsrcip[i]=ip[i];
     382:	21 91       	ld	r18, Z+
     384:	2d 93       	st	X+, r18
        uint8_t i=0;
        // trigger only first time in case we get many ping in a row:
        if (start_web_client==0){
                start_web_client=1;
                // save IP from where the ping came:
                while(i<4){
     386:	e8 17       	cp	r30, r24
     388:	f9 07       	cpc	r31, r25
     38a:	d9 f7       	brne	.-10     	; 0x382 <ping_callback+0x16>
     38c:	08 95       	ret

0000038e <browserresult_callback>:
        }
}

// the __attribute__((unused)) is a gcc compiler directive to avoid warnings about unsed variables.
void browserresult_callback(uint16_t webstatuscode,uint16_t datapos __attribute__((unused)), uint16_t len __attribute__((unused))){
        if (webstatuscode==200){
     38e:	88 3c       	cpi	r24, 0xC8	; 200
     390:	91 05       	cpc	r25, r1
     392:	29 f4       	brne	.+10     	; 0x39e <browserresult_callback+0x10>
                web_client_sendok++;
     394:	80 91 ab 00 	lds	r24, 0x00AB
     398:	8f 5f       	subi	r24, 0xFF	; 255
     39a:	80 93 ab 00 	sts	0x00AB, r24
     39e:	08 95       	ret

000003a0 <arpresolver_result_callback>:
}

// the __attribute__((unused)) is a gcc compiler directive to avoid warnings about unsed variables.
void arpresolver_result_callback(uint8_t *ip __attribute__((unused)),uint8_t transaction_number,uint8_t *mac){
        uint8_t i=0;
        if (transaction_number==TRANS_NUM_GWMAC){
     3a0:	61 30       	cpi	r22, 0x01	; 1
     3a2:	51 f4       	brne	.+20     	; 0x3b8 <arpresolver_result_callback+0x18>
     3a4:	fa 01       	movw	r30, r20
     3a6:	a6 e5       	ldi	r26, 0x56	; 86
     3a8:	b3 e0       	ldi	r27, 0x03	; 3
     3aa:	4a 5f       	subi	r20, 0xFA	; 250
     3ac:	5f 4f       	sbci	r21, 0xFF	; 255
                // copy mac address over:
                while(i<6){gwmac[i]=mac[i];i++;}
     3ae:	81 91       	ld	r24, Z+
     3b0:	8d 93       	st	X+, r24
     3b2:	e4 17       	cp	r30, r20
     3b4:	f5 07       	cpc	r31, r21
     3b6:	d9 f7       	brne	.-10     	; 0x3ae <arpresolver_result_callback+0xe>
     3b8:	08 95       	ret

000003ba <http200ok>:
static int8_t gw_arp_state=0;
uint8_t address=0;

uint16_t http200ok(void)
{
        return(fill_tcp_data_p(buf,0,PSTR("HTTP/1.0 200 OK\r\nContent-Type: text/html\r\nPragma: no-cache\r\n\r\n")));
     3ba:	42 e1       	ldi	r20, 0x12	; 18
     3bc:	52 e0       	ldi	r21, 0x02	; 2
     3be:	60 e0       	ldi	r22, 0x00	; 0
     3c0:	70 e0       	ldi	r23, 0x00	; 0
     3c2:	82 eb       	ldi	r24, 0xB2	; 178
     3c4:	90 e0       	ldi	r25, 0x00	; 0
     3c6:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <fill_tcp_data_p>
}
     3ca:	08 95       	ret

000003cc <print_webpage>:


// prepare the webpage by writing the data to the tcp send buffer
uint16_t print_webpage(uint8_t *buf)
{
     3cc:	cf 92       	push	r12
     3ce:	df 92       	push	r13
     3d0:	ef 92       	push	r14
     3d2:	ff 92       	push	r15
     3d4:	0f 93       	push	r16
     3d6:	1f 93       	push	r17
     3d8:	cf 93       	push	r28
     3da:	df 93       	push	r29
     3dc:	cd b7       	in	r28, 0x3d	; 61
     3de:	de b7       	in	r29, 0x3e	; 62
     3e0:	61 97       	sbiw	r28, 0x11	; 17
     3e2:	0f b6       	in	r0, 0x3f	; 63
     3e4:	f8 94       	cli
     3e6:	de bf       	out	0x3e, r29	; 62
     3e8:	0f be       	out	0x3f, r0	; 63
     3ea:	cd bf       	out	0x3d, r28	; 61
     3ec:	7c 01       	movw	r14, r24
        uint16_t plen;
        char vstr[17];
        uint8_t err;
        plen=http200ok();
     3ee:	0e 94 dd 01 	call	0x3ba	; 0x3ba <http200ok>
        plen=fill_tcp_data_p(buf,plen,PSTR("<h2>web client status</h2>\n<pre>\n"));
     3f2:	40 ef       	ldi	r20, 0xF0	; 240
     3f4:	51 e0       	ldi	r21, 0x01	; 1
     3f6:	bc 01       	movw	r22, r24
     3f8:	c7 01       	movw	r24, r14
     3fa:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <fill_tcp_data_p>
     3fe:	bc 01       	movw	r22, r24
        if (gw_arp_state==1){
     400:	90 91 a7 00 	lds	r25, 0x00A7
     404:	91 30       	cpi	r25, 0x01	; 1
     406:	e9 f4       	brne	.+58     	; 0x442 <print_webpage+0x76>
                plen=fill_tcp_data_p(buf,plen,PSTR("waiting for GW "));
     408:	40 ee       	ldi	r20, 0xE0	; 224
     40a:	51 e0       	ldi	r21, 0x01	; 1
     40c:	c7 01       	movw	r24, r14
     40e:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <fill_tcp_data_p>
     412:	6c 01       	movw	r12, r24
                mk_net_str(vstr,gwip,4,'.',10);
     414:	0a e0       	ldi	r16, 0x0A	; 10
     416:	2e e2       	ldi	r18, 0x2E	; 46
     418:	44 e0       	ldi	r20, 0x04	; 4
     41a:	60 e6       	ldi	r22, 0x60	; 96
     41c:	70 e0       	ldi	r23, 0x00	; 0
     41e:	ce 01       	movw	r24, r28
     420:	01 96       	adiw	r24, 0x01	; 1
     422:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <mk_net_str>
                plen=fill_tcp_data(buf,plen,vstr);
     426:	ae 01       	movw	r20, r28
     428:	4f 5f       	subi	r20, 0xFF	; 255
     42a:	5f 4f       	sbci	r21, 0xFF	; 255
     42c:	b6 01       	movw	r22, r12
     42e:	c7 01       	movw	r24, r14
     430:	0e 94 96 09 	call	0x132c	; 0x132c <fill_tcp_data>
                plen=fill_tcp_data_p(buf,plen,PSTR(" to answer arp.\n"));
     434:	4f ec       	ldi	r20, 0xCF	; 207
     436:	51 e0       	ldi	r21, 0x01	; 1
     438:	bc 01       	movw	r22, r24
     43a:	c7 01       	movw	r24, r14
     43c:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <fill_tcp_data_p>
                return(plen);
     440:	7a c0       	rjmp	.+244    	; 0x536 <print_webpage+0x16a>
        }
        if (dns_state==1){
     442:	80 91 a8 00 	lds	r24, 0x00A8
     446:	81 30       	cpi	r24, 0x01	; 1
     448:	31 f5       	brne	.+76     	; 0x496 <print_webpage+0xca>
                plen=fill_tcp_data_p(buf,plen,PSTR("waiting for DNS answer.\n"));
     44a:	46 eb       	ldi	r20, 0xB6	; 182
     44c:	51 e0       	ldi	r21, 0x01	; 1
     44e:	c7 01       	movw	r24, r14
     450:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <fill_tcp_data_p>
     454:	8c 01       	movw	r16, r24
                err=dnslkup_get_error_info();
     456:	0e 94 c5 03 	call	0x78a	; 0x78a <dnslkup_get_error_info>
     45a:	d8 2e       	mov	r13, r24
                plen=fill_tcp_data_p(buf,plen,PSTR("Error code: "));
     45c:	49 ea       	ldi	r20, 0xA9	; 169
     45e:	51 e0       	ldi	r21, 0x01	; 1
     460:	b8 01       	movw	r22, r16
     462:	c7 01       	movw	r24, r14
     464:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <fill_tcp_data_p>
     468:	8c 01       	movw	r16, r24
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     46a:	4a e0       	ldi	r20, 0x0A	; 10
     46c:	be 01       	movw	r22, r28
     46e:	6f 5f       	subi	r22, 0xFF	; 255
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	8d 2d       	mov	r24, r13
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	0e 94 17 10 	call	0x202e	; 0x202e <__itoa_ncheck>
                itoa(err,vstr,10);
                plen=fill_tcp_data(buf,plen,vstr);
     47a:	ae 01       	movw	r20, r28
     47c:	4f 5f       	subi	r20, 0xFF	; 255
     47e:	5f 4f       	sbci	r21, 0xFF	; 255
     480:	b8 01       	movw	r22, r16
     482:	c7 01       	movw	r24, r14
     484:	0e 94 96 09 	call	0x132c	; 0x132c <fill_tcp_data>
                plen=fill_tcp_data_p(buf,plen,PSTR(" (0=no error)\n"));
     488:	4a e9       	ldi	r20, 0x9A	; 154
     48a:	51 e0       	ldi	r21, 0x01	; 1
     48c:	bc 01       	movw	r22, r24
     48e:	c7 01       	movw	r24, r14
     490:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <fill_tcp_data_p>
                return(plen);
     494:	50 c0       	rjmp	.+160    	; 0x536 <print_webpage+0x16a>
        }
        plen=fill_tcp_data_p(buf,plen,PSTR("Number of data uploads started by ping: "));
     496:	41 e7       	ldi	r20, 0x71	; 113
     498:	51 e0       	ldi	r21, 0x01	; 1
     49a:	c7 01       	movw	r24, r14
     49c:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <fill_tcp_data_p>
     4a0:	8c 01       	movw	r16, r24
        // convert number to string:
        itoa(web_client_attempts,vstr,10);
     4a2:	80 91 ac 00 	lds	r24, 0x00AC
     4a6:	4a e0       	ldi	r20, 0x0A	; 10
     4a8:	be 01       	movw	r22, r28
     4aa:	6f 5f       	subi	r22, 0xFF	; 255
     4ac:	7f 4f       	sbci	r23, 0xFF	; 255
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	0e 94 17 10 	call	0x202e	; 0x202e <__itoa_ncheck>
        plen=fill_tcp_data(buf,plen,vstr);
     4b4:	ae 01       	movw	r20, r28
     4b6:	4f 5f       	subi	r20, 0xFF	; 255
     4b8:	5f 4f       	sbci	r21, 0xFF	; 255
     4ba:	b8 01       	movw	r22, r16
     4bc:	c7 01       	movw	r24, r14
     4be:	0e 94 96 09 	call	0x132c	; 0x132c <fill_tcp_data>
        plen=fill_tcp_data_p(buf,plen,PSTR("\nNumber successful data uploads to web: "));
     4c2:	48 e4       	ldi	r20, 0x48	; 72
     4c4:	51 e0       	ldi	r21, 0x01	; 1
     4c6:	bc 01       	movw	r22, r24
     4c8:	c7 01       	movw	r24, r14
     4ca:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <fill_tcp_data_p>
     4ce:	8c 01       	movw	r16, r24
        // convert number to string:
        itoa(web_client_sendok,vstr,10);
     4d0:	80 91 ab 00 	lds	r24, 0x00AB
     4d4:	4a e0       	ldi	r20, 0x0A	; 10
     4d6:	be 01       	movw	r22, r28
     4d8:	6f 5f       	subi	r22, 0xFF	; 255
     4da:	7f 4f       	sbci	r23, 0xFF	; 255
     4dc:	90 e0       	ldi	r25, 0x00	; 0
     4de:	0e 94 17 10 	call	0x202e	; 0x202e <__itoa_ncheck>
        plen=fill_tcp_data(buf,plen,vstr);
     4e2:	ae 01       	movw	r20, r28
     4e4:	4f 5f       	subi	r20, 0xFF	; 255
     4e6:	5f 4f       	sbci	r21, 0xFF	; 255
     4e8:	b8 01       	movw	r22, r16
     4ea:	c7 01       	movw	r24, r14
     4ec:	0e 94 96 09 	call	0x132c	; 0x132c <fill_tcp_data>
		plen=fill_tcp_data_p(buf,plen,PSTR("\nAddress: "));
     4f0:	4d e3       	ldi	r20, 0x3D	; 61
     4f2:	51 e0       	ldi	r21, 0x01	; 1
     4f4:	bc 01       	movw	r22, r24
     4f6:	c7 01       	movw	r24, r14
     4f8:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <fill_tcp_data_p>
     4fc:	8c 01       	movw	r16, r24
		itoa(address, vstr,10);
     4fe:	80 91 a6 00 	lds	r24, 0x00A6
     502:	4a e0       	ldi	r20, 0x0A	; 10
     504:	be 01       	movw	r22, r28
     506:	6f 5f       	subi	r22, 0xFF	; 255
     508:	7f 4f       	sbci	r23, 0xFF	; 255
     50a:	90 e0       	ldi	r25, 0x00	; 0
     50c:	0e 94 17 10 	call	0x202e	; 0x202e <__itoa_ncheck>
		plen=fill_tcp_data(buf,plen,vstr);
     510:	ae 01       	movw	r20, r28
     512:	4f 5f       	subi	r20, 0xFF	; 255
     514:	5f 4f       	sbci	r21, 0xFF	; 255
     516:	b8 01       	movw	r22, r16
     518:	c7 01       	movw	r24, r14
     51a:	0e 94 96 09 	call	0x132c	; 0x132c <fill_tcp_data>
        plen=fill_tcp_data_p(buf,plen,PSTR("\ncheck result: <a href=http://tuxgraphics.org/cgi-bin/upld>http://tuxgraphics.org/cgi-bin/upld</a>"));
     51e:	4a ed       	ldi	r20, 0xDA	; 218
     520:	50 e0       	ldi	r21, 0x00	; 0
     522:	bc 01       	movw	r22, r24
     524:	c7 01       	movw	r24, r14
     526:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <fill_tcp_data_p>
        plen=fill_tcp_data_p(buf,plen,PSTR("\n</pre><br><hr>"));
     52a:	4a ec       	ldi	r20, 0xCA	; 202
     52c:	50 e0       	ldi	r21, 0x00	; 0
     52e:	bc 01       	movw	r22, r24
     530:	c7 01       	movw	r24, r14
     532:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <fill_tcp_data_p>
        return(plen);
}
     536:	61 96       	adiw	r28, 0x11	; 17
     538:	0f b6       	in	r0, 0x3f	; 63
     53a:	f8 94       	cli
     53c:	de bf       	out	0x3e, r29	; 62
     53e:	0f be       	out	0x3f, r0	; 63
     540:	cd bf       	out	0x3d, r28	; 61
     542:	df 91       	pop	r29
     544:	cf 91       	pop	r28
     546:	1f 91       	pop	r17
     548:	0f 91       	pop	r16
     54a:	ff 90       	pop	r15
     54c:	ef 90       	pop	r14
     54e:	df 90       	pop	r13
     550:	cf 90       	pop	r12
     552:	08 95       	ret

00000554 <__vector_7>:


// called when TCNT2==OCR2A
// that is in 50Hz intervals
ISR(TIMER1_COMPA_vect){
     554:	1f 92       	push	r1
     556:	0f 92       	push	r0
     558:	0f b6       	in	r0, 0x3f	; 63
     55a:	0f 92       	push	r0
     55c:	11 24       	eor	r1, r1
     55e:	8f 93       	push	r24
	cnt2step++;
     560:	80 91 a9 00 	lds	r24, 0x00A9
     564:	8f 5f       	subi	r24, 0xFF	; 255
     566:	80 93 a9 00 	sts	0x00A9, r24
	if (cnt2step>50){
     56a:	80 91 a9 00 	lds	r24, 0x00A9
     56e:	83 33       	cpi	r24, 0x33	; 51
     570:	38 f0       	brcs	.+14     	; 0x580 <__vector_7+0x2c>
                cnt2step=0;
     572:	10 92 a9 00 	sts	0x00A9, r1
                sec++; // stepped every second
     576:	80 91 aa 00 	lds	r24, 0x00AA
     57a:	8f 5f       	subi	r24, 0xFF	; 255
     57c:	80 93 aa 00 	sts	0x00AA, r24
	}
}
     580:	8f 91       	pop	r24
     582:	0f 90       	pop	r0
     584:	0f be       	out	0x3f, r0	; 63
     586:	0f 90       	pop	r0
     588:	1f 90       	pop	r1
     58a:	18 95       	reti

0000058c <main>:
int main(void){

        
        uint16_t dat_p,plen;
        char str[20]; 
		DDRA = 0xFF;
     58c:	8f ef       	ldi	r24, 0xFF	; 255
     58e:	8a bb       	out	0x1a, r24	; 26
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     590:	c0 e0       	ldi	r28, 0x00	; 0
     592:	8c 2f       	mov	r24, r28
     594:	8a 95       	dec	r24
     596:	f1 f7       	brne	.-4      	; 0x594 <main+0x8>

        _delay_loop_1(0); // 60us

        /*initialize enc28j60*/
        enc28j60Init(mymac);
     598:	88 e6       	ldi	r24, 0x68	; 104
     59a:	90 e0       	ldi	r25, 0x00	; 0
     59c:	0e 94 a8 05 	call	0xb50	; 0xb50 <enc28j60Init>
        enc28j60clkout(2); // change clkout from 6.25MHz to 12.5MHz
     5a0:	82 e0       	ldi	r24, 0x02	; 2
     5a2:	0e 94 a2 05 	call	0xb44	; 0xb44 <enc28j60clkout>
     5a6:	ca 95       	dec	r28
     5a8:	f1 f7       	brne	.-4      	; 0x5a6 <main+0x1a>
        _delay_loop_1(0); // 60us
        
        sei();
     5aa:	78 94       	sei
        /* Magjack leds configuration, see enc28j60 datasheet, page 11 */
        // LEDB=yellow LEDA=green
        //
        // 0x476 is PHLCON LEDA=links status, LEDB=receive/transmit
        // enc28j60PhyWrite(PHLCON,0b0000 0100 0111 01 10);
        enc28j60PhyWrite(PHLCON,0x476);
     5ac:	66 e7       	ldi	r22, 0x76	; 118
     5ae:	74 e0       	ldi	r23, 0x04	; 4
     5b0:	84 e1       	ldi	r24, 0x14	; 20
     5b2:	0e 94 85 05 	call	0xb0a	; 0xb0a <enc28j60PhyWrite>

        DDRB|= (1<<DDB1); // LED, enable PB1, LED as output
     5b6:	b9 9a       	sbi	0x17, 1	; 23
        
        //init the web server ethernet/ip layer:
        init_udp_or_www_server(mymac,myip);
     5b8:	64 e6       	ldi	r22, 0x64	; 100
     5ba:	70 e0       	ldi	r23, 0x00	; 0
     5bc:	88 e6       	ldi	r24, 0x68	; 104
     5be:	90 e0       	ldi	r25, 0x00	; 0
     5c0:	0e 94 c6 0a 	call	0x158c	; 0x158c <init_udp_or_www_server>
        www_server_port(MYWWWPORT);
     5c4:	80 e5       	ldi	r24, 0x50	; 80
     5c6:	90 e0       	ldi	r25, 0x00	; 0
     5c8:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <www_server_port>
		
        // register to be informed about incomming ping:
        register_ping_rec_callback(&ping_callback);
     5cc:	86 eb       	ldi	r24, 0xB6	; 182
     5ce:	91 e0       	ldi	r25, 0x01	; 1
     5d0:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <register_ping_rec_callback>
                                continue;
                        }
                        //----------
                        if (start_web_client==1){
                                sec=0;
                                start_web_client=2;
     5d4:	68 94       	set
     5d6:	cc 24       	eor	r12, r12
     5d8:	c1 f8       	bld	r12, 1
                                gw_arp_state=2;
                        }
                        if (dns_state==0 && gw_arp_state==2){
                                if (!enc28j60linkup()) continue; // only for dnslkup_request we have to check if the link is up. 
                                sec=0;
                                dns_state=1;
     5da:	dd 24       	eor	r13, r13
     5dc:	d3 94       	inc	r13
		//client_browse_url(PSTR("/fromdevice/getip.php?pass=7s6d7&di=0F0-000-F0F-000-0F0&ordp=q79ty38jcld5ygbhgkl79l"),urlvarstr,PSTR(WEBSERVER_VHOST),&browserresult_callback,otherside_www_ip,gwmac);
		

        while(1){
                // handle ping and wait for a tcp packet
                plen=enc28j60PacketReceive(BUFFER_SIZE, buf);
     5de:	62 eb       	ldi	r22, 0xB2	; 178
     5e0:	70 e0       	ldi	r23, 0x00	; 0
     5e2:	8a e8       	ldi	r24, 0x8A	; 138
     5e4:	92 e0       	ldi	r25, 0x02	; 2
     5e6:	0e 94 9d 06 	call	0xd3a	; 0xd3a <enc28j60PacketReceive>
     5ea:	ec 01       	movw	r28, r24
                dat_p=packetloop_arp_icmp_tcp(buf,plen);
     5ec:	bc 01       	movw	r22, r24
     5ee:	82 eb       	ldi	r24, 0xB2	; 178
     5f0:	90 e0       	ldi	r25, 0x00	; 0
     5f2:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <packetloop_arp_icmp_tcp>
     5f6:	8c 01       	movw	r16, r24
                if(plen==0){
     5f8:	20 97       	sbiw	r28, 0x00	; 0
     5fa:	09 f0       	breq	.+2      	; 0x5fe <main+0x72>
     5fc:	6f c0       	rjmp	.+222    	; 0x6dc <main+0x150>
                        // we are idle here trigger arp and dns stuff here
                        if (gw_arp_state==0){
     5fe:	80 91 a7 00 	lds	r24, 0x00A7
     602:	81 11       	cpse	r24, r1
     604:	09 c0       	rjmp	.+18     	; 0x618 <main+0x8c>
                                // find the mac address of the gateway (e.g your dsl router).
                                get_mac_with_arp(gwip,TRANS_NUM_GWMAC,&arpresolver_result_callback);
     606:	40 ed       	ldi	r20, 0xD0	; 208
     608:	51 e0       	ldi	r21, 0x01	; 1
     60a:	6d 2d       	mov	r22, r13
     60c:	80 e6       	ldi	r24, 0x60	; 96
     60e:	90 e0       	ldi	r25, 0x00	; 0
     610:	0e 94 2d 0c 	call	0x185a	; 0x185a <get_mac_with_arp>
                                gw_arp_state=1;
     614:	d0 92 a7 00 	sts	0x00A7, r13
                        }
                        if (get_mac_with_arp_wait()==0 && gw_arp_state==1){
     618:	0e 94 26 0c 	call	0x184c	; 0x184c <get_mac_with_arp_wait>
     61c:	81 11       	cpse	r24, r1
     61e:	0b c0       	rjmp	.+22     	; 0x636 <main+0xaa>
     620:	80 91 a7 00 	lds	r24, 0x00A7
     624:	81 30       	cpi	r24, 0x01	; 1
     626:	39 f4       	brne	.+14     	; 0x636 <main+0xaa>
                                // done we have the mac address of the GW
                                gw_arp_state=2;
     628:	c0 92 a7 00 	sts	0x00A7, r12
                        }
                        if (dns_state==0 && gw_arp_state==2){
     62c:	80 91 a8 00 	lds	r24, 0x00A8
     630:	88 23       	and	r24, r24
     632:	49 f0       	breq	.+18     	; 0x646 <main+0xba>
     634:	19 c0       	rjmp	.+50     	; 0x668 <main+0xdc>
     636:	80 91 a8 00 	lds	r24, 0x00A8
     63a:	81 11       	cpse	r24, r1
     63c:	15 c0       	rjmp	.+42     	; 0x668 <main+0xdc>
     63e:	80 91 a7 00 	lds	r24, 0x00A7
     642:	82 30       	cpi	r24, 0x02	; 2
     644:	09 f5       	brne	.+66     	; 0x688 <main+0xfc>
                                if (!enc28j60linkup()) continue; // only for dnslkup_request we have to check if the link is up. 
     646:	0e 94 4d 06 	call	0xc9a	; 0xc9a <enc28j60linkup>
     64a:	88 23       	and	r24, r24
     64c:	41 f2       	breq	.-112    	; 0x5de <main+0x52>
                                sec=0;
     64e:	10 92 aa 00 	sts	0x00AA, r1
                                dns_state=1;
     652:	d0 92 a8 00 	sts	0x00A8, r13
                                dnslkup_request(buf,WEBSERVER_VHOST,gwmac);
     656:	46 e5       	ldi	r20, 0x56	; 86
     658:	53 e0       	ldi	r21, 0x03	; 3
     65a:	68 e7       	ldi	r22, 0x78	; 120
     65c:	70 e0       	ldi	r23, 0x00	; 0
     65e:	82 eb       	ldi	r24, 0xB2	; 178
     660:	90 e0       	ldi	r25, 0x00	; 0
     662:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <dnslkup_request>
                                continue;
     666:	bb cf       	rjmp	.-138    	; 0x5de <main+0x52>
                        }
                        if (dns_state==1 && dnslkup_haveanswer()){
     668:	81 30       	cpi	r24, 0x01	; 1
     66a:	51 f4       	brne	.+20     	; 0x680 <main+0xf4>
     66c:	0e 94 c2 03 	call	0x784	; 0x784 <dnslkup_haveanswer>
     670:	88 23       	and	r24, r24
     672:	31 f0       	breq	.+12     	; 0x680 <main+0xf4>
                                dns_state=2;
     674:	c0 92 a8 00 	sts	0x00A8, r12
                                dnslkup_get_ip(otherside_www_ip);
     678:	82 e5       	ldi	r24, 0x52	; 82
     67a:	93 e0       	ldi	r25, 0x03	; 3
     67c:	0e 94 c8 03 	call	0x790	; 0x790 <dnslkup_get_ip>
                        }
                        if (dns_state!=2){
     680:	80 91 a8 00 	lds	r24, 0x00A8
     684:	82 30       	cpi	r24, 0x02	; 2
     686:	41 f0       	breq	.+16     	; 0x698 <main+0x10c>
                                // retry every minute if dns-lookup failed:
                                if (sec > 1){
     688:	80 91 aa 00 	lds	r24, 0x00AA
     68c:	82 30       	cpi	r24, 0x02	; 2
     68e:	08 f4       	brcc	.+2      	; 0x692 <main+0x106>
     690:	a6 cf       	rjmp	.-180    	; 0x5de <main+0x52>
                                        dns_state=0;
     692:	10 92 a8 00 	sts	0x00A8, r1
     696:	a3 cf       	rjmp	.-186    	; 0x5de <main+0x52>
                                // don't try to use web client before
                                // we have a result of dns-lookup
                                continue;
                        }
                        //----------
                        if (start_web_client==1){
     698:	80 91 ad 00 	lds	r24, 0x00AD
     69c:	81 30       	cpi	r24, 0x01	; 1
     69e:	d9 f4       	brne	.+54     	; 0x6d6 <main+0x14a>
                                sec=0;
     6a0:	10 92 aa 00 	sts	0x00AA, r1
                                start_web_client=2;
     6a4:	c0 92 ad 00 	sts	0x00AD, r12
                                web_client_attempts++;
     6a8:	80 91 ac 00 	lds	r24, 0x00AC
     6ac:	8f 5f       	subi	r24, 0xFF	; 255
     6ae:	80 93 ac 00 	sts	0x00AC, r24
                                
                                client_browse_url(PSTR("/fromdevice/getip.php?pass=7s6d7&di=0F0-000-F0F-000-0F0&ordp=q79ty38jcld5ygbhgkl79l"),urlvarstr,PSTR(WEBSERVER_VHOST),&browserresult_callback,otherside_www_ip,gwmac);
     6b2:	0f 2e       	mov	r0, r31
     6b4:	f6 e5       	ldi	r31, 0x56	; 86
     6b6:	ef 2e       	mov	r14, r31
     6b8:	f3 e0       	ldi	r31, 0x03	; 3
     6ba:	ff 2e       	mov	r15, r31
     6bc:	f0 2d       	mov	r31, r0
     6be:	02 e5       	ldi	r16, 0x52	; 82
     6c0:	13 e0       	ldi	r17, 0x03	; 3
     6c2:	27 ec       	ldi	r18, 0xC7	; 199
     6c4:	31 e0       	ldi	r19, 0x01	; 1
     6c6:	48 eb       	ldi	r20, 0xB8	; 184
     6c8:	50 e0       	ldi	r21, 0x00	; 0
     6ca:	6d e3       	ldi	r22, 0x3D	; 61
     6cc:	73 e0       	ldi	r23, 0x03	; 3
     6ce:	84 e6       	ldi	r24, 0x64	; 100
     6d0:	90 e0       	ldi	r25, 0x00	; 0
     6d2:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <client_browse_url>
								//client_browse_url(PSTR("/input/VGvj9xAGQGcRxp7jO75J?private_key=9Yx6pdAY7YtgNXPEpPKo&test=5353"),urlvarstr,PSTR(WEBSERVER_VHOST),&browserresult_callback,otherside_www_ip,gwmac);
                       }
                        
                        
                               start_web_client=0;
     6d6:	10 92 ad 00 	sts	0x00AD, r1
                        
						
                        continue;
     6da:	81 cf       	rjmp	.-254    	; 0x5de <main+0x52>
                }
                if(dat_p==0){ // plen!=0
     6dc:	00 97       	sbiw	r24, 0x00	; 0
     6de:	31 f4       	brne	.+12     	; 0x6ec <main+0x160>
                        // check for incomming messages not processed
                        // as part of packetloop_arp_icmp_tcp, e.g udp messages
                        udp_client_check_for_dns_answer(buf,plen);
     6e0:	be 01       	movw	r22, r28
     6e2:	82 eb       	ldi	r24, 0xB2	; 178
     6e4:	90 e0       	ldi	r25, 0x00	; 0
     6e6:	0e 94 58 04 	call	0x8b0	; 0x8b0 <udp_client_check_for_dns_answer>
                        continue;
     6ea:	79 cf       	rjmp	.-270    	; 0x5de <main+0x52>
                }
                        
                if (strncmp("GET ",(char *)&(buf[dat_p]),4)!=0){
     6ec:	44 e0       	ldi	r20, 0x04	; 4
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	bc 01       	movw	r22, r24
     6f2:	6e 54       	subi	r22, 0x4E	; 78
     6f4:	7f 4f       	sbci	r23, 0xFF	; 255
     6f6:	8a e8       	ldi	r24, 0x8A	; 138
     6f8:	90 e0       	ldi	r25, 0x00	; 0
     6fa:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <strncmp>
     6fe:	89 2b       	or	r24, r25
     700:	59 f0       	breq	.+22     	; 0x718 <main+0x18c>
                        // head, post and other methods:
                        //
                        // for possible status codes see:
                        // http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html
                        dat_p=http200ok();
     702:	0e 94 dd 01 	call	0x3ba	; 0x3ba <http200ok>
                        dat_p=fill_tcp_data_p(buf,dat_p,PSTR("<h1>200 OK</h1>"));
     706:	44 e5       	ldi	r20, 0x54	; 84
     708:	50 e0       	ldi	r21, 0x00	; 0
     70a:	bc 01       	movw	r22, r24
     70c:	82 eb       	ldi	r24, 0xB2	; 178
     70e:	90 e0       	ldi	r25, 0x00	; 0
     710:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <fill_tcp_data_p>
     714:	8c 01       	movw	r16, r24
                        goto SENDTCP;
     716:	30 c0       	rjmp	.+96     	; 0x778 <main+0x1ec>
                }
                if (strncmp("/ ",(char *)&(buf[dat_p+4]),2)==0){
     718:	42 e0       	ldi	r20, 0x02	; 2
     71a:	50 e0       	ldi	r21, 0x00	; 0
     71c:	b8 01       	movw	r22, r16
     71e:	6a 54       	subi	r22, 0x4A	; 74
     720:	7f 4f       	sbci	r23, 0xFF	; 255
     722:	8f e8       	ldi	r24, 0x8F	; 143
     724:	90 e0       	ldi	r25, 0x00	; 0
     726:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <strncmp>
     72a:	89 2b       	or	r24, r25
     72c:	41 f4       	brne	.+16     	; 0x73e <main+0x1b2>
                        dat_p=http200ok();
     72e:	0e 94 dd 01 	call	0x3ba	; 0x3ba <http200ok>
                        dat_p=print_webpage(buf);
     732:	82 eb       	ldi	r24, 0xB2	; 178
     734:	90 e0       	ldi	r25, 0x00	; 0
     736:	0e 94 e6 01 	call	0x3cc	; 0x3cc <print_webpage>
     73a:	8c 01       	movw	r16, r24
                        goto SENDTCP;}
     73c:	1d c0       	rjmp	.+58     	; 0x778 <main+0x1ec>
				if (strncmp("pass=7s6d7",(char *)&(buf[dat_p+5]),10)==0)
     73e:	4a e0       	ldi	r20, 0x0A	; 10
     740:	50 e0       	ldi	r21, 0x00	; 0
     742:	b8 01       	movw	r22, r16
     744:	69 54       	subi	r22, 0x49	; 73
     746:	7f 4f       	sbci	r23, 0xFF	; 255
     748:	82 e9       	ldi	r24, 0x92	; 146
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <strncmp>
     750:	89 2b       	or	r24, r25
     752:	91 f4       	brne	.+36     	; 0x778 <main+0x1ec>
						}else{
							PORTA|=(1<<PA3);
						}
					}
					*/
					if (strncmp("address=",(char *)&(buf[dat_p+16]),8)==0){
     754:	48 e0       	ldi	r20, 0x08	; 8
     756:	50 e0       	ldi	r21, 0x00	; 0
     758:	b8 01       	movw	r22, r16
     75a:	6e 53       	subi	r22, 0x3E	; 62
     75c:	7f 4f       	sbci	r23, 0xFF	; 255
     75e:	8d e9       	ldi	r24, 0x9D	; 157
     760:	90 e0       	ldi	r25, 0x00	; 0
     762:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <strncmp>
     766:	89 2b       	or	r24, r25
     768:	39 f4       	brne	.+14     	; 0x778 <main+0x1ec>
						//address=10*atoi((char *)&buf[dat_p+24])+atoi((char *)&buf[dat_p+25]);
						address=atoi((char *)&buf[dat_p+24]);
     76a:	c8 01       	movw	r24, r16
     76c:	86 53       	subi	r24, 0x36	; 54
     76e:	9f 4f       	sbci	r25, 0xFF	; 255
     770:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <atoi>
     774:	80 93 a6 00 	sts	0x00A6, r24
						
					}
				}
                //
SENDTCP:
                www_server_reply(buf,dat_p); // send data
     778:	b8 01       	movw	r22, r16
     77a:	82 eb       	ldi	r24, 0xB2	; 178
     77c:	90 e0       	ldi	r25, 0x00	; 0
     77e:	0e 94 19 0b 	call	0x1632	; 0x1632 <www_server_reply>
     782:	2d cf       	rjmp	.-422    	; 0x5de <main+0x52>

00000784 <dnslkup_haveanswer>:


uint8_t dnslkup_haveanswer(void)
{       
        return(haveDNSanswer);
}
     784:	80 91 61 03 	lds	r24, 0x0361
     788:	08 95       	ret

0000078a <dnslkup_get_error_info>:

uint8_t dnslkup_get_error_info(void)
{       
        return(dns_ansError);
}
     78a:	80 91 5c 03 	lds	r24, 0x035C
     78e:	08 95       	ret

00000790 <dnslkup_get_ip>:

// ip is the return value
void dnslkup_get_ip(uint8_t *ip)
{       
     790:	ed e5       	ldi	r30, 0x5D	; 93
     792:	f3 e0       	ldi	r31, 0x03	; 3
     794:	dc 01       	movw	r26, r24
     796:	21 e6       	ldi	r18, 0x61	; 97
     798:	33 e0       	ldi	r19, 0x03	; 3
        uint8_t i=0;
        while(i<4){ip[i]=dns_answerip[i];i++;}
     79a:	81 91       	ld	r24, Z+
     79c:	8d 93       	st	X+, r24
     79e:	e2 17       	cp	r30, r18
     7a0:	f3 07       	cpc	r31, r19
     7a2:	d9 f7       	brne	.-10     	; 0x79a <dnslkup_get_ip+0xa>
}
     7a4:	08 95       	ret

000007a6 <dnslkup_request>:
// See http://www.ietf.org/rfc/rfc1034.txt 
// and http://www.ietf.org/rfc/rfc1035.txt
// gwmac is the internal mac addess of your router
// because we use 8.8.8.8 as a DNS server
uint8_t dnslkup_request(uint8_t *buf,const char *hostname,const uint8_t *gwmac)
{
     7a6:	ef 92       	push	r14
     7a8:	ff 92       	push	r15
     7aa:	0f 93       	push	r16
     7ac:	1f 93       	push	r17
     7ae:	cf 93       	push	r28
     7b0:	df 93       	push	r29
     7b2:	ec 01       	movw	r28, r24
     7b4:	7b 01       	movw	r14, r22
     7b6:	8a 01       	movw	r16, r20
        uint8_t i,lenpos,lencnt;
        haveDNSanswer=0;
     7b8:	10 92 61 03 	sts	0x0361, r1
        if(!enc28j60linkup()){
     7bc:	0e 94 4d 06 	call	0xc9a	; 0xc9a <enc28j60linkup>
     7c0:	81 11       	cpse	r24, r1
     7c2:	05 c0       	rjmp	.+10     	; 0x7ce <dnslkup_request+0x28>
                dns_ansError=4; // could not send request, link down
     7c4:	84 e0       	ldi	r24, 0x04	; 4
     7c6:	80 93 5c 03 	sts	0x035C, r24
                return(1);
     7ca:	81 e0       	ldi	r24, 0x01	; 1
     7cc:	6a c0       	rjmp	.+212    	; 0x8a2 <__stack+0x43>
        }
        dns_ansError=0;
     7ce:	10 92 5c 03 	sts	0x035C, r1
        dnstid_l++; // increment for next request, finally wrap
     7d2:	60 91 62 03 	lds	r22, 0x0362
     7d6:	6f 5f       	subi	r22, 0xFF	; 255
     7d8:	60 93 62 03 	sts	0x0362, r22
        send_udp_prepare(buf,(DNSCLIENT_SRC_PORT_H<<8)|(dnstid_l&0xff),dnsip,53,gwmac);
     7dc:	70 e0       	ldi	r23, 0x00	; 0
     7de:	70 6e       	ori	r23, 0xE0	; 224
     7e0:	25 e3       	ldi	r18, 0x35	; 53
     7e2:	30 e0       	ldi	r19, 0x00	; 0
     7e4:	4e e6       	ldi	r20, 0x6E	; 110
     7e6:	50 e0       	ldi	r21, 0x00	; 0
     7e8:	ce 01       	movw	r24, r28
     7ea:	0e 94 3f 0b 	call	0x167e	; 0x167e <send_udp_prepare>
        // fill tid:
        //buf[UDP_DATA_P] see below
        buf[UDP_DATA_P+1]=dnstid_l;
     7ee:	80 91 62 03 	lds	r24, 0x0362
     7f2:	8b a7       	std	Y+43, r24	; 0x2b
        buf[UDP_DATA_P+2]=1; // flags, standard recursive query
     7f4:	81 e0       	ldi	r24, 0x01	; 1
     7f6:	8c a7       	std	Y+44, r24	; 0x2c
     7f8:	fe 01       	movw	r30, r28
     7fa:	bd 96       	adiw	r30, 0x2d	; 45
     7fc:	ce 01       	movw	r24, r28
     7fe:	c6 96       	adiw	r24, 0x36	; 54
        i=3;
        // most fields are zero, here we zero everything and fill later
        while(i<12){ 
                buf[UDP_DATA_P+i]=0;
     800:	11 92       	st	Z+, r1
        //buf[UDP_DATA_P] see below
        buf[UDP_DATA_P+1]=dnstid_l;
        buf[UDP_DATA_P+2]=1; // flags, standard recursive query
        i=3;
        // most fields are zero, here we zero everything and fill later
        while(i<12){ 
     802:	e8 17       	cp	r30, r24
     804:	f9 07       	cpc	r31, r25
     806:	e1 f7       	brne	.-8      	; 0x800 <dnslkup_request+0x5a>
                buf[UDP_DATA_P+i]=0;
                i++;
        }
        buf[UDP_DATA_P+5]=1; // 1 question
     808:	81 e0       	ldi	r24, 0x01	; 1
     80a:	8f a7       	std	Y+47, r24	; 0x2f
        // 
        // the first len starts at i=12
        lenpos=12;
        i=13;
        lencnt=1; // need to start with one as there is no dot before the domain name and the below algorithm assumes lencnt=0 at dot
        while(*hostname){
     80c:	f7 01       	movw	r30, r14
     80e:	90 81       	ld	r25, Z
                if (*hostname=='\0') break;
     810:	99 23       	and	r25, r25
     812:	c9 f0       	breq	.+50     	; 0x846 <dnslkup_request+0xa0>
     814:	2c e0       	ldi	r18, 0x0C	; 12
     816:	6d e0       	ldi	r22, 0x0D	; 13
                if (*hostname=='.'){
                        buf[UDP_DATA_P+lenpos]=lencnt-1; // fill the length field
                        lencnt=0;
     818:	30 e0       	ldi	r19, 0x00	; 0
        lenpos=12;
        i=13;
        lencnt=1; // need to start with one as there is no dot before the domain name and the below algorithm assumes lencnt=0 at dot
        while(*hostname){
                if (*hostname=='\0') break;
                if (*hostname=='.'){
     81a:	9e 32       	cpi	r25, 0x2E	; 46
     81c:	41 f4       	brne	.+16     	; 0x82e <dnslkup_request+0x88>
                        buf[UDP_DATA_P+lenpos]=lencnt-1; // fill the length field
     81e:	de 01       	movw	r26, r28
     820:	a2 0f       	add	r26, r18
     822:	b1 1d       	adc	r27, r1
     824:	81 50       	subi	r24, 0x01	; 1
     826:	9a 96       	adiw	r26, 0x2a	; 42
     828:	8c 93       	st	X, r24
     82a:	26 2f       	mov	r18, r22
                        lencnt=0;
     82c:	83 2f       	mov	r24, r19
                        lenpos=i;
                }
                buf[UDP_DATA_P+i]=*hostname;
     82e:	91 91       	ld	r25, Z+
     830:	de 01       	movw	r26, r28
     832:	a6 0f       	add	r26, r22
     834:	b1 1d       	adc	r27, r1
     836:	9a 96       	adiw	r26, 0x2a	; 42
     838:	9c 93       	st	X, r25
                lencnt++;
     83a:	8f 5f       	subi	r24, 0xFF	; 255
                i++;
     83c:	6f 5f       	subi	r22, 0xFF	; 255
        // 
        // the first len starts at i=12
        lenpos=12;
        i=13;
        lencnt=1; // need to start with one as there is no dot before the domain name and the below algorithm assumes lencnt=0 at dot
        while(*hostname){
     83e:	90 81       	ld	r25, Z
                if (*hostname=='\0') break;
     840:	91 11       	cpse	r25, r1
     842:	eb cf       	rjmp	.-42     	; 0x81a <dnslkup_request+0x74>
     844:	03 c0       	rjmp	.+6      	; 0x84c <dnslkup_request+0xa6>
        // www.twitter.com would become: 3www7twitter3com
        // 
        // the first len starts at i=12
        lenpos=12;
        i=13;
        lencnt=1; // need to start with one as there is no dot before the domain name and the below algorithm assumes lencnt=0 at dot
     846:	81 e0       	ldi	r24, 0x01	; 1
        // we ask for is always length, string, length, string, ...
        // for earch portion of the name.
        // www.twitter.com would become: 3www7twitter3com
        // 
        // the first len starts at i=12
        lenpos=12;
     848:	2c e0       	ldi	r18, 0x0C	; 12
        i=13;
     84a:	6d e0       	ldi	r22, 0x0D	; 13
                buf[UDP_DATA_P+i]=*hostname;
                lencnt++;
                i++;
                hostname++;
        }
        buf[UDP_DATA_P+lenpos]=lencnt-1;
     84c:	fe 01       	movw	r30, r28
     84e:	e2 0f       	add	r30, r18
     850:	f1 1d       	adc	r31, r1
     852:	81 50       	subi	r24, 0x01	; 1
     854:	82 a7       	std	Z+42, r24	; 0x2a
        buf[UDP_DATA_P+i]=0; // terminate with zero, means root domain.
     856:	fe 01       	movw	r30, r28
     858:	e6 0f       	add	r30, r22
     85a:	f1 1d       	adc	r31, r1
     85c:	12 a6       	std	Z+42, r1	; 0x2a
        i++;
     85e:	81 e0       	ldi	r24, 0x01	; 1
     860:	86 0f       	add	r24, r22
        buf[UDP_DATA_P+i]=0;
     862:	fe 01       	movw	r30, r28
     864:	e8 0f       	add	r30, r24
     866:	f1 1d       	adc	r31, r1
     868:	12 a6       	std	Z+42, r1	; 0x2a
        i++;
     86a:	82 e0       	ldi	r24, 0x02	; 2
     86c:	86 0f       	add	r24, r22
        buf[UDP_DATA_P+i]=1; // type A
     86e:	fe 01       	movw	r30, r28
     870:	e8 0f       	add	r30, r24
     872:	f1 1d       	adc	r31, r1
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	82 a7       	std	Z+42, r24	; 0x2a
        i++;
     878:	93 e0       	ldi	r25, 0x03	; 3
     87a:	96 0f       	add	r25, r22
        buf[UDP_DATA_P+i]=0; 
     87c:	fe 01       	movw	r30, r28
     87e:	e9 0f       	add	r30, r25
     880:	f1 1d       	adc	r31, r1
     882:	12 a6       	std	Z+42, r1	; 0x2a
        i++;
     884:	94 e0       	ldi	r25, 0x04	; 4
     886:	96 0f       	add	r25, r22
        buf[UDP_DATA_P+i]=1; // class IN
     888:	fe 01       	movw	r30, r28
     88a:	e9 0f       	add	r30, r25
     88c:	f1 1d       	adc	r31, r1
     88e:	82 a7       	std	Z+42, r24	; 0x2a
        i++;
        // we encode the length into the upper byte of the TID
        // this way we can easily jump over the query section
        // of the answer:
        buf[UDP_DATA_P]=i-12;
     890:	89 ef       	ldi	r24, 0xF9	; 249
     892:	86 0f       	add	r24, r22
     894:	8a a7       	std	Y+42, r24	; 0x2a
        buf[UDP_DATA_P+i]=1; // type A
        i++;
        buf[UDP_DATA_P+i]=0; 
        i++;
        buf[UDP_DATA_P+i]=1; // class IN
        i++;
     896:	6b 5f       	subi	r22, 0xFB	; 251
        // we encode the length into the upper byte of the TID
        // this way we can easily jump over the query section
        // of the answer:
        buf[UDP_DATA_P]=i-12;
        send_udp_transmit(buf,i);
     898:	70 e0       	ldi	r23, 0x00	; 0
     89a:	ce 01       	movw	r24, r28
     89c:	0e 94 a5 0b 	call	0x174a	; 0x174a <send_udp_transmit>
        return(0);
     8a0:	80 e0       	ldi	r24, 0x00	; 0
}
     8a2:	df 91       	pop	r29
     8a4:	cf 91       	pop	r28
     8a6:	1f 91       	pop	r17
     8a8:	0f 91       	pop	r16
     8aa:	ff 90       	pop	r15
     8ac:	ef 90       	pop	r14
     8ae:	08 95       	ret

000008b0 <udp_client_check_for_dns_answer>:

// process the answer from the dns server:
// return 1 on sucessful processing of answer.
// We set also the variable haveDNSanswer
uint8_t udp_client_check_for_dns_answer(uint8_t *buf,uint16_t plen){
     8b0:	fc 01       	movw	r30, r24
        uint8_t j,i;
        if (plen<70){
     8b2:	66 34       	cpi	r22, 0x46	; 70
     8b4:	71 05       	cpc	r23, r1
     8b6:	08 f4       	brcc	.+2      	; 0x8ba <udp_client_check_for_dns_answer+0xa>
     8b8:	71 c0       	rjmp	.+226    	; 0x99c <udp_client_check_for_dns_answer+0xec>
                return(0);
        }
        if (buf[UDP_SRC_PORT_L_P]!=53){
     8ba:	83 a1       	ldd	r24, Z+35	; 0x23
     8bc:	85 33       	cpi	r24, 0x35	; 53
     8be:	09 f0       	breq	.+2      	; 0x8c2 <udp_client_check_for_dns_answer+0x12>
     8c0:	6f c0       	rjmp	.+222    	; 0x9a0 <udp_client_check_for_dns_answer+0xf0>
                // not from a DNS
                return(0);
        }
        if (buf[UDP_DST_PORT_H_P]!=DNSCLIENT_SRC_PORT_H){ 
     8c2:	84 a1       	ldd	r24, Z+36	; 0x24
     8c4:	80 3e       	cpi	r24, 0xE0	; 224
     8c6:	09 f0       	breq	.+2      	; 0x8ca <udp_client_check_for_dns_answer+0x1a>
     8c8:	6d c0       	rjmp	.+218    	; 0x9a4 <udp_client_check_for_dns_answer+0xf4>
                return(0);
        }
        // we use the TID also as port:
        if (buf[UDP_DST_PORT_L_P]!=dnstid_l){ 
     8ca:	85 a1       	ldd	r24, Z+37	; 0x25
     8cc:	90 91 62 03 	lds	r25, 0x0362
     8d0:	89 13       	cpse	r24, r25
     8d2:	6a c0       	rjmp	.+212    	; 0x9a8 <udp_client_check_for_dns_answer+0xf8>
        // is the packet for my IP:
        if(eth_type_is_ip_and_my_ip(buf,plen)==0){
                return(0);
        }
        */
        if (buf[UDP_DATA_P+1]!=dnstid_l){ 
     8d4:	93 a5       	ldd	r25, Z+43	; 0x2b
     8d6:	89 13       	cpse	r24, r25
     8d8:	69 c0       	rjmp	.+210    	; 0x9ac <udp_client_check_for_dns_answer+0xfc>
                return(0);
        }
        // check flags lower byte:
        if ((buf[UDP_DATA_P+3]&0x8F)!=0x80){ 
     8da:	85 a5       	ldd	r24, Z+45	; 0x2d
     8dc:	8f 78       	andi	r24, 0x8F	; 143
     8de:	80 38       	cpi	r24, 0x80	; 128
     8e0:	29 f0       	breq	.+10     	; 0x8ec <udp_client_check_for_dns_answer+0x3c>
                // there is an error or server does not support recursive
                // queries. We can only work with servers that support recursive
                // queries.
                dns_ansError=1;
     8e2:	81 e0       	ldi	r24, 0x01	; 1
     8e4:	80 93 5c 03 	sts	0x035C, r24
                return(0);
     8e8:	80 e0       	ldi	r24, 0x00	; 0
     8ea:	08 95       	ret
        //
        // UDP_DATA_P+12+querylen is first byte of first answer.
        // The answer contains again the domain name and we need to
        // jump over it to find the IP. This part can be abbreviated by
        // the use of 2 byte pointers. See RFC 1035.
        i=12+buf[UDP_DATA_P]; // we encoded the query len into tid
     8ec:	92 a5       	ldd	r25, Z+42	; 0x2a
     8ee:	94 5f       	subi	r25, 0xF4	; 244
                // pointer
                i+=2;
        }else{
                // we just search for the first, zero=root domain
                // all other octets must be non zero
                while(i<plen-UDP_DATA_P-7){
     8f0:	61 53       	subi	r22, 0x31	; 49
     8f2:	71 09       	sbc	r23, r1
        // The answer contains again the domain name and we need to
        // jump over it to find the IP. This part can be abbreviated by
        // the use of 2 byte pointers. See RFC 1035.
        i=12+buf[UDP_DATA_P]; // we encoded the query len into tid
ChecNextResp:
        if (buf[UDP_DATA_P+i] & 0xc0){
     8f4:	df 01       	movw	r26, r30
     8f6:	a9 0f       	add	r26, r25
     8f8:	b1 1d       	adc	r27, r1
     8fa:	9a 96       	adiw	r26, 0x2a	; 42
     8fc:	8c 91       	ld	r24, X
     8fe:	80 7c       	andi	r24, 0xC0	; 192
     900:	61 f0       	breq	.+24     	; 0x91a <udp_client_check_for_dns_answer+0x6a>
                // pointer
                i+=2;
     902:	9e 5f       	subi	r25, 0xFE	; 254
     904:	0f c0       	rjmp	.+30     	; 0x924 <udp_client_check_for_dns_answer+0x74>
        }else{
                // we just search for the first, zero=root domain
                // all other octets must be non zero
                while(i<plen-UDP_DATA_P-7){
                        i++;
     906:	9f 5f       	subi	r25, 0xFF	; 255
                        if (buf[UDP_DATA_P+i]==0){
     908:	df 01       	movw	r26, r30
     90a:	a9 0f       	add	r26, r25
     90c:	b1 1d       	adc	r27, r1
     90e:	9a 96       	adiw	r26, 0x2a	; 42
     910:	8c 91       	ld	r24, X
     912:	81 11       	cpse	r24, r1
     914:	02 c0       	rjmp	.+4      	; 0x91a <udp_client_check_for_dns_answer+0x6a>
                                i++;
     916:	9f 5f       	subi	r25, 0xFF	; 255
                                break;
     918:	05 c0       	rjmp	.+10     	; 0x924 <udp_client_check_for_dns_answer+0x74>
                // pointer
                i+=2;
        }else{
                // we just search for the first, zero=root domain
                // all other octets must be non zero
                while(i<plen-UDP_DATA_P-7){
     91a:	29 2f       	mov	r18, r25
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	26 17       	cp	r18, r22
     920:	37 07       	cpc	r19, r23
     922:	88 f3       	brcs	.-30     	; 0x906 <udp_client_check_for_dns_answer+0x56>
                }
        }
        // There might be multipe records in the answer. 
        // We are searching for an A record (contains IP).
        // Contributed by Andras Tucsni
        if (buf[UDP_DATA_P+i+1] != 1){    // check type == 1 for "A"
     924:	29 2f       	mov	r18, r25
     926:	30 e0       	ldi	r19, 0x00	; 0
     928:	df 01       	movw	r26, r30
     92a:	a2 0f       	add	r26, r18
     92c:	b3 1f       	adc	r27, r19
     92e:	9b 96       	adiw	r26, 0x2b	; 43
     930:	8c 91       	ld	r24, X
     932:	81 30       	cpi	r24, 0x01	; 1
     934:	99 f0       	breq	.+38     	; 0x95c <udp_client_check_for_dns_answer+0xac>
                i += 2 + 2 + 4;    // skip type & class & TTL
     936:	88 e0       	ldi	r24, 0x08	; 8
     938:	89 0f       	add	r24, r25
                i += buf[UDP_DATA_P+i+1] + 2;    // skip datalength bytes
     93a:	df 01       	movw	r26, r30
     93c:	a8 0f       	add	r26, r24
     93e:	b1 1d       	adc	r27, r1
     940:	9b 96       	adiw	r26, 0x2b	; 43
     942:	8c 91       	ld	r24, X
     944:	96 5f       	subi	r25, 0xF6	; 246
     946:	98 0f       	add	r25, r24
                if (i < plen-UDP_DATA_P-7){
     948:	29 2f       	mov	r18, r25
     94a:	30 e0       	ldi	r19, 0x00	; 0
     94c:	26 17       	cp	r18, r22
     94e:	37 07       	cpc	r19, r23
     950:	88 f2       	brcs	.-94     	; 0x8f4 <udp_client_check_for_dns_answer+0x44>
                        goto ChecNextResp;
                }
                dns_ansError=3; // no A record found but packet ends 
     952:	83 e0       	ldi	r24, 0x03	; 3
     954:	80 93 5c 03 	sts	0x035C, r24
                return(0);
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	08 95       	ret
        } 
        // We have an A record
        // i is now pointing to the high octet of the type field
        if (buf[UDP_DATA_P+i+9] !=4 ){
     95c:	df 01       	movw	r26, r30
     95e:	a2 0f       	add	r26, r18
     960:	b3 1f       	adc	r27, r19
     962:	d3 96       	adiw	r26, 0x33	; 51
     964:	2c 91       	ld	r18, X
     966:	24 30       	cpi	r18, 0x04	; 4
     968:	29 f0       	breq	.+10     	; 0x974 <udp_client_check_for_dns_answer+0xc4>
                dns_ansError=2; // not IPv4
     96a:	82 e0       	ldi	r24, 0x02	; 2
     96c:	80 93 5c 03 	sts	0x035C, r24
                return(0);
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	08 95       	ret
        }
        i+=10;
     974:	2a e0       	ldi	r18, 0x0A	; 10
     976:	29 0f       	add	r18, r25
     978:	30 e0       	ldi	r19, 0x00	; 0
     97a:	26 5d       	subi	r18, 0xD6	; 214
     97c:	3f 4f       	sbci	r19, 0xFF	; 255
     97e:	e2 0f       	add	r30, r18
     980:	f3 1f       	adc	r31, r19
     982:	ad e5       	ldi	r26, 0x5D	; 93
     984:	b3 e0       	ldi	r27, 0x03	; 3
     986:	21 e6       	ldi	r18, 0x61	; 97
     988:	33 e0       	ldi	r19, 0x03	; 3
        j=0;
        while(j<4){
                dns_answerip[j]=buf[UDP_DATA_P+i+j];
     98a:	91 91       	ld	r25, Z+
     98c:	9d 93       	st	X+, r25
                dns_ansError=2; // not IPv4
                return(0);
        }
        i+=10;
        j=0;
        while(j<4){
     98e:	a2 17       	cp	r26, r18
     990:	b3 07       	cpc	r27, r19
     992:	d9 f7       	brne	.-10     	; 0x98a <udp_client_check_for_dns_answer+0xda>
                dns_answerip[j]=buf[UDP_DATA_P+i+j];
                j++;
        }
        haveDNSanswer=1;
     994:	91 e0       	ldi	r25, 0x01	; 1
     996:	90 93 61 03 	sts	0x0361, r25
        return(1);
     99a:	08 95       	ret
// return 1 on sucessful processing of answer.
// We set also the variable haveDNSanswer
uint8_t udp_client_check_for_dns_answer(uint8_t *buf,uint16_t plen){
        uint8_t j,i;
        if (plen<70){
                return(0);
     99c:	80 e0       	ldi	r24, 0x00	; 0
     99e:	08 95       	ret
        }
        if (buf[UDP_SRC_PORT_L_P]!=53){
                // not from a DNS
                return(0);
     9a0:	80 e0       	ldi	r24, 0x00	; 0
     9a2:	08 95       	ret
        }
        if (buf[UDP_DST_PORT_H_P]!=DNSCLIENT_SRC_PORT_H){ 
                return(0);
     9a4:	80 e0       	ldi	r24, 0x00	; 0
     9a6:	08 95       	ret
        }
        // we use the TID also as port:
        if (buf[UDP_DST_PORT_L_P]!=dnstid_l){ 
                return(0);
     9a8:	80 e0       	ldi	r24, 0x00	; 0
     9aa:	08 95       	ret
        if(eth_type_is_ip_and_my_ip(buf,plen)==0){
                return(0);
        }
        */
        if (buf[UDP_DATA_P+1]!=dnstid_l){ 
                return(0);
     9ac:	80 e0       	ldi	r24, 0x00	; 0
                dns_answerip[j]=buf[UDP_DATA_P+i+j];
                j++;
        }
        haveDNSanswer=1;
        return(1);
}
     9ae:	08 95       	ret

000009b0 <enc28j60ReadOp>:
//
#define waitspi() while(!(SPSR&(1<<SPIF)))

uint8_t enc28j60ReadOp(uint8_t op, uint8_t address)
{
        CSACTIVE;
     9b0:	c2 98       	cbi	0x18, 2	; 24
        // issue read command
        SPDR = op | (address & ADDR_MASK);
     9b2:	96 2f       	mov	r25, r22
     9b4:	6f 71       	andi	r22, 0x1F	; 31
     9b6:	86 2b       	or	r24, r22
     9b8:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     9ba:	77 9b       	sbis	0x0e, 7	; 14
     9bc:	fe cf       	rjmp	.-4      	; 0x9ba <enc28j60ReadOp+0xa>
        // read data
        SPDR = 0x00;
     9be:	1f b8       	out	0x0f, r1	; 15
        waitspi();
     9c0:	77 9b       	sbis	0x0e, 7	; 14
     9c2:	fe cf       	rjmp	.-4      	; 0x9c0 <enc28j60ReadOp+0x10>
        // do dummy read if needed (for mac and mii, see datasheet page 29)
        if(address & 0x80)
     9c4:	99 23       	and	r25, r25
     9c6:	1c f4       	brge	.+6      	; 0x9ce <enc28j60ReadOp+0x1e>
        {
                SPDR = 0x00;
     9c8:	1f b8       	out	0x0f, r1	; 15
                waitspi();
     9ca:	77 9b       	sbis	0x0e, 7	; 14
     9cc:	fe cf       	rjmp	.-4      	; 0x9ca <enc28j60ReadOp+0x1a>
        }
        // release CS
        CSPASSIVE;
     9ce:	c2 9a       	sbi	0x18, 2	; 24
        return(SPDR);
     9d0:	8f b1       	in	r24, 0x0f	; 15
}
     9d2:	08 95       	ret

000009d4 <enc28j60WriteOp>:

void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
{
        CSACTIVE;
     9d4:	c2 98       	cbi	0x18, 2	; 24
        // issue write command
        SPDR = op | (address & ADDR_MASK);
     9d6:	6f 71       	andi	r22, 0x1F	; 31
     9d8:	86 2b       	or	r24, r22
     9da:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     9dc:	77 9b       	sbis	0x0e, 7	; 14
     9de:	fe cf       	rjmp	.-4      	; 0x9dc <enc28j60WriteOp+0x8>
        // write data
        SPDR = data;
     9e0:	4f b9       	out	0x0f, r20	; 15
        waitspi();
     9e2:	77 9b       	sbis	0x0e, 7	; 14
     9e4:	fe cf       	rjmp	.-4      	; 0x9e2 <enc28j60WriteOp+0xe>
        CSPASSIVE;
     9e6:	c2 9a       	sbi	0x18, 2	; 24
     9e8:	08 95       	ret

000009ea <enc28j60ReadBuffer>:
}

void enc28j60ReadBuffer(uint16_t len, uint8_t* data)
{
     9ea:	fb 01       	movw	r30, r22
        CSACTIVE;
     9ec:	c2 98       	cbi	0x18, 2	; 24
        // issue read command
        SPDR = ENC28J60_READ_BUF_MEM;
     9ee:	2a e3       	ldi	r18, 0x3A	; 58
     9f0:	2f b9       	out	0x0f, r18	; 15
        waitspi();
     9f2:	77 9b       	sbis	0x0e, 7	; 14
     9f4:	fe cf       	rjmp	.-4      	; 0x9f2 <enc28j60ReadBuffer+0x8>
        while(len)
     9f6:	00 97       	sbiw	r24, 0x00	; 0
     9f8:	61 f0       	breq	.+24     	; 0xa12 <enc28j60ReadBuffer+0x28>
     9fa:	df 01       	movw	r26, r30
     9fc:	a8 0f       	add	r26, r24
     9fe:	b9 1f       	adc	r27, r25
        {
                len--;
                // read data
                SPDR = 0x00;
     a00:	1f b8       	out	0x0f, r1	; 15
                waitspi();
     a02:	77 9b       	sbis	0x0e, 7	; 14
     a04:	fe cf       	rjmp	.-4      	; 0xa02 <enc28j60ReadBuffer+0x18>
                *data = SPDR;
     a06:	9f b1       	in	r25, 0x0f	; 15
     a08:	91 93       	st	Z+, r25
{
        CSACTIVE;
        // issue read command
        SPDR = ENC28J60_READ_BUF_MEM;
        waitspi();
        while(len)
     a0a:	ea 17       	cp	r30, r26
     a0c:	fb 07       	cpc	r31, r27
     a0e:	c1 f7       	brne	.-16     	; 0xa00 <enc28j60ReadBuffer+0x16>
     a10:	01 c0       	rjmp	.+2      	; 0xa14 <enc28j60ReadBuffer+0x2a>
     a12:	df 01       	movw	r26, r30
                SPDR = 0x00;
                waitspi();
                *data = SPDR;
                data++;
        }
        *data='\0';
     a14:	1c 92       	st	X, r1
        CSPASSIVE;
     a16:	c2 9a       	sbi	0x18, 2	; 24
     a18:	08 95       	ret

00000a1a <enc28j60WriteBuffer>:
}

void enc28j60WriteBuffer(uint16_t len, uint8_t* data)
{
     a1a:	fb 01       	movw	r30, r22
        CSACTIVE;
     a1c:	c2 98       	cbi	0x18, 2	; 24
        // issue write command
        SPDR = ENC28J60_WRITE_BUF_MEM;
     a1e:	2a e7       	ldi	r18, 0x7A	; 122
     a20:	2f b9       	out	0x0f, r18	; 15
        waitspi();
     a22:	77 9b       	sbis	0x0e, 7	; 14
     a24:	fe cf       	rjmp	.-4      	; 0xa22 <enc28j60WriteBuffer+0x8>
     a26:	08 c0       	rjmp	.+16     	; 0xa38 <enc28j60WriteBuffer+0x1e>
     a28:	9f 01       	movw	r18, r30
     a2a:	28 0f       	add	r18, r24
     a2c:	39 1f       	adc	r19, r25
        while(len)
        {
                len--;
                // write data
                SPDR = *data;
     a2e:	91 91       	ld	r25, Z+
     a30:	9f b9       	out	0x0f, r25	; 15
                data++;
                waitspi();
     a32:	77 9b       	sbis	0x0e, 7	; 14
     a34:	fe cf       	rjmp	.-4      	; 0xa32 <enc28j60WriteBuffer+0x18>
     a36:	03 c0       	rjmp	.+6      	; 0xa3e <enc28j60WriteBuffer+0x24>
{
        CSACTIVE;
        // issue write command
        SPDR = ENC28J60_WRITE_BUF_MEM;
        waitspi();
        while(len)
     a38:	00 97       	sbiw	r24, 0x00	; 0
     a3a:	b1 f7       	brne	.-20     	; 0xa28 <enc28j60WriteBuffer+0xe>
     a3c:	03 c0       	rjmp	.+6      	; 0xa44 <enc28j60WriteBuffer+0x2a>
     a3e:	e2 17       	cp	r30, r18
     a40:	f3 07       	cpc	r31, r19
     a42:	a9 f7       	brne	.-22     	; 0xa2e <enc28j60WriteBuffer+0x14>
                // write data
                SPDR = *data;
                data++;
                waitspi();
        }
        CSPASSIVE;
     a44:	c2 9a       	sbi	0x18, 2	; 24
     a46:	08 95       	ret

00000a48 <enc28j60SetBank>:
}

void enc28j60SetBank(uint8_t address)
{
     a48:	1f 93       	push	r17
     a4a:	cf 93       	push	r28
     a4c:	df 93       	push	r29
        // set the bank (if needed)
        if((address & BANK_MASK) != Enc28j60Bank)
     a4e:	18 2f       	mov	r17, r24
     a50:	10 76       	andi	r17, 0x60	; 96
     a52:	c1 2f       	mov	r28, r17
     a54:	d0 e0       	ldi	r29, 0x00	; 0
     a56:	20 91 65 03 	lds	r18, 0x0365
     a5a:	30 e0       	ldi	r19, 0x00	; 0
     a5c:	c2 17       	cp	r28, r18
     a5e:	d3 07       	cpc	r29, r19
     a60:	b1 f0       	breq	.+44     	; 0xa8e <enc28j60SetBank+0x46>
        {
                // set the bank
                enc28j60WriteOp(ENC28J60_BIT_FIELD_CLR, ECON1, (ECON1_BSEL1|ECON1_BSEL0));
     a62:	43 e0       	ldi	r20, 0x03	; 3
     a64:	6f e1       	ldi	r22, 0x1F	; 31
     a66:	80 ea       	ldi	r24, 0xA0	; 160
     a68:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <enc28j60WriteOp>
                enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, (address & BANK_MASK)>>5);
     a6c:	ae 01       	movw	r20, r28
     a6e:	55 95       	asr	r21
     a70:	47 95       	ror	r20
     a72:	55 95       	asr	r21
     a74:	47 95       	ror	r20
     a76:	55 95       	asr	r21
     a78:	47 95       	ror	r20
     a7a:	55 95       	asr	r21
     a7c:	47 95       	ror	r20
     a7e:	55 95       	asr	r21
     a80:	47 95       	ror	r20
     a82:	6f e1       	ldi	r22, 0x1F	; 31
     a84:	80 e8       	ldi	r24, 0x80	; 128
     a86:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <enc28j60WriteOp>
                Enc28j60Bank = (address & BANK_MASK);
     a8a:	10 93 65 03 	sts	0x0365, r17
        }
}
     a8e:	df 91       	pop	r29
     a90:	cf 91       	pop	r28
     a92:	1f 91       	pop	r17
     a94:	08 95       	ret

00000a96 <enc28j60Read>:

uint8_t enc28j60Read(uint8_t address)
{
     a96:	cf 93       	push	r28
     a98:	c8 2f       	mov	r28, r24
        // set the bank
        enc28j60SetBank(address);
     a9a:	0e 94 24 05 	call	0xa48	; 0xa48 <enc28j60SetBank>
        // do the read
        return enc28j60ReadOp(ENC28J60_READ_CTRL_REG, address);
     a9e:	6c 2f       	mov	r22, r28
     aa0:	80 e0       	ldi	r24, 0x00	; 0
     aa2:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <enc28j60ReadOp>
}
     aa6:	cf 91       	pop	r28
     aa8:	08 95       	ret

00000aaa <enc28j60Write>:
        // get data value from MIRDL and MIRDH
	return ((enc28j60Read(MIRDH)<<8)|enc28j60Read(MIRDL));
}

void enc28j60Write(uint8_t address, uint8_t data)
{
     aaa:	cf 93       	push	r28
     aac:	df 93       	push	r29
     aae:	c8 2f       	mov	r28, r24
     ab0:	d6 2f       	mov	r29, r22
        // set the bank
        enc28j60SetBank(address);
     ab2:	0e 94 24 05 	call	0xa48	; 0xa48 <enc28j60SetBank>
        // do the write
        enc28j60WriteOp(ENC28J60_WRITE_CTRL_REG, address, data);
     ab6:	4d 2f       	mov	r20, r29
     ab8:	6c 2f       	mov	r22, r28
     aba:	80 e4       	ldi	r24, 0x40	; 64
     abc:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <enc28j60WriteOp>
}
     ac0:	df 91       	pop	r29
     ac2:	cf 91       	pop	r28
     ac4:	08 95       	ret

00000ac6 <enc28j60PhyRead>:
        return enc28j60ReadOp(ENC28J60_READ_CTRL_REG, address);
}

// read 16 bits
uint16_t enc28j60PhyRead(uint8_t address)
{
     ac6:	cf 93       	push	r28
	// Set the right address and start the register read operation
	enc28j60Write(MIREGADR, address);
     ac8:	68 2f       	mov	r22, r24
     aca:	84 ed       	ldi	r24, 0xD4	; 212
     acc:	0e 94 55 05 	call	0xaaa	; 0xaaa <enc28j60Write>
	enc28j60Write(MICMD, MICMD_MIIRD);
     ad0:	61 e0       	ldi	r22, 0x01	; 1
     ad2:	82 ed       	ldi	r24, 0xD2	; 210
     ad4:	0e 94 55 05 	call	0xaaa	; 0xaaa <enc28j60Write>
	// wait until the PHY read completes
	while(enc28j60Read(MISTAT) & MISTAT_BUSY);
     ad8:	8a ee       	ldi	r24, 0xEA	; 234
     ada:	0e 94 4b 05 	call	0xa96	; 0xa96 <enc28j60Read>
     ade:	80 fd       	sbrc	r24, 0
     ae0:	fb cf       	rjmp	.-10     	; 0xad8 <enc28j60PhyRead+0x12>
	// reset reading bit
	enc28j60Write(MICMD, 0x00);
     ae2:	60 e0       	ldi	r22, 0x00	; 0
     ae4:	82 ed       	ldi	r24, 0xD2	; 210
     ae6:	0e 94 55 05 	call	0xaaa	; 0xaaa <enc28j60Write>
        // get data value from MIRDL and MIRDH
	return ((enc28j60Read(MIRDH)<<8)|enc28j60Read(MIRDL));
     aea:	89 ed       	ldi	r24, 0xD9	; 217
     aec:	0e 94 4b 05 	call	0xa96	; 0xa96 <enc28j60Read>
     af0:	c8 2f       	mov	r28, r24
     af2:	88 ed       	ldi	r24, 0xD8	; 216
     af4:	0e 94 4b 05 	call	0xa96	; 0xa96 <enc28j60Read>
     af8:	2c 2f       	mov	r18, r28
     afa:	30 e0       	ldi	r19, 0x00	; 0
     afc:	32 2f       	mov	r19, r18
     afe:	22 27       	eor	r18, r18
}
     b00:	a9 01       	movw	r20, r18
     b02:	48 2b       	or	r20, r24
     b04:	ca 01       	movw	r24, r20
     b06:	cf 91       	pop	r28
     b08:	08 95       	ret

00000b0a <enc28j60PhyWrite>:
        // do the write
        enc28j60WriteOp(ENC28J60_WRITE_CTRL_REG, address, data);
}

void enc28j60PhyWrite(uint8_t address, uint16_t data)
{
     b0a:	cf 93       	push	r28
     b0c:	df 93       	push	r29
     b0e:	d6 2f       	mov	r29, r22
     b10:	c7 2f       	mov	r28, r23
        // set the PHY register address
        enc28j60Write(MIREGADR, address);
     b12:	68 2f       	mov	r22, r24
     b14:	84 ed       	ldi	r24, 0xD4	; 212
     b16:	0e 94 55 05 	call	0xaaa	; 0xaaa <enc28j60Write>
        // write the PHY data
        enc28j60Write(MIWRL, data);
     b1a:	6d 2f       	mov	r22, r29
     b1c:	86 ed       	ldi	r24, 0xD6	; 214
     b1e:	0e 94 55 05 	call	0xaaa	; 0xaaa <enc28j60Write>
        enc28j60Write(MIWRH, data>>8);
     b22:	6c 2f       	mov	r22, r28
     b24:	87 ed       	ldi	r24, 0xD7	; 215
     b26:	0e 94 55 05 	call	0xaaa	; 0xaaa <enc28j60Write>
     b2a:	c8 e2       	ldi	r28, 0x28	; 40
        // wait until the PHY write completes
        while(enc28j60Read(MISTAT) & MISTAT_BUSY){
     b2c:	03 c0       	rjmp	.+6      	; 0xb34 <enc28j60PhyWrite+0x2a>
     b2e:	8c 2f       	mov	r24, r28
     b30:	8a 95       	dec	r24
     b32:	f1 f7       	brne	.-4      	; 0xb30 <enc28j60PhyWrite+0x26>
     b34:	8a ee       	ldi	r24, 0xEA	; 234
     b36:	0e 94 4b 05 	call	0xa96	; 0xa96 <enc28j60Read>
     b3a:	80 fd       	sbrc	r24, 0
     b3c:	f8 cf       	rjmp	.-16     	; 0xb2e <enc28j60PhyWrite+0x24>
                _delay_loop_1(40); // 10us
        }
}
     b3e:	df 91       	pop	r29
     b40:	cf 91       	pop	r28
     b42:	08 95       	ret

00000b44 <enc28j60clkout>:

void enc28j60clkout(uint8_t clk)
{
        //setup clkout: 2 is 12.5MHz:
	enc28j60Write(ECOCON, clk & 0x7);
     b44:	68 2f       	mov	r22, r24
     b46:	67 70       	andi	r22, 0x07	; 7
     b48:	85 e7       	ldi	r24, 0x75	; 117
     b4a:	0e 94 55 05 	call	0xaaa	; 0xaaa <enc28j60Write>
     b4e:	08 95       	ret

00000b50 <enc28j60Init>:
}

void enc28j60Init(uint8_t* macaddr)
{
     b50:	cf 93       	push	r28
     b52:	df 93       	push	r29
     b54:	ec 01       	movw	r28, r24
	// initialize I/O
        // ss as output:
	ENC28J60_CONTROL_DDR |= 1<<ENC28J60_CONTROL_CS;
     b56:	ba 9a       	sbi	0x17, 2	; 23
	CSPASSIVE; // ss=0
     b58:	c2 9a       	sbi	0x18, 2	; 24
        //	
	ENC28J60_CONTROL_DDR  |= 1<<ENC28J60_CONTROL_SI | 1<<ENC28J60_CONTROL_SCK; // mosi, sck output
     b5a:	87 b3       	in	r24, 0x17	; 23
     b5c:	80 6a       	ori	r24, 0xA0	; 160
     b5e:	87 bb       	out	0x17, r24	; 23
	ENC28J60_CONTROL_DDR&=~(1<<ENC28J60_CONTROL_SO); // MISO is input
     b60:	be 98       	cbi	0x17, 6	; 23
        //
        ENC28J60_CONTROL_PORT&=~(1<<ENC28J60_CONTROL_SI); // MOSI low
     b62:	c5 98       	cbi	0x18, 5	; 24
        ENC28J60_CONTROL_PORT&=~(1<<ENC28J60_CONTROL_SCK); // SCK low
     b64:	c7 98       	cbi	0x18, 7	; 24
	//
	// initialize SPI interface
	// master mode and Fosc/2 clock:
        SPCR = (1<<SPE)|(1<<MSTR);
     b66:	80 e5       	ldi	r24, 0x50	; 80
     b68:	8d b9       	out	0x0d, r24	; 13
        SPSR |= (1<<SPI2X);
     b6a:	70 9a       	sbi	0x0e, 0	; 14
	// perform system reset
	enc28j60WriteOp(ENC28J60_SOFT_RESET, 0, ENC28J60_SOFT_RESET);
     b6c:	4f ef       	ldi	r20, 0xFF	; 255
     b6e:	60 e0       	ldi	r22, 0x00	; 0
     b70:	8f ef       	ldi	r24, 0xFF	; 255
     b72:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <enc28j60WriteOp>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     b76:	80 e0       	ldi	r24, 0x00	; 0
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	01 97       	sbiw	r24, 0x01	; 1
     b7c:	f1 f7       	brne	.-4      	; 0xb7a <enc28j60Init+0x2a>
	//while(!(enc28j60Read(ESTAT) & ESTAT_CLKRDY));
	// do bank 0 stuff
	// initialize receive buffer
	// 16-bit transfers, must write low byte first
	// set receive buffer start address
	gNextPacketPtr = RXSTART_INIT;
     b7e:	10 92 64 03 	sts	0x0364, r1
     b82:	10 92 63 03 	sts	0x0363, r1
        // Rx start
	enc28j60Write(ERXSTL, RXSTART_INIT&0xFF);
     b86:	60 e0       	ldi	r22, 0x00	; 0
     b88:	88 e0       	ldi	r24, 0x08	; 8
     b8a:	0e 94 55 05 	call	0xaaa	; 0xaaa <enc28j60Write>
	enc28j60Write(ERXSTH, RXSTART_INIT>>8);
     b8e:	60 e0       	ldi	r22, 0x00	; 0
     b90:	89 e0       	ldi	r24, 0x09	; 9
     b92:	0e 94 55 05 	call	0xaaa	; 0xaaa <enc28j60Write>
	// set receive pointer address
	enc28j60Write(ERXRDPTL, RXSTART_INIT&0xFF);
     b96:	60 e0       	ldi	r22, 0x00	; 0
     b98:	8c e0       	ldi	r24, 0x0C	; 12
     b9a:	0e 94 55 05 	call	0xaaa	; 0xaaa <enc28j60Write>
	enc28j60Write(ERXRDPTH, RXSTART_INIT>>8);
     b9e:	60 e0       	ldi	r22, 0x00	; 0
     ba0:	8d e0       	ldi	r24, 0x0D	; 13
     ba2:	0e 94 55 05 	call	0xaaa	; 0xaaa <enc28j60Write>
	// RX end
	enc28j60Write(ERXNDL, RXSTOP_INIT&0xFF);
     ba6:	6f ef       	ldi	r22, 0xFF	; 255
     ba8:	8a e0       	ldi	r24, 0x0A	; 10
     baa:	0e 94 55 05 	call	0xaaa	; 0xaaa <enc28j60Write>
	enc28j60Write(ERXNDH, RXSTOP_INIT>>8);
     bae:	69 e1       	ldi	r22, 0x19	; 25
     bb0:	8b e0       	ldi	r24, 0x0B	; 11
     bb2:	0e 94 55 05 	call	0xaaa	; 0xaaa <enc28j60Write>
	// TX start
	enc28j60Write(ETXSTL, TXSTART_INIT&0xFF);
     bb6:	60 e0       	ldi	r22, 0x00	; 0
     bb8:	84 e0       	ldi	r24, 0x04	; 4
     bba:	0e 94 55 05 	call	0xaaa	; 0xaaa <enc28j60Write>
	enc28j60Write(ETXSTH, TXSTART_INIT>>8);
     bbe:	6a e1       	ldi	r22, 0x1A	; 26
     bc0:	85 e0       	ldi	r24, 0x05	; 5
     bc2:	0e 94 55 05 	call	0xaaa	; 0xaaa <enc28j60Write>
	// TX end
	enc28j60Write(ETXNDL, TXSTOP_INIT&0xFF);
     bc6:	6f ef       	ldi	r22, 0xFF	; 255
     bc8:	86 e0       	ldi	r24, 0x06	; 6
     bca:	0e 94 55 05 	call	0xaaa	; 0xaaa <enc28j60Write>
	enc28j60Write(ETXNDH, TXSTOP_INIT>>8);
     bce:	6f e1       	ldi	r22, 0x1F	; 31
     bd0:	87 e0       	ldi	r24, 0x07	; 7
     bd2:	0e 94 55 05 	call	0xaaa	; 0xaaa <enc28j60Write>
        // Type     ETH.DST
        // ARP      BROADCAST
        // 06 08 -- ff ff ff ff ff ff -> ip checksum for theses bytes=f7f9
        // in binary these poitions are:11 0000 0011 1111
        // This is hex 303F->EPMM0=0x3f,EPMM1=0x30
	enc28j60Write(ERXFCON, ERXFCON_UCEN|ERXFCON_CRCEN|ERXFCON_PMEN);
     bd6:	60 eb       	ldi	r22, 0xB0	; 176
     bd8:	88 e3       	ldi	r24, 0x38	; 56
     bda:	0e 94 55 05 	call	0xaaa	; 0xaaa <enc28j60Write>
	enc28j60Write(EPMM0, 0x3f);
     bde:	6f e3       	ldi	r22, 0x3F	; 63
     be0:	88 e2       	ldi	r24, 0x28	; 40
     be2:	0e 94 55 05 	call	0xaaa	; 0xaaa <enc28j60Write>
	enc28j60Write(EPMM1, 0x30);
     be6:	60 e3       	ldi	r22, 0x30	; 48
     be8:	89 e2       	ldi	r24, 0x29	; 41
     bea:	0e 94 55 05 	call	0xaaa	; 0xaaa <enc28j60Write>
	enc28j60Write(EPMCSL, 0xf9);
     bee:	69 ef       	ldi	r22, 0xF9	; 249
     bf0:	80 e3       	ldi	r24, 0x30	; 48
     bf2:	0e 94 55 05 	call	0xaaa	; 0xaaa <enc28j60Write>
	enc28j60Write(EPMCSH, 0xf7);
     bf6:	67 ef       	ldi	r22, 0xF7	; 247
     bf8:	81 e3       	ldi	r24, 0x31	; 49
     bfa:	0e 94 55 05 	call	0xaaa	; 0xaaa <enc28j60Write>
        //
        //
	// do bank 2 stuff
	// enable MAC receive
	enc28j60Write(MACON1, MACON1_MARXEN|MACON1_TXPAUS|MACON1_RXPAUS);
     bfe:	6d e0       	ldi	r22, 0x0D	; 13
     c00:	80 ec       	ldi	r24, 0xC0	; 192
     c02:	0e 94 55 05 	call	0xaaa	; 0xaaa <enc28j60Write>
	// bring MAC out of reset
	enc28j60Write(MACON2, 0x00);
     c06:	60 e0       	ldi	r22, 0x00	; 0
     c08:	81 ec       	ldi	r24, 0xC1	; 193
     c0a:	0e 94 55 05 	call	0xaaa	; 0xaaa <enc28j60Write>
	// enable automatic padding to 60bytes and CRC operations
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, MACON3, MACON3_PADCFG0|MACON3_TXCRCEN|MACON3_FRMLNEN);
     c0e:	42 e3       	ldi	r20, 0x32	; 50
     c10:	62 ec       	ldi	r22, 0xC2	; 194
     c12:	80 e8       	ldi	r24, 0x80	; 128
     c14:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <enc28j60WriteOp>
	// set inter-frame gap (non-back-to-back)
	enc28j60Write(MAIPGL, 0x12);
     c18:	62 e1       	ldi	r22, 0x12	; 18
     c1a:	86 ec       	ldi	r24, 0xC6	; 198
     c1c:	0e 94 55 05 	call	0xaaa	; 0xaaa <enc28j60Write>
	enc28j60Write(MAIPGH, 0x0C);
     c20:	6c e0       	ldi	r22, 0x0C	; 12
     c22:	87 ec       	ldi	r24, 0xC7	; 199
     c24:	0e 94 55 05 	call	0xaaa	; 0xaaa <enc28j60Write>
	// set inter-frame gap (back-to-back)
	enc28j60Write(MABBIPG, 0x12);
     c28:	62 e1       	ldi	r22, 0x12	; 18
     c2a:	84 ec       	ldi	r24, 0xC4	; 196
     c2c:	0e 94 55 05 	call	0xaaa	; 0xaaa <enc28j60Write>
	// Set the maximum packet size which the controller will accept
        // Do not send packets longer than MAX_FRAMELEN:
	enc28j60Write(MAMXFLL, MAX_FRAMELEN&0xFF);	
     c30:	6c ed       	ldi	r22, 0xDC	; 220
     c32:	8a ec       	ldi	r24, 0xCA	; 202
     c34:	0e 94 55 05 	call	0xaaa	; 0xaaa <enc28j60Write>
	enc28j60Write(MAMXFLH, MAX_FRAMELEN>>8);
     c38:	65 e0       	ldi	r22, 0x05	; 5
     c3a:	8b ec       	ldi	r24, 0xCB	; 203
     c3c:	0e 94 55 05 	call	0xaaa	; 0xaaa <enc28j60Write>
	// do bank 3 stuff
        // write MAC address
        // NOTE: MAC address in ENC28J60 is byte-backward
        enc28j60Write(MAADR5, macaddr[0]);
     c40:	68 81       	ld	r22, Y
     c42:	84 ee       	ldi	r24, 0xE4	; 228
     c44:	0e 94 55 05 	call	0xaaa	; 0xaaa <enc28j60Write>
        enc28j60Write(MAADR4, macaddr[1]);
     c48:	69 81       	ldd	r22, Y+1	; 0x01
     c4a:	85 ee       	ldi	r24, 0xE5	; 229
     c4c:	0e 94 55 05 	call	0xaaa	; 0xaaa <enc28j60Write>
        enc28j60Write(MAADR3, macaddr[2]);
     c50:	6a 81       	ldd	r22, Y+2	; 0x02
     c52:	82 ee       	ldi	r24, 0xE2	; 226
     c54:	0e 94 55 05 	call	0xaaa	; 0xaaa <enc28j60Write>
        enc28j60Write(MAADR2, macaddr[3]);
     c58:	6b 81       	ldd	r22, Y+3	; 0x03
     c5a:	83 ee       	ldi	r24, 0xE3	; 227
     c5c:	0e 94 55 05 	call	0xaaa	; 0xaaa <enc28j60Write>
        enc28j60Write(MAADR1, macaddr[4]);
     c60:	6c 81       	ldd	r22, Y+4	; 0x04
     c62:	80 ee       	ldi	r24, 0xE0	; 224
     c64:	0e 94 55 05 	call	0xaaa	; 0xaaa <enc28j60Write>
        enc28j60Write(MAADR0, macaddr[5]);
     c68:	6d 81       	ldd	r22, Y+5	; 0x05
     c6a:	81 ee       	ldi	r24, 0xE1	; 225
     c6c:	0e 94 55 05 	call	0xaaa	; 0xaaa <enc28j60Write>
	// no loopback of transmitted frames
	enc28j60PhyWrite(PHCON2, PHCON2_HDLDIS);
     c70:	60 e0       	ldi	r22, 0x00	; 0
     c72:	71 e0       	ldi	r23, 0x01	; 1
     c74:	80 e1       	ldi	r24, 0x10	; 16
     c76:	0e 94 85 05 	call	0xb0a	; 0xb0a <enc28j60PhyWrite>
	// switch to bank 0
	enc28j60SetBank(ECON1);
     c7a:	8f e1       	ldi	r24, 0x1F	; 31
     c7c:	0e 94 24 05 	call	0xa48	; 0xa48 <enc28j60SetBank>
	// enable interrutps
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, EIE, EIE_INTIE|EIE_PKTIE);
     c80:	40 ec       	ldi	r20, 0xC0	; 192
     c82:	6b e1       	ldi	r22, 0x1B	; 27
     c84:	80 e8       	ldi	r24, 0x80	; 128
     c86:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <enc28j60WriteOp>
	// enable packet reception
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_RXEN);
     c8a:	44 e0       	ldi	r20, 0x04	; 4
     c8c:	6f e1       	ldi	r22, 0x1F	; 31
     c8e:	80 e8       	ldi	r24, 0x80	; 128
     c90:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <enc28j60WriteOp>
}
     c94:	df 91       	pop	r29
     c96:	cf 91       	pop	r28
     c98:	08 95       	ret

00000c9a <enc28j60linkup>:
        // and only at the next call to enc28j60linkup it will come up.
        // This way we can detect intermittened link failures and
        // that might be what we want.
        // The non latching version is LSTAT.
        // PHSTAT2 LSTAT (= bit 10 in upper reg)
        if (enc28j60PhyRead(PHSTAT2) & (1<<10) ){
     c9a:	81 e1       	ldi	r24, 0x11	; 17
     c9c:	0e 94 63 05 	call	0xac6	; 0xac6 <enc28j60PhyRead>
        //if (enc28j60PhyRead(PHSTAT1) & PHSTAT1_LLSTAT){
                return(1);
        }
        return(0);
		
}
     ca0:	92 fb       	bst	r25, 2
     ca2:	88 27       	eor	r24, r24
     ca4:	80 f9       	bld	r24, 0
     ca6:	08 95       	ret

00000ca8 <enc28j60PacketSend>:

void enc28j60PacketSend(uint16_t len, uint8_t* packet)
{
     ca8:	0f 93       	push	r16
     caa:	1f 93       	push	r17
     cac:	cf 93       	push	r28
     cae:	df 93       	push	r29
     cb0:	ec 01       	movw	r28, r24
     cb2:	8b 01       	movw	r16, r22
        // Check no transmit in progress
        while (enc28j60ReadOp(ENC28J60_READ_CTRL_REG, ECON1) & ECON1_TXRTS);
     cb4:	6f e1       	ldi	r22, 0x1F	; 31
     cb6:	80 e0       	ldi	r24, 0x00	; 0
     cb8:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <enc28j60ReadOp>
     cbc:	83 fd       	sbrc	r24, 3
     cbe:	fa cf       	rjmp	.-12     	; 0xcb4 <enc28j60PacketSend+0xc>
        // 
        // Reset the transmit logic problem. Unblock stall in the transmit logic.
        // See Rev. B4 Silicon Errata point 12.
        if( (enc28j60Read(EIR) & EIR_TXERIF) ) {
     cc0:	8c e1       	ldi	r24, 0x1C	; 28
     cc2:	0e 94 4b 05 	call	0xa96	; 0xa96 <enc28j60Read>
     cc6:	81 ff       	sbrs	r24, 1
     cc8:	13 c0       	rjmp	.+38     	; 0xcf0 <enc28j60PacketSend+0x48>
                enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRST);
     cca:	40 e8       	ldi	r20, 0x80	; 128
     ccc:	6f e1       	ldi	r22, 0x1F	; 31
     cce:	80 e8       	ldi	r24, 0x80	; 128
     cd0:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <enc28j60WriteOp>
                enc28j60WriteOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRST);
     cd4:	40 e8       	ldi	r20, 0x80	; 128
     cd6:	6f e1       	ldi	r22, 0x1F	; 31
     cd8:	80 ea       	ldi	r24, 0xA0	; 160
     cda:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <enc28j60WriteOp>
                enc28j60WriteOp(ENC28J60_BIT_FIELD_CLR, EIR, EIR_TXERIF); 
     cde:	42 e0       	ldi	r20, 0x02	; 2
     ce0:	6c e1       	ldi	r22, 0x1C	; 28
     ce2:	80 ea       	ldi	r24, 0xA0	; 160
     ce4:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <enc28j60WriteOp>
     ce8:	80 e3       	ldi	r24, 0x30	; 48
     cea:	95 e7       	ldi	r25, 0x75	; 117
     cec:	01 97       	sbiw	r24, 0x01	; 1
     cee:	f1 f7       	brne	.-4      	; 0xcec <enc28j60PacketSend+0x44>
                _delay_loop_2(30000); // 10ms
        }
	// Set the write pointer to start of transmit buffer area
	enc28j60Write(EWRPTL, TXSTART_INIT&0xFF);
     cf0:	60 e0       	ldi	r22, 0x00	; 0
     cf2:	82 e0       	ldi	r24, 0x02	; 2
     cf4:	0e 94 55 05 	call	0xaaa	; 0xaaa <enc28j60Write>
	enc28j60Write(EWRPTH, TXSTART_INIT>>8);
     cf8:	6a e1       	ldi	r22, 0x1A	; 26
     cfa:	83 e0       	ldi	r24, 0x03	; 3
     cfc:	0e 94 55 05 	call	0xaaa	; 0xaaa <enc28j60Write>
	// Set the TXND pointer to correspond to the packet size given
	enc28j60Write(ETXNDL, (TXSTART_INIT+len)&0xFF);
     d00:	6c 2f       	mov	r22, r28
     d02:	86 e0       	ldi	r24, 0x06	; 6
     d04:	0e 94 55 05 	call	0xaaa	; 0xaaa <enc28j60Write>
	enc28j60Write(ETXNDH, (TXSTART_INIT+len)>>8);
     d08:	ce 01       	movw	r24, r28
     d0a:	96 5e       	subi	r25, 0xE6	; 230
     d0c:	69 2f       	mov	r22, r25
     d0e:	87 e0       	ldi	r24, 0x07	; 7
     d10:	0e 94 55 05 	call	0xaaa	; 0xaaa <enc28j60Write>
	// write per-packet control byte (0x00 means use macon3 settings)
	enc28j60WriteOp(ENC28J60_WRITE_BUF_MEM, 0, 0x00);
     d14:	40 e0       	ldi	r20, 0x00	; 0
     d16:	60 e0       	ldi	r22, 0x00	; 0
     d18:	8a e7       	ldi	r24, 0x7A	; 122
     d1a:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <enc28j60WriteOp>
	// copy the packet into the transmit buffer
	enc28j60WriteBuffer(len, packet);
     d1e:	b8 01       	movw	r22, r16
     d20:	ce 01       	movw	r24, r28
     d22:	0e 94 0d 05 	call	0xa1a	; 0xa1a <enc28j60WriteBuffer>
	// send the contents of the transmit buffer onto the network
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRTS);
     d26:	48 e0       	ldi	r20, 0x08	; 8
     d28:	6f e1       	ldi	r22, 0x1F	; 31
     d2a:	80 e8       	ldi	r24, 0x80	; 128
     d2c:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <enc28j60WriteOp>
}
     d30:	df 91       	pop	r29
     d32:	cf 91       	pop	r28
     d34:	1f 91       	pop	r17
     d36:	0f 91       	pop	r16
     d38:	08 95       	ret

00000d3a <enc28j60PacketReceive>:
// The packet will by headed by an ethernet header.
//      maxlen  The maximum acceptable length of a retrieved packet.
//      packet  Pointer where packet data should be stored.
// Returns: Packet length in bytes if a packet was retrieved, zero otherwise.
uint16_t enc28j60PacketReceive(uint16_t maxlen, uint8_t* packet)
{
     d3a:	af 92       	push	r10
     d3c:	bf 92       	push	r11
     d3e:	cf 92       	push	r12
     d40:	df 92       	push	r13
     d42:	ef 92       	push	r14
     d44:	ff 92       	push	r15
     d46:	0f 93       	push	r16
     d48:	1f 93       	push	r17
     d4a:	cf 93       	push	r28
     d4c:	df 93       	push	r29
     d4e:	6c 01       	movw	r12, r24
     d50:	7b 01       	movw	r14, r22
	uint16_t rxstat;
	uint16_t len;
	// check if a packet has been received and buffered
	//if( !(enc28j60Read(EIR) & EIR_PKTIF) )
        // The above does not work. See Rev. B4 Silicon Errata point 6.
	if( enc28j60Read(EPKTCNT) ==0 ){
     d52:	89 e3       	ldi	r24, 0x39	; 57
     d54:	0e 94 4b 05 	call	0xa96	; 0xa96 <enc28j60Read>
     d58:	88 23       	and	r24, r24
     d5a:	09 f4       	brne	.+2      	; 0xd5e <enc28j60PacketReceive+0x24>
     d5c:	64 c0       	rjmp	.+200    	; 0xe26 <enc28j60PacketReceive+0xec>
		return(0);
        }

	// Set the read pointer to the start of the received packet
	enc28j60Write(ERDPTL, (gNextPacketPtr &0xFF));
     d5e:	60 91 63 03 	lds	r22, 0x0363
     d62:	c0 91 64 03 	lds	r28, 0x0364
     d66:	80 e0       	ldi	r24, 0x00	; 0
     d68:	0e 94 55 05 	call	0xaaa	; 0xaaa <enc28j60Write>
	enc28j60Write(ERDPTH, (gNextPacketPtr)>>8);
     d6c:	6c 2f       	mov	r22, r28
     d6e:	81 e0       	ldi	r24, 0x01	; 1
     d70:	0e 94 55 05 	call	0xaaa	; 0xaaa <enc28j60Write>
	// read the next packet pointer
	gNextPacketPtr  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
     d74:	60 e0       	ldi	r22, 0x00	; 0
     d76:	8a e3       	ldi	r24, 0x3A	; 58
     d78:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <enc28j60ReadOp>
     d7c:	c8 2f       	mov	r28, r24
	gNextPacketPtr |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
     d7e:	60 e0       	ldi	r22, 0x00	; 0
     d80:	8a e3       	ldi	r24, 0x3A	; 58
     d82:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <enc28j60ReadOp>
     d86:	d0 e0       	ldi	r29, 0x00	; 0
     d88:	d8 2b       	or	r29, r24
     d8a:	d0 93 64 03 	sts	0x0364, r29
     d8e:	c0 93 63 03 	sts	0x0363, r28
	// read the packet length (see datasheet page 43)
	len  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
     d92:	60 e0       	ldi	r22, 0x00	; 0
     d94:	8a e3       	ldi	r24, 0x3A	; 58
     d96:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <enc28j60ReadOp>
     d9a:	b8 2e       	mov	r11, r24
	len |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
     d9c:	60 e0       	ldi	r22, 0x00	; 0
     d9e:	8a e3       	ldi	r24, 0x3A	; 58
     da0:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <enc28j60ReadOp>
     da4:	a8 2e       	mov	r10, r24
        len-=4; //remove the CRC count
	// read the receive status (see datasheet page 43)
	rxstat  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
     da6:	60 e0       	ldi	r22, 0x00	; 0
     da8:	8a e3       	ldi	r24, 0x3A	; 58
     daa:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <enc28j60ReadOp>
     dae:	08 2f       	mov	r16, r24
	rxstat |= ((uint16_t)enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0))<<8;
     db0:	60 e0       	ldi	r22, 0x00	; 0
     db2:	8a e3       	ldi	r24, 0x3A	; 58
     db4:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <enc28j60ReadOp>
                len=maxlen-1;
        }
        // check CRC and symbol errors (see datasheet page 44, table 7-3):
        // The ERXFCON.CRCEN is set by default. Normally we should not
        // need to check this.
        if ((rxstat & 0x80)==0){
     db8:	07 ff       	sbrs	r16, 7
     dba:	11 c0       	rjmp	.+34     	; 0xdde <enc28j60PacketReceive+0xa4>
        len-=4; //remove the CRC count
	// read the receive status (see datasheet page 43)
	rxstat  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
	rxstat |= ((uint16_t)enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0))<<8;
	// limit retrieve length
        if (len>maxlen-1){
     dbc:	81 e0       	ldi	r24, 0x01	; 1
     dbe:	c8 1a       	sub	r12, r24
     dc0:	d1 08       	sbc	r13, r1
	// read the next packet pointer
	gNextPacketPtr  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
	gNextPacketPtr |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
	// read the packet length (see datasheet page 43)
	len  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
	len |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
     dc2:	0b 2d       	mov	r16, r11
     dc4:	10 e0       	ldi	r17, 0x00	; 0
     dc6:	1a 29       	or	r17, r10
     dc8:	04 50       	subi	r16, 0x04	; 4
     dca:	11 09       	sbc	r17, r1
     dcc:	c0 16       	cp	r12, r16
     dce:	d1 06       	cpc	r13, r17
     dd0:	08 f4       	brcc	.+2      	; 0xdd4 <enc28j60PacketReceive+0x9a>
     dd2:	86 01       	movw	r16, r12
        if ((rxstat & 0x80)==0){
                // invalid
                len=0;
        }else{
                // copy the packet from the receive buffer
                enc28j60ReadBuffer(len, packet);
     dd4:	b7 01       	movw	r22, r14
     dd6:	c8 01       	movw	r24, r16
     dd8:	0e 94 f5 04 	call	0x9ea	; 0x9ea <enc28j60ReadBuffer>
     ddc:	02 c0       	rjmp	.+4      	; 0xde2 <enc28j60PacketReceive+0xa8>
        // check CRC and symbol errors (see datasheet page 44, table 7-3):
        // The ERXFCON.CRCEN is set by default. Normally we should not
        // need to check this.
        if ((rxstat & 0x80)==0){
                // invalid
                len=0;
     dde:	00 e0       	ldi	r16, 0x00	; 0
     de0:	10 e0       	ldi	r17, 0x00	; 0
        //
        // Move the RX read pointer to the start of the next received packet
        // This frees the memory we just read out. 
        // However, compensate for the errata point 13, rev B4: never write an even address!
        // gNextPacketPtr is always an even address if RXSTOP_INIT is odd.
        if (gNextPacketPtr -1 > RXSTOP_INIT){ // RXSTART_INIT is zero, no test for gNextPacketPtr less than RXSTART_INIT.
     de2:	7e 01       	movw	r14, r28
     de4:	81 e0       	ldi	r24, 0x01	; 1
     de6:	e8 1a       	sub	r14, r24
     de8:	f1 08       	sbc	r15, r1
     dea:	e1 14       	cp	r14, r1
     dec:	8a e1       	ldi	r24, 0x1A	; 26
     dee:	f8 06       	cpc	r15, r24
     df0:	4c f0       	brlt	.+18     	; 0xe04 <enc28j60PacketReceive+0xca>
                enc28j60Write(ERXRDPTL, (RXSTOP_INIT)&0xFF);
     df2:	6f ef       	ldi	r22, 0xFF	; 255
     df4:	8c e0       	ldi	r24, 0x0C	; 12
     df6:	0e 94 55 05 	call	0xaaa	; 0xaaa <enc28j60Write>
                enc28j60Write(ERXRDPTH, (RXSTOP_INIT)>>8);
     dfa:	69 e1       	ldi	r22, 0x19	; 25
     dfc:	8d e0       	ldi	r24, 0x0D	; 13
     dfe:	0e 94 55 05 	call	0xaaa	; 0xaaa <enc28j60Write>
     e02:	09 c0       	rjmp	.+18     	; 0xe16 <enc28j60PacketReceive+0xdc>
        } else {
                enc28j60Write(ERXRDPTL, (gNextPacketPtr-1)&0xFF);
     e04:	6c 2f       	mov	r22, r28
     e06:	61 50       	subi	r22, 0x01	; 1
     e08:	8c e0       	ldi	r24, 0x0C	; 12
     e0a:	0e 94 55 05 	call	0xaaa	; 0xaaa <enc28j60Write>
                enc28j60Write(ERXRDPTH, (gNextPacketPtr-1)>>8);
     e0e:	6f 2d       	mov	r22, r15
     e10:	8d e0       	ldi	r24, 0x0D	; 13
     e12:	0e 94 55 05 	call	0xaaa	; 0xaaa <enc28j60Write>
        }
	// decrement the packet counter indicate we are done with this packet
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON2, ECON2_PKTDEC);
     e16:	40 e4       	ldi	r20, 0x40	; 64
     e18:	6e e1       	ldi	r22, 0x1E	; 30
     e1a:	80 e8       	ldi	r24, 0x80	; 128
     e1c:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <enc28j60WriteOp>
	return(len);
     e20:	80 2f       	mov	r24, r16
     e22:	91 2f       	mov	r25, r17
     e24:	02 c0       	rjmp	.+4      	; 0xe2a <enc28j60PacketReceive+0xf0>
	uint16_t len;
	// check if a packet has been received and buffered
	//if( !(enc28j60Read(EIR) & EIR_PKTIF) )
        // The above does not work. See Rev. B4 Silicon Errata point 6.
	if( enc28j60Read(EPKTCNT) ==0 ){
		return(0);
     e26:	80 e0       	ldi	r24, 0x00	; 0
     e28:	90 e0       	ldi	r25, 0x00	; 0
                enc28j60Write(ERXRDPTH, (gNextPacketPtr-1)>>8);
        }
	// decrement the packet counter indicate we are done with this packet
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON2, ECON2_PKTDEC);
	return(len);
}
     e2a:	df 91       	pop	r29
     e2c:	cf 91       	pop	r28
     e2e:	1f 91       	pop	r17
     e30:	0f 91       	pop	r16
     e32:	ff 90       	pop	r15
     e34:	ef 90       	pop	r14
     e36:	df 90       	pop	r13
     e38:	cf 90       	pop	r12
     e3a:	bf 90       	pop	r11
     e3c:	af 90       	pop	r10
     e3e:	08 95       	ret

00000e40 <www_client_internal_result_callback>:
                return(len);
        }
        return(0);
}

uint8_t www_client_internal_result_callback(uint8_t fd, uint8_t statuscode, uint16_t datapos, uint16_t len_of_data){
     e40:	cf 92       	push	r12
     e42:	df 92       	push	r13
     e44:	ef 92       	push	r14
     e46:	ff 92       	push	r15
     e48:	0f 93       	push	r16
     e4a:	1f 93       	push	r17
     e4c:	cf 93       	push	r28
     e4e:	df 93       	push	r29
     e50:	ea 01       	movw	r28, r20
     e52:	89 01       	movw	r16, r18
        uint16_t web_statuscode=0; // tcp status is OK but we need to check http layer too
        uint8_t i=0; 
        if (fd!=www_fd){
     e54:	90 91 7e 03 	lds	r25, 0x037E
     e58:	89 17       	cp	r24, r25
     e5a:	61 f0       	breq	.+24     	; 0xe74 <www_client_internal_result_callback+0x34>
                (*client_browser_callback)(500,0,0);
     e5c:	e0 91 7b 03 	lds	r30, 0x037B
     e60:	f0 91 7c 03 	lds	r31, 0x037C
     e64:	40 e0       	ldi	r20, 0x00	; 0
     e66:	50 e0       	ldi	r21, 0x00	; 0
     e68:	60 e0       	ldi	r22, 0x00	; 0
     e6a:	70 e0       	ldi	r23, 0x00	; 0
     e6c:	84 ef       	ldi	r24, 0xF4	; 244
     e6e:	91 e0       	ldi	r25, 0x01	; 1
     e70:	09 95       	icall
                return(0);
     e72:	5e c0       	rjmp	.+188    	; 0xf30 <www_client_internal_result_callback+0xf0>
        }
        if (statuscode==0 && len_of_data>12){
     e74:	61 11       	cpse	r22, r1
     e76:	5c c0       	rjmp	.+184    	; 0xf30 <www_client_internal_result_callback+0xf0>
     e78:	2d 30       	cpi	r18, 0x0D	; 13
     e7a:	31 05       	cpc	r19, r1
     e7c:	08 f4       	brcc	.+2      	; 0xe80 <www_client_internal_result_callback+0x40>
     e7e:	58 c0       	rjmp	.+176    	; 0xf30 <www_client_internal_result_callback+0xf0>
                // we might have a http status code
                // http status codes are 3digit numbers as ascii text. See http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html
                // The buffer would look like this: HTTP/1.1 200 OK\r\n
                // web_statuscode=0 means we got a corrupted answer 
                if (client_browser_callback){
     e80:	e0 90 7b 03 	lds	r14, 0x037B
     e84:	f0 90 7c 03 	lds	r15, 0x037C
     e88:	e1 14       	cp	r14, r1
     e8a:	f1 04       	cpc	r15, r1
     e8c:	09 f4       	brne	.+2      	; 0xe90 <www_client_internal_result_callback+0x50>
     e8e:	50 c0       	rjmp	.+160    	; 0xf30 <www_client_internal_result_callback+0xf0>
                        if (isblank(bufptr[datapos+8]) && isdigit(bufptr[datapos+9])&& isdigit(bufptr[datapos+11])){ // e.g 200 OK, a status code has 3 digits from datapos+9 to datapos+11, copy over the web/http status code to web_statuscode:
     e90:	c0 90 6f 03 	lds	r12, 0x036F
     e94:	d0 90 70 03 	lds	r13, 0x0370
     e98:	f6 01       	movw	r30, r12
     e9a:	e4 0f       	add	r30, r20
     e9c:	f5 1f       	adc	r31, r21
     e9e:	80 85       	ldd	r24, Z+8	; 0x08
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <isblank>
     ea6:	89 2b       	or	r24, r25
     ea8:	b9 f1       	breq	.+110    	; 0xf18 <www_client_internal_result_callback+0xd8>
     eaa:	f6 01       	movw	r30, r12
     eac:	ec 0f       	add	r30, r28
     eae:	fd 1f       	adc	r31, r29
     eb0:	21 85       	ldd	r18, Z+9	; 0x09
     eb2:	30 e0       	ldi	r19, 0x00	; 0
     eb4:	20 53       	subi	r18, 0x30	; 48
     eb6:	31 09       	sbc	r19, r1
     eb8:	2a 30       	cpi	r18, 0x0A	; 10
     eba:	31 05       	cpc	r19, r1
     ebc:	80 f5       	brcc	.+96     	; 0xf1e <www_client_internal_result_callback+0xde>
     ebe:	f6 01       	movw	r30, r12
     ec0:	ec 0f       	add	r30, r28
     ec2:	fd 1f       	adc	r31, r29
     ec4:	83 85       	ldd	r24, Z+11	; 0x0b
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	ac 01       	movw	r20, r24
     eca:	40 53       	subi	r20, 0x30	; 48
     ecc:	51 09       	sbc	r21, r1
     ece:	4a 30       	cpi	r20, 0x0A	; 10
     ed0:	51 05       	cpc	r21, r1
     ed2:	40 f5       	brcc	.+80     	; 0xf24 <www_client_internal_result_callback+0xe4>
                                while(i<2){
                                        web_statuscode+=bufptr[datapos+9+i]-'0';
                                        web_statuscode*=10;
     ed4:	c9 01       	movw	r24, r18
     ed6:	88 0f       	add	r24, r24
     ed8:	99 1f       	adc	r25, r25
     eda:	22 0f       	add	r18, r18
     edc:	33 1f       	adc	r19, r19
     ede:	22 0f       	add	r18, r18
     ee0:	33 1f       	adc	r19, r19
     ee2:	22 0f       	add	r18, r18
     ee4:	33 1f       	adc	r19, r19
     ee6:	28 0f       	add	r18, r24
     ee8:	39 1f       	adc	r19, r25
                // The buffer would look like this: HTTP/1.1 200 OK\r\n
                // web_statuscode=0 means we got a corrupted answer 
                if (client_browser_callback){
                        if (isblank(bufptr[datapos+8]) && isdigit(bufptr[datapos+9])&& isdigit(bufptr[datapos+11])){ // e.g 200 OK, a status code has 3 digits from datapos+9 to datapos+11, copy over the web/http status code to web_statuscode:
                                while(i<2){
                                        web_statuscode+=bufptr[datapos+9+i]-'0';
     eea:	f6 01       	movw	r30, r12
     eec:	ec 0f       	add	r30, r28
     eee:	fd 1f       	adc	r31, r29
     ef0:	82 85       	ldd	r24, Z+10	; 0x0a
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	c0 97       	sbiw	r24, 0x30	; 48
     ef6:	28 0f       	add	r18, r24
     ef8:	39 1f       	adc	r19, r25
                                        web_statuscode*=10;
     efa:	c9 01       	movw	r24, r18
     efc:	88 0f       	add	r24, r24
     efe:	99 1f       	adc	r25, r25
     f00:	22 0f       	add	r18, r18
     f02:	33 1f       	adc	r19, r19
     f04:	22 0f       	add	r18, r18
     f06:	33 1f       	adc	r19, r19
     f08:	22 0f       	add	r18, r18
     f0a:	33 1f       	adc	r19, r19
     f0c:	28 0f       	add	r18, r24
     f0e:	39 1f       	adc	r19, r25
                                        i++;
                                }
                                web_statuscode+=bufptr[datapos+11]-'0';
     f10:	ca 01       	movw	r24, r20
     f12:	82 0f       	add	r24, r18
     f14:	93 1f       	adc	r25, r19
     f16:	08 c0       	rjmp	.+16     	; 0xf28 <www_client_internal_result_callback+0xe8>
        }
        return(0);
}

uint8_t www_client_internal_result_callback(uint8_t fd, uint8_t statuscode, uint16_t datapos, uint16_t len_of_data){
        uint16_t web_statuscode=0; // tcp status is OK but we need to check http layer too
     f18:	80 e0       	ldi	r24, 0x00	; 0
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	05 c0       	rjmp	.+10     	; 0xf28 <www_client_internal_result_callback+0xe8>
     f1e:	80 e0       	ldi	r24, 0x00	; 0
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	02 c0       	rjmp	.+4      	; 0xf28 <www_client_internal_result_callback+0xe8>
     f24:	80 e0       	ldi	r24, 0x00	; 0
     f26:	90 e0       	ldi	r25, 0x00	; 0
                                        i++;
                                }
                                web_statuscode+=bufptr[datapos+11]-'0';
                        }
                        //(*client_browser_callback)(web_statuscode,((uint16_t)TCP_SRC_PORT_H_P+(bufptr[TCP_HEADER_LEN_P]>>4)*4),len_of_data);
                        (*client_browser_callback)(web_statuscode,datapos,len_of_data);
     f28:	a8 01       	movw	r20, r16
     f2a:	be 01       	movw	r22, r28
     f2c:	f7 01       	movw	r30, r14
     f2e:	09 95       	icall
                }
        }
        return(0);
}
     f30:	80 e0       	ldi	r24, 0x00	; 0
     f32:	df 91       	pop	r29
     f34:	cf 91       	pop	r28
     f36:	1f 91       	pop	r17
     f38:	0f 91       	pop	r16
     f3a:	ff 90       	pop	r15
     f3c:	ef 90       	pop	r14
     f3e:	df 90       	pop	r13
     f40:	cf 90       	pop	r12
     f42:	08 95       	ret

00000f44 <checksum>:
//
// For more information on how this algorithm works see:
// http://www.netfor2.com/checksum.html
// http://www.msc.uky.edu/ken/cs471/notes/chap3.htm
// The RFC has also a C code example: http://www.faqs.org/rfcs/rfc1071.html
uint16_t checksum(uint8_t *buf, uint16_t len,uint8_t type){
     f44:	cf 92       	push	r12
     f46:	df 92       	push	r13
     f48:	ef 92       	push	r14
     f4a:	ff 92       	push	r15
     f4c:	0f 93       	push	r16
     f4e:	1f 93       	push	r17
     f50:	cf 93       	push	r28
     f52:	df 93       	push	r29
     f54:	8c 01       	movw	r16, r24
     f56:	db 01       	movw	r26, r22

        //if(type==0){    
        //        // do not add anything, standard IP checksum as described above
        //        // Usable for ICMP and IP header
        //}
        if(type==1){
     f58:	41 30       	cpi	r20, 0x01	; 1
     f5a:	61 f4       	brne	.+24     	; 0xf74 <checksum+0x30>
                sum+=IP_PROTO_UDP_V; // protocol udp
                // the length here is the length of udp (data+header len)
                // =length given to this function - (IP.scr+IP.dst length)
                sum+=len-8; // = real udp len
     f5c:	6b 01       	movw	r12, r22
     f5e:	88 e0       	ldi	r24, 0x08	; 8
     f60:	c8 1a       	sub	r12, r24
     f62:	d1 08       	sbc	r13, r1
     f64:	e1 2c       	mov	r14, r1
     f66:	f1 2c       	mov	r15, r1
     f68:	e1 e1       	ldi	r30, 0x11	; 17
     f6a:	ce 0e       	add	r12, r30
     f6c:	d1 1c       	adc	r13, r1
     f6e:	e1 1c       	adc	r14, r1
     f70:	f1 1c       	adc	r15, r1
     f72:	11 c0       	rjmp	.+34     	; 0xf96 <checksum+0x52>
        }
        if(type==2){
     f74:	42 30       	cpi	r20, 0x02	; 2
     f76:	61 f4       	brne	.+24     	; 0xf90 <checksum+0x4c>
                sum+=IP_PROTO_TCP_V; 
                // the length here is the length of tcp (data+header len)
                // =length given to this function - (IP.scr+IP.dst length)
                sum+=len-8; // = real tcp len
     f78:	6b 01       	movw	r12, r22
     f7a:	f8 e0       	ldi	r31, 0x08	; 8
     f7c:	cf 1a       	sub	r12, r31
     f7e:	d1 08       	sbc	r13, r1
     f80:	e1 2c       	mov	r14, r1
     f82:	f1 2c       	mov	r15, r1
     f84:	86 e0       	ldi	r24, 0x06	; 6
     f86:	c8 0e       	add	r12, r24
     f88:	d1 1c       	adc	r13, r1
     f8a:	e1 1c       	adc	r14, r1
     f8c:	f1 1c       	adc	r15, r1
     f8e:	03 c0       	rjmp	.+6      	; 0xf96 <checksum+0x52>
// The RFC has also a C code example: http://www.faqs.org/rfcs/rfc1071.html
uint16_t checksum(uint8_t *buf, uint16_t len,uint8_t type){
        // type 0=ip , icmp
        //      1=udp
        //      2=tcp
        uint32_t sum = 0;
     f90:	c1 2c       	mov	r12, r1
     f92:	d1 2c       	mov	r13, r1
     f94:	76 01       	movw	r14, r12
                // the length here is the length of tcp (data+header len)
                // =length given to this function - (IP.scr+IP.dst length)
                sum+=len-8; // = real tcp len
        }
        // build the sum of 16bit words
        while(len >1){
     f96:	a2 30       	cpi	r26, 0x02	; 2
     f98:	b1 05       	cpc	r27, r1
     f9a:	08 f1       	brcs	.+66     	; 0xfde <checksum+0x9a>
     f9c:	f8 01       	movw	r30, r16
     f9e:	31 96       	adiw	r30, 0x01	; 1
     fa0:	9d 01       	movw	r18, r26
     fa2:	ef 01       	movw	r28, r30
     fa4:	21 97       	sbiw	r28, 0x01	; 1
                sum += 0xFFFF & (((uint32_t)*buf<<8)|*(buf+1));
     fa6:	48 81       	ld	r20, Y
     fa8:	50 e0       	ldi	r21, 0x00	; 0
     faa:	60 e0       	ldi	r22, 0x00	; 0
     fac:	70 e0       	ldi	r23, 0x00	; 0
     fae:	76 2f       	mov	r23, r22
     fb0:	65 2f       	mov	r22, r21
     fb2:	54 2f       	mov	r21, r20
     fb4:	44 27       	eor	r20, r20
     fb6:	80 81       	ld	r24, Z
     fb8:	48 2b       	or	r20, r24
     fba:	c4 0e       	add	r12, r20
     fbc:	d5 1e       	adc	r13, r21
     fbe:	e6 1e       	adc	r14, r22
     fc0:	f7 1e       	adc	r15, r23
                buf+=2;
                len-=2;
     fc2:	22 50       	subi	r18, 0x02	; 2
     fc4:	31 09       	sbc	r19, r1
     fc6:	32 96       	adiw	r30, 0x02	; 2
                // the length here is the length of tcp (data+header len)
                // =length given to this function - (IP.scr+IP.dst length)
                sum+=len-8; // = real tcp len
        }
        // build the sum of 16bit words
        while(len >1){
     fc8:	22 30       	cpi	r18, 0x02	; 2
     fca:	31 05       	cpc	r19, r1
     fcc:	50 f7       	brcc	.-44     	; 0xfa2 <checksum+0x5e>
     fce:	cd 01       	movw	r24, r26
     fd0:	02 97       	sbiw	r24, 0x02	; 2
     fd2:	8e 7f       	andi	r24, 0xFE	; 254
     fd4:	02 96       	adiw	r24, 0x02	; 2
     fd6:	08 0f       	add	r16, r24
     fd8:	19 1f       	adc	r17, r25
     fda:	a1 70       	andi	r26, 0x01	; 1
     fdc:	bb 27       	eor	r27, r27
                sum += 0xFFFF & (((uint32_t)*buf<<8)|*(buf+1));
                buf+=2;
                len-=2;
        }
        // if there is a byte left then add it (padded with zero)
        if (len){
     fde:	ab 2b       	or	r26, r27
     fe0:	69 f0       	breq	.+26     	; 0xffc <checksum+0xb8>
                sum += ((uint32_t)(0xFF & *buf))<<8;
     fe2:	f8 01       	movw	r30, r16
     fe4:	80 81       	ld	r24, Z
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	a0 e0       	ldi	r26, 0x00	; 0
     fea:	b0 e0       	ldi	r27, 0x00	; 0
     fec:	ba 2f       	mov	r27, r26
     fee:	a9 2f       	mov	r26, r25
     ff0:	98 2f       	mov	r25, r24
     ff2:	88 27       	eor	r24, r24
     ff4:	c8 0e       	add	r12, r24
     ff6:	d9 1e       	adc	r13, r25
     ff8:	ea 1e       	adc	r14, r26
     ffa:	fb 1e       	adc	r15, r27
        }
        // now calculate the sum over the bytes in the sum
        // until the result is only 16bit long
        while (sum>>16){
     ffc:	a7 01       	movw	r20, r14
     ffe:	66 27       	eor	r22, r22
    1000:	77 27       	eor	r23, r23
    1002:	41 15       	cp	r20, r1
    1004:	51 05       	cpc	r21, r1
    1006:	61 05       	cpc	r22, r1
    1008:	71 05       	cpc	r23, r1
    100a:	71 f0       	breq	.+28     	; 0x1028 <checksum+0xe4>
                sum = (sum & 0xFFFF)+(sum >> 16);
    100c:	ee 24       	eor	r14, r14
    100e:	ff 24       	eor	r15, r15
    1010:	c4 0e       	add	r12, r20
    1012:	d5 1e       	adc	r13, r21
    1014:	e6 1e       	adc	r14, r22
    1016:	f7 1e       	adc	r15, r23
        if (len){
                sum += ((uint32_t)(0xFF & *buf))<<8;
        }
        // now calculate the sum over the bytes in the sum
        // until the result is only 16bit long
        while (sum>>16){
    1018:	a7 01       	movw	r20, r14
    101a:	66 27       	eor	r22, r22
    101c:	77 27       	eor	r23, r23
    101e:	41 15       	cp	r20, r1
    1020:	51 05       	cpc	r21, r1
    1022:	61 05       	cpc	r22, r1
    1024:	71 05       	cpc	r23, r1
    1026:	91 f7       	brne	.-28     	; 0x100c <checksum+0xc8>
                sum = (sum & 0xFFFF)+(sum >> 16);
        }
        // build 1's complement:
        return( (uint16_t) sum ^ 0xFFFF);
    1028:	c6 01       	movw	r24, r12
    102a:	80 95       	com	r24
    102c:	90 95       	com	r25
}
    102e:	df 91       	pop	r29
    1030:	cf 91       	pop	r28
    1032:	1f 91       	pop	r17
    1034:	0f 91       	pop	r16
    1036:	ff 90       	pop	r15
    1038:	ef 90       	pop	r14
    103a:	df 90       	pop	r13
    103c:	cf 90       	pop	r12
    103e:	08 95       	ret

00001040 <init_mac>:

void init_mac(uint8_t *mymac){
        if (mymac){
    1040:	00 97       	sbiw	r24, 0x00	; 0
    1042:	41 f0       	breq	.+16     	; 0x1054 <init_mac+0x14>
                memcpy(macaddr,mymac,6);
    1044:	26 e0       	ldi	r18, 0x06	; 6
    1046:	fc 01       	movw	r30, r24
    1048:	a7 e9       	ldi	r26, 0x97	; 151
    104a:	b3 e0       	ldi	r27, 0x03	; 3
    104c:	01 90       	ld	r0, Z+
    104e:	0d 92       	st	X+, r0
    1050:	2a 95       	dec	r18
    1052:	e1 f7       	brne	.-8      	; 0x104c <init_mac+0xc>
    1054:	08 95       	ret

00001056 <check_ip_message_is_from>:

uint8_t check_ip_message_is_from(uint8_t *buf,uint8_t *ip)
{
        uint8_t i=0;
        while(i<4){
                if(buf[IP_SRC_P+i]!=ip[i]){
    1056:	fc 01       	movw	r30, r24
    1058:	32 8d       	ldd	r19, Z+26	; 0x1a
    105a:	fb 01       	movw	r30, r22
    105c:	20 81       	ld	r18, Z
    105e:	32 13       	cpse	r19, r18
    1060:	0d c0       	rjmp	.+26     	; 0x107c <check_ip_message_is_from+0x26>
    1062:	dc 01       	movw	r26, r24
    1064:	5b 96       	adiw	r26, 0x1b	; 27
    1066:	31 96       	adiw	r30, 0x01	; 1
    1068:	4e 96       	adiw	r24, 0x1e	; 30
    106a:	3d 91       	ld	r19, X+
    106c:	21 91       	ld	r18, Z+
    106e:	32 13       	cpse	r19, r18
    1070:	07 c0       	rjmp	.+14     	; 0x1080 <check_ip_message_is_from+0x2a>


uint8_t check_ip_message_is_from(uint8_t *buf,uint8_t *ip)
{
        uint8_t i=0;
        while(i<4){
    1072:	a8 17       	cp	r26, r24
    1074:	b9 07       	cpc	r27, r25
    1076:	c9 f7       	brne	.-14     	; 0x106a <check_ip_message_is_from+0x14>
                if(buf[IP_SRC_P+i]!=ip[i]){
                        return(0);
                }
                i++;
        }
        return(1);
    1078:	81 e0       	ldi	r24, 0x01	; 1
    107a:	08 95       	ret
uint8_t check_ip_message_is_from(uint8_t *buf,uint8_t *ip)
{
        uint8_t i=0;
        while(i<4){
                if(buf[IP_SRC_P+i]!=ip[i]){
                        return(0);
    107c:	80 e0       	ldi	r24, 0x00	; 0
    107e:	08 95       	ret
    1080:	80 e0       	ldi	r24, 0x00	; 0
                }
                i++;
        }
        return(1);
}
    1082:	08 95       	ret

00001084 <eth_type_is_arp_and_my_ip>:

uint8_t eth_type_is_arp_and_my_ip(uint8_t *buf,uint16_t len){
        uint8_t i=0;
        //  
        if (len<41){
    1084:	69 32       	cpi	r22, 0x29	; 41
    1086:	71 05       	cpc	r23, r1
    1088:	c8 f0       	brcs	.+50     	; 0x10bc <eth_type_is_arp_and_my_ip+0x38>
                return(0);
        }
        if(buf[ETH_TYPE_H_P] != ETHTYPE_ARP_H_V || 
    108a:	fc 01       	movw	r30, r24
    108c:	24 85       	ldd	r18, Z+12	; 0x0c
    108e:	28 30       	cpi	r18, 0x08	; 8
    1090:	b9 f4       	brne	.+46     	; 0x10c0 <eth_type_is_arp_and_my_ip+0x3c>
    1092:	25 85       	ldd	r18, Z+13	; 0x0d
    1094:	26 30       	cpi	r18, 0x06	; 6
    1096:	b1 f4       	brne	.+44     	; 0x10c4 <eth_type_is_arp_and_my_ip+0x40>
           buf[ETH_TYPE_L_P] != ETHTYPE_ARP_L_V){
                return(0);
        }
        while(i<4){
                if(buf[ETH_ARP_DST_IP_P+i] != ipaddr[i]){
    1098:	36 a1       	ldd	r19, Z+38	; 0x26
    109a:	20 91 93 03 	lds	r18, 0x0393
    109e:	32 13       	cpse	r19, r18
    10a0:	13 c0       	rjmp	.+38     	; 0x10c8 <eth_type_is_arp_and_my_ip+0x44>
    10a2:	b7 96       	adiw	r30, 0x27	; 39
    10a4:	a4 e9       	ldi	r26, 0x94	; 148
    10a6:	b3 e0       	ldi	r27, 0x03	; 3
    10a8:	8a 96       	adiw	r24, 0x2a	; 42
    10aa:	31 91       	ld	r19, Z+
    10ac:	2d 91       	ld	r18, X+
    10ae:	32 13       	cpse	r19, r18
    10b0:	0d c0       	rjmp	.+26     	; 0x10cc <eth_type_is_arp_and_my_ip+0x48>
        }
        if(buf[ETH_TYPE_H_P] != ETHTYPE_ARP_H_V || 
           buf[ETH_TYPE_L_P] != ETHTYPE_ARP_L_V){
                return(0);
        }
        while(i<4){
    10b2:	e8 17       	cp	r30, r24
    10b4:	f9 07       	cpc	r31, r25
    10b6:	c9 f7       	brne	.-14     	; 0x10aa <eth_type_is_arp_and_my_ip+0x26>
                if(buf[ETH_ARP_DST_IP_P+i] != ipaddr[i]){
                        return(0);
                }
                i++;
        }
        return(1);
    10b8:	81 e0       	ldi	r24, 0x01	; 1
    10ba:	08 95       	ret

uint8_t eth_type_is_arp_and_my_ip(uint8_t *buf,uint16_t len){
        uint8_t i=0;
        //  
        if (len<41){
                return(0);
    10bc:	80 e0       	ldi	r24, 0x00	; 0
    10be:	08 95       	ret
        }
        if(buf[ETH_TYPE_H_P] != ETHTYPE_ARP_H_V || 
           buf[ETH_TYPE_L_P] != ETHTYPE_ARP_L_V){
                return(0);
    10c0:	80 e0       	ldi	r24, 0x00	; 0
    10c2:	08 95       	ret
    10c4:	80 e0       	ldi	r24, 0x00	; 0
    10c6:	08 95       	ret
        }
        while(i<4){
                if(buf[ETH_ARP_DST_IP_P+i] != ipaddr[i]){
                        return(0);
    10c8:	80 e0       	ldi	r24, 0x00	; 0
    10ca:	08 95       	ret
    10cc:	80 e0       	ldi	r24, 0x00	; 0
                }
                i++;
        }
        return(1);
}
    10ce:	08 95       	ret

000010d0 <eth_type_is_ip_and_my_ip>:

uint8_t eth_type_is_ip_and_my_ip(uint8_t *buf,uint16_t len){
    10d0:	cf 93       	push	r28
    10d2:	df 93       	push	r29
    10d4:	fc 01       	movw	r30, r24
        uint8_t i=0;
        //eth+ip+udp header is 42
        if (len<42){
    10d6:	6a 32       	cpi	r22, 0x2A	; 42
    10d8:	71 05       	cpc	r23, r1
    10da:	e0 f0       	brcs	.+56     	; 0x1114 <eth_type_is_ip_and_my_ip+0x44>
                return(0);
        }
        if(buf[ETH_TYPE_H_P]!=ETHTYPE_IP_H_V || 
    10dc:	84 85       	ldd	r24, Z+12	; 0x0c
    10de:	88 30       	cpi	r24, 0x08	; 8
    10e0:	d9 f4       	brne	.+54     	; 0x1118 <eth_type_is_ip_and_my_ip+0x48>
           buf[ETH_TYPE_L_P]!=ETHTYPE_IP_L_V){
    10e2:	85 85       	ldd	r24, Z+13	; 0x0d
        uint8_t i=0;
        //eth+ip+udp header is 42
        if (len<42){
                return(0);
        }
        if(buf[ETH_TYPE_H_P]!=ETHTYPE_IP_H_V || 
    10e4:	81 11       	cpse	r24, r1
    10e6:	1a c0       	rjmp	.+52     	; 0x111c <eth_type_is_ip_and_my_ip+0x4c>
           buf[ETH_TYPE_L_P]!=ETHTYPE_IP_L_V){
                return(0);
        }
        if (buf[IP_HEADER_LEN_VER_P]!=0x45){
    10e8:	96 85       	ldd	r25, Z+14	; 0x0e
    10ea:	95 34       	cpi	r25, 0x45	; 69
    10ec:	c1 f4       	brne	.+48     	; 0x111e <eth_type_is_ip_and_my_ip+0x4e>
                // must be IP V4 and 20 byte header
                return(0);
        }
        while(i<4){
                if(buf[IP_DST_P+i]!=ipaddr[i]){
    10ee:	26 8d       	ldd	r18, Z+30	; 0x1e
    10f0:	90 91 93 03 	lds	r25, 0x0393
    10f4:	29 13       	cpse	r18, r25
    10f6:	13 c0       	rjmp	.+38     	; 0x111e <eth_type_is_ip_and_my_ip+0x4e>
    10f8:	df 01       	movw	r26, r30
    10fa:	5f 96       	adiw	r26, 0x1f	; 31
    10fc:	c4 e9       	ldi	r28, 0x94	; 148
    10fe:	d3 e0       	ldi	r29, 0x03	; 3
    1100:	b2 96       	adiw	r30, 0x22	; 34
    1102:	2d 91       	ld	r18, X+
    1104:	99 91       	ld	r25, Y+
    1106:	29 13       	cpse	r18, r25
    1108:	0a c0       	rjmp	.+20     	; 0x111e <eth_type_is_ip_and_my_ip+0x4e>
        }
        if (buf[IP_HEADER_LEN_VER_P]!=0x45){
                // must be IP V4 and 20 byte header
                return(0);
        }
        while(i<4){
    110a:	ae 17       	cp	r26, r30
    110c:	bf 07       	cpc	r27, r31
    110e:	c9 f7       	brne	.-14     	; 0x1102 <eth_type_is_ip_and_my_ip+0x32>
                if(buf[IP_DST_P+i]!=ipaddr[i]){
                        return(0);
                }
                i++;
        }
        return(1);
    1110:	81 e0       	ldi	r24, 0x01	; 1
    1112:	05 c0       	rjmp	.+10     	; 0x111e <eth_type_is_ip_and_my_ip+0x4e>

uint8_t eth_type_is_ip_and_my_ip(uint8_t *buf,uint16_t len){
        uint8_t i=0;
        //eth+ip+udp header is 42
        if (len<42){
                return(0);
    1114:	80 e0       	ldi	r24, 0x00	; 0
    1116:	03 c0       	rjmp	.+6      	; 0x111e <eth_type_is_ip_and_my_ip+0x4e>
        }
        if(buf[ETH_TYPE_H_P]!=ETHTYPE_IP_H_V || 
           buf[ETH_TYPE_L_P]!=ETHTYPE_IP_L_V){
                return(0);
    1118:	80 e0       	ldi	r24, 0x00	; 0
    111a:	01 c0       	rjmp	.+2      	; 0x111e <eth_type_is_ip_and_my_ip+0x4e>
    111c:	80 e0       	ldi	r24, 0x00	; 0
                        return(0);
                }
                i++;
        }
        return(1);
}
    111e:	df 91       	pop	r29
    1120:	cf 91       	pop	r28
    1122:	08 95       	ret

00001124 <make_eth>:

// make a return eth header from a received eth packet
void make_eth(uint8_t *buf)
{
    1124:	cf 93       	push	r28
    1126:	df 93       	push	r29
    1128:	fc 01       	movw	r30, r24
    112a:	c7 e9       	ldi	r28, 0x97	; 151
    112c:	d3 e0       	ldi	r29, 0x03	; 3
    112e:	9c 01       	movw	r18, r24
    1130:	2a 5f       	subi	r18, 0xFA	; 250
    1132:	3f 4f       	sbci	r19, 0xFF	; 255
    1134:	d9 01       	movw	r26, r18
        uint8_t i=0;
        //
        //copy the destination mac from the source and fill my mac into src
        while(i<6){
                buf[ETH_DST_MAC +i]=buf[ETH_SRC_MAC +i];
    1136:	8c 91       	ld	r24, X
    1138:	81 93       	st	Z+, r24
                buf[ETH_SRC_MAC +i]=macaddr[i];
    113a:	89 91       	ld	r24, Y+
    113c:	8d 93       	st	X+, r24
void make_eth(uint8_t *buf)
{
        uint8_t i=0;
        //
        //copy the destination mac from the source and fill my mac into src
        while(i<6){
    113e:	e2 17       	cp	r30, r18
    1140:	f3 07       	cpc	r31, r19
    1142:	c9 f7       	brne	.-14     	; 0x1136 <make_eth+0x12>
                buf[ETH_DST_MAC +i]=buf[ETH_SRC_MAC +i];
                buf[ETH_SRC_MAC +i]=macaddr[i];
                i++;
        }
}
    1144:	df 91       	pop	r29
    1146:	cf 91       	pop	r28
    1148:	08 95       	ret

0000114a <fill_ip_hdr_checksum>:
void fill_ip_hdr_checksum(uint8_t *buf)
{
    114a:	cf 93       	push	r28
    114c:	df 93       	push	r29
    114e:	ec 01       	movw	r28, r24
        uint16_t ck;
        // clear the 2 byte checksum
        buf[IP_CHECKSUM_P]=0;
    1150:	18 8e       	std	Y+24, r1	; 0x18
        buf[IP_CHECKSUM_P+1]=0;
    1152:	19 8e       	std	Y+25, r1	; 0x19
        buf[IP_FLAGS_P]=0x40; // don't fragment
    1154:	80 e4       	ldi	r24, 0x40	; 64
    1156:	8c 8b       	std	Y+20, r24	; 0x14
        buf[IP_FLAGS_P+1]=0;  // fragement offset
    1158:	1d 8a       	std	Y+21, r1	; 0x15
        buf[IP_TTL_P]=64; // ttl
    115a:	8e 8b       	std	Y+22, r24	; 0x16
        // calculate the checksum:
        ck=checksum(&buf[IP_P], IP_HEADER_LEN,0);
    115c:	40 e0       	ldi	r20, 0x00	; 0
    115e:	64 e1       	ldi	r22, 0x14	; 20
    1160:	70 e0       	ldi	r23, 0x00	; 0
    1162:	ce 01       	movw	r24, r28
    1164:	0e 96       	adiw	r24, 0x0e	; 14
    1166:	0e 94 a2 07 	call	0xf44	; 0xf44 <checksum>
        buf[IP_CHECKSUM_P]=ck>>8;
    116a:	98 8f       	std	Y+24, r25	; 0x18
        buf[IP_CHECKSUM_P+1]=ck& 0xff;
    116c:	89 8f       	std	Y+25, r24	; 0x19
}
    116e:	df 91       	pop	r29
    1170:	cf 91       	pop	r28
    1172:	08 95       	ret

00001174 <make_ip>:

// make a return ip header from a received ip packet
void make_ip(uint8_t *buf)
{
    1174:	cf 93       	push	r28
    1176:	df 93       	push	r29
    1178:	9c 01       	movw	r18, r24
    117a:	dc 01       	movw	r26, r24
    117c:	5e 96       	adiw	r26, 0x1e	; 30
    117e:	c3 e9       	ldi	r28, 0x93	; 147
    1180:	d3 e0       	ldi	r29, 0x03	; 3
    1182:	fc 01       	movw	r30, r24
    1184:	7a 96       	adiw	r30, 0x1a	; 26
    1186:	ac 01       	movw	r20, r24
    1188:	4e 5d       	subi	r20, 0xDE	; 222
    118a:	5f 4f       	sbci	r21, 0xFF	; 255
        uint8_t i=0;
        while(i<4){
                buf[IP_DST_P+i]=buf[IP_SRC_P+i];
    118c:	90 81       	ld	r25, Z
    118e:	9d 93       	st	X+, r25
                buf[IP_SRC_P+i]=ipaddr[i];
    1190:	99 91       	ld	r25, Y+
    1192:	91 93       	st	Z+, r25

// make a return ip header from a received ip packet
void make_ip(uint8_t *buf)
{
        uint8_t i=0;
        while(i<4){
    1194:	a4 17       	cp	r26, r20
    1196:	b5 07       	cpc	r27, r21
    1198:	c9 f7       	brne	.-14     	; 0x118c <make_ip+0x18>
                buf[IP_DST_P+i]=buf[IP_SRC_P+i];
                buf[IP_SRC_P+i]=ipaddr[i];
                i++;
        }
        fill_ip_hdr_checksum(buf);
    119a:	c9 01       	movw	r24, r18
    119c:	0e 94 a5 08 	call	0x114a	; 0x114a <fill_ip_hdr_checksum>
}
    11a0:	df 91       	pop	r29
    11a2:	cf 91       	pop	r28
    11a4:	08 95       	ret

000011a6 <step_seq>:

// swap seq and ack number and count ack number up
void step_seq(uint8_t *buf,uint16_t rel_ack_num,uint8_t cp_seq)
{
    11a6:	9c 01       	movw	r18, r24
    11a8:	26 5d       	subi	r18, 0xD6	; 214
    11aa:	3f 4f       	sbci	r19, 0xFF	; 255
    11ac:	fc 01       	movw	r30, r24
    11ae:	be 96       	adiw	r30, 0x2e	; 46
    11b0:	d9 01       	movw	r26, r18
        uint8_t tseq;
        i=4;
        // sequence numbers:
        // add the rel ack num to SEQACK
        while(i>0){
                rel_ack_num=buf[TCP_SEQ_H_P+i-1]+rel_ack_num;
    11b2:	8e 91       	ld	r24, -X
    11b4:	68 0f       	add	r22, r24
    11b6:	71 1d       	adc	r23, r1
                tseq=buf[TCP_SEQACK_H_P+i-1];
    11b8:	82 91       	ld	r24, -Z
                buf[TCP_SEQACK_H_P+i-1]=0xff&rel_ack_num;
    11ba:	60 83       	st	Z, r22
                if (cp_seq){
    11bc:	44 23       	and	r20, r20
    11be:	11 f0       	breq	.+4      	; 0x11c4 <step_seq+0x1e>
                        // copy the acknum sent to us into the sequence number
                        buf[TCP_SEQ_H_P+i-1]=tseq;
    11c0:	8c 93       	st	X, r24
    11c2:	01 c0       	rjmp	.+2      	; 0x11c6 <step_seq+0x20>
                }else{
                        buf[TCP_SEQ_H_P+i-1]= 0; // some preset value
    11c4:	1c 92       	st	X, r1
                }
                rel_ack_num=rel_ack_num>>8;
    11c6:	67 2f       	mov	r22, r23
    11c8:	77 27       	eor	r23, r23
        uint8_t i;
        uint8_t tseq;
        i=4;
        // sequence numbers:
        // add the rel ack num to SEQACK
        while(i>0){
    11ca:	2e 17       	cp	r18, r30
    11cc:	3f 07       	cpc	r19, r31
    11ce:	89 f7       	brne	.-30     	; 0x11b2 <step_seq+0xc>
                        buf[TCP_SEQ_H_P+i-1]= 0; // some preset value
                }
                rel_ack_num=rel_ack_num>>8;
                i--;
        }
}
    11d0:	08 95       	ret

000011d2 <make_tcphead>:
//
// After calling this function you can fill in the first data byte at TCP_OPTIONS_P+4
// If cp_seq=0 then an initial sequence number is used (should be use in synack)
// otherwise it is copied from the packet we received
void make_tcphead(uint8_t *buf,uint16_t rel_ack_num,uint8_t cp_seq)
{
    11d2:	cf 93       	push	r28
    11d4:	df 93       	push	r29
    11d6:	ec 01       	movw	r28, r24
        uint8_t i;
        // copy ports:
        i=buf[TCP_DST_PORT_H_P];
    11d8:	8c a1       	ldd	r24, Y+36	; 0x24
        buf[TCP_DST_PORT_H_P]=buf[TCP_SRC_PORT_H_P];
    11da:	9a a1       	ldd	r25, Y+34	; 0x22
    11dc:	9c a3       	std	Y+36, r25	; 0x24
        buf[TCP_SRC_PORT_H_P]=i;
    11de:	8a a3       	std	Y+34, r24	; 0x22
        //
        i=buf[TCP_DST_PORT_L_P];
    11e0:	8d a1       	ldd	r24, Y+37	; 0x25
        buf[TCP_DST_PORT_L_P]=buf[TCP_SRC_PORT_L_P];
    11e2:	9b a1       	ldd	r25, Y+35	; 0x23
    11e4:	9d a3       	std	Y+37, r25	; 0x25
        buf[TCP_SRC_PORT_L_P]=i;
    11e6:	8b a3       	std	Y+35, r24	; 0x23
        step_seq(buf,rel_ack_num,cp_seq);
    11e8:	ce 01       	movw	r24, r28
    11ea:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <step_seq>
        // zero the checksum
        buf[TCP_CHECKSUM_H_P]=0;
    11ee:	1a aa       	std	Y+50, r1	; 0x32
        buf[TCP_CHECKSUM_L_P]=0;
    11f0:	1b aa       	std	Y+51, r1	; 0x33
        // no options:
        // 20 bytes:
        // The tcp header length is only a 4 bit field (the upper 4 bits).
        // It is calculated in units of 4 bytes.
        // E.g 20 bytes: 20/4=6 => 0x50=header len field
        buf[TCP_HEADER_LEN_P]=0x50;
    11f2:	80 e5       	ldi	r24, 0x50	; 80
    11f4:	8e a7       	std	Y+46, r24	; 0x2e
}
    11f6:	df 91       	pop	r29
    11f8:	cf 91       	pop	r28
    11fa:	08 95       	ret

000011fc <make_arp_answer_from_request>:

void make_arp_answer_from_request(uint8_t *buf)
{
    11fc:	0f 93       	push	r16
    11fe:	1f 93       	push	r17
    1200:	cf 93       	push	r28
    1202:	df 93       	push	r29
    1204:	8c 01       	movw	r16, r24
        uint8_t i=0;
        //
        make_eth(buf);
    1206:	0e 94 92 08 	call	0x1124	; 0x1124 <make_eth>
        buf[ETH_ARP_OPCODE_H_P]=ETH_ARP_OPCODE_REPLY_H_V;
    120a:	e8 01       	movw	r28, r16
    120c:	1c 8a       	std	Y+20, r1	; 0x14
        buf[ETH_ARP_OPCODE_L_P]=ETH_ARP_OPCODE_REPLY_L_V;
    120e:	82 e0       	ldi	r24, 0x02	; 2
    1210:	8d 8b       	std	Y+21, r24	; 0x15
    1212:	d8 01       	movw	r26, r16
    1214:	90 96       	adiw	r26, 0x20	; 32
    1216:	27 e9       	ldi	r18, 0x97	; 151
    1218:	33 e0       	ldi	r19, 0x03	; 3
    121a:	f8 01       	movw	r30, r16
    121c:	76 96       	adiw	r30, 0x16	; 22
    121e:	a8 01       	movw	r20, r16
    1220:	4a 5d       	subi	r20, 0xDA	; 218
    1222:	5f 4f       	sbci	r21, 0xFF	; 255
        // fill the mac addresses:
        while(i<6){
                buf[ETH_ARP_DST_MAC_P+i]=buf[ETH_ARP_SRC_MAC_P+i];
    1224:	80 81       	ld	r24, Z
    1226:	8d 93       	st	X+, r24
                buf[ETH_ARP_SRC_MAC_P+i]=macaddr[i];
    1228:	e9 01       	movw	r28, r18
    122a:	89 91       	ld	r24, Y+
    122c:	9e 01       	movw	r18, r28
    122e:	81 93       	st	Z+, r24
        //
        make_eth(buf);
        buf[ETH_ARP_OPCODE_H_P]=ETH_ARP_OPCODE_REPLY_H_V;
        buf[ETH_ARP_OPCODE_L_P]=ETH_ARP_OPCODE_REPLY_L_V;
        // fill the mac addresses:
        while(i<6){
    1230:	a4 17       	cp	r26, r20
    1232:	b5 07       	cpc	r27, r21
    1234:	b9 f7       	brne	.-18     	; 0x1224 <make_arp_answer_from_request+0x28>
    1236:	a3 e9       	ldi	r26, 0x93	; 147
    1238:	b3 e0       	ldi	r27, 0x03	; 3
    123a:	f8 01       	movw	r30, r16
    123c:	7c 96       	adiw	r30, 0x1c	; 28
    123e:	98 01       	movw	r18, r16
    1240:	26 5d       	subi	r18, 0xD6	; 214
    1242:	3f 4f       	sbci	r19, 0xFF	; 255
                buf[ETH_ARP_SRC_MAC_P+i]=macaddr[i];
                i++;
        }
        i=0;
        while(i<4){
                buf[ETH_ARP_DST_IP_P+i]=buf[ETH_ARP_SRC_IP_P+i];
    1244:	80 81       	ld	r24, Z
    1246:	ea 01       	movw	r28, r20
    1248:	89 93       	st	Y+, r24
    124a:	ae 01       	movw	r20, r28
                buf[ETH_ARP_SRC_IP_P+i]=ipaddr[i];
    124c:	8d 91       	ld	r24, X+
    124e:	81 93       	st	Z+, r24
                buf[ETH_ARP_DST_MAC_P+i]=buf[ETH_ARP_SRC_MAC_P+i];
                buf[ETH_ARP_SRC_MAC_P+i]=macaddr[i];
                i++;
        }
        i=0;
        while(i<4){
    1250:	c2 17       	cp	r28, r18
    1252:	d3 07       	cpc	r29, r19
    1254:	b9 f7       	brne	.-18     	; 0x1244 <make_arp_answer_from_request+0x48>
                buf[ETH_ARP_DST_IP_P+i]=buf[ETH_ARP_SRC_IP_P+i];
                buf[ETH_ARP_SRC_IP_P+i]=ipaddr[i];
                i++;
        }
        // eth+arp is 42 bytes:
        enc28j60PacketSend(42,buf); 
    1256:	b8 01       	movw	r22, r16
    1258:	8a e2       	ldi	r24, 0x2A	; 42
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	0e 94 54 06 	call	0xca8	; 0xca8 <enc28j60PacketSend>
}
    1260:	df 91       	pop	r29
    1262:	cf 91       	pop	r28
    1264:	1f 91       	pop	r17
    1266:	0f 91       	pop	r16
    1268:	08 95       	ret

0000126a <make_echo_reply_from_request>:

void make_echo_reply_from_request(uint8_t *buf,uint16_t len)
{
    126a:	0f 93       	push	r16
    126c:	1f 93       	push	r17
    126e:	cf 93       	push	r28
    1270:	df 93       	push	r29
    1272:	ec 01       	movw	r28, r24
    1274:	8b 01       	movw	r16, r22
        make_eth(buf);
    1276:	0e 94 92 08 	call	0x1124	; 0x1124 <make_eth>
        make_ip(buf);
    127a:	ce 01       	movw	r24, r28
    127c:	0e 94 ba 08 	call	0x1174	; 0x1174 <make_ip>
        buf[ICMP_TYPE_P]=ICMP_TYPE_ECHOREPLY_V;
    1280:	1a a2       	std	Y+34, r1	; 0x22
        // we changed only the icmp.type field from request(=8) to reply(=0).
        // we can therefore easily correct the checksum:
        if (buf[ICMP_CHECKSUM_P] > (0xff-0x08)){
    1282:	9c a1       	ldd	r25, Y+36	; 0x24
    1284:	98 3f       	cpi	r25, 0xF8	; 248
    1286:	18 f0       	brcs	.+6      	; 0x128e <make_echo_reply_from_request+0x24>
                buf[ICMP_CHECKSUM_P+1]++;
    1288:	2d a1       	ldd	r18, Y+37	; 0x25
    128a:	2f 5f       	subi	r18, 0xFF	; 255
    128c:	2d a3       	std	Y+37, r18	; 0x25
        }
        buf[ICMP_CHECKSUM_P]+=0x08;
    128e:	98 5f       	subi	r25, 0xF8	; 248
    1290:	9c a3       	std	Y+36, r25	; 0x24
        //
        enc28j60PacketSend(len,buf);
    1292:	be 01       	movw	r22, r28
    1294:	c8 01       	movw	r24, r16
    1296:	0e 94 54 06 	call	0xca8	; 0xca8 <enc28j60PacketSend>
}
    129a:	df 91       	pop	r29
    129c:	cf 91       	pop	r28
    129e:	1f 91       	pop	r17
    12a0:	0f 91       	pop	r16
    12a2:	08 95       	ret

000012a4 <get_tcp_data_len>:

// do some basic length calculations 
uint16_t get_tcp_data_len(uint8_t *buf)
{
    12a4:	fc 01       	movw	r30, r24
        int16_t i;
        i=(((int16_t)buf[IP_TOTLEN_H_P])<<8)|(buf[IP_TOTLEN_L_P]&0xff);
    12a6:	20 89       	ldd	r18, Z+16	; 0x10
    12a8:	30 e0       	ldi	r19, 0x00	; 0
    12aa:	32 2f       	mov	r19, r18
    12ac:	22 27       	eor	r18, r18
    12ae:	81 89       	ldd	r24, Z+17	; 0x11
    12b0:	28 2b       	or	r18, r24
        i-=IP_HEADER_LEN;
    12b2:	24 51       	subi	r18, 0x14	; 20
    12b4:	31 09       	sbc	r19, r1
        i-=(buf[TCP_HEADER_LEN_P]>>4)*4; // generate len in bytes;
    12b6:	86 a5       	ldd	r24, Z+46	; 0x2e
    12b8:	82 95       	swap	r24
    12ba:	8f 70       	andi	r24, 0x0F	; 15
    12bc:	a9 01       	movw	r20, r18
    12be:	64 e0       	ldi	r22, 0x04	; 4
    12c0:	86 9f       	mul	r24, r22
    12c2:	40 19       	sub	r20, r0
    12c4:	51 09       	sbc	r21, r1
    12c6:	11 24       	eor	r1, r1
    12c8:	ca 01       	movw	r24, r20
    12ca:	99 23       	and	r25, r25
    12cc:	14 f4       	brge	.+4      	; 0x12d2 <get_tcp_data_len+0x2e>
    12ce:	80 e0       	ldi	r24, 0x00	; 0
    12d0:	90 e0       	ldi	r25, 0x00	; 0
        if (i<=0){
                i=0;
        }
        return((uint16_t)i);
}
    12d2:	08 95       	ret

000012d4 <fill_tcp_data_p>:
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
    12d4:	9a 01       	movw	r18, r20
    12d6:	2f 5f       	subi	r18, 0xFF	; 255
    12d8:	3f 4f       	sbci	r19, 0xFF	; 255
    12da:	fa 01       	movw	r30, r20
    12dc:	44 91       	lpm	r20, Z
    12de:	44 23       	and	r20, r20
    12e0:	69 f0       	breq	.+26     	; 0x12fc <fill_tcp_data_p+0x28>
    12e2:	fb 01       	movw	r30, r22
    12e4:	f6 96       	adiw	r30, 0x36	; 54
    12e6:	dc 01       	movw	r26, r24
    12e8:	ae 0f       	add	r26, r30
    12ea:	bf 1f       	adc	r27, r31
    12ec:	f9 01       	movw	r30, r18
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
    12ee:	4d 93       	st	X+, r20
                pos++;
    12f0:	6f 5f       	subi	r22, 0xFF	; 255
    12f2:	7f 4f       	sbci	r23, 0xFF	; 255
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
    12f4:	44 91       	lpm	r20, Z
    12f6:	31 96       	adiw	r30, 0x01	; 1
    12f8:	41 11       	cpse	r20, r1
    12fa:	f9 cf       	rjmp	.-14     	; 0x12ee <fill_tcp_data_p+0x1a>
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
                pos++;
        }
        return(pos);
}
    12fc:	cb 01       	movw	r24, r22
    12fe:	08 95       	ret

00001300 <fill_tcp_data_len>:
uint16_t fill_tcp_data_len(uint8_t *buf,uint16_t pos, const uint8_t *s, uint8_t len)
{
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while (len) {
    1300:	22 23       	and	r18, r18
    1302:	91 f0       	breq	.+36     	; 0x1328 <fill_tcp_data_len+0x28>
    1304:	a4 2f       	mov	r26, r20
    1306:	b5 2f       	mov	r27, r21
    1308:	ab 01       	movw	r20, r22
    130a:	4a 5c       	subi	r20, 0xCA	; 202
    130c:	5f 4f       	sbci	r21, 0xFF	; 255
    130e:	fc 01       	movw	r30, r24
    1310:	e4 0f       	add	r30, r20
    1312:	f5 1f       	adc	r31, r21
    1314:	92 2f       	mov	r25, r18
                buf[TCP_CHECKSUM_L_P+3+pos]=*s;
    1316:	3d 91       	ld	r19, X+
    1318:	31 93       	st	Z+, r19
                pos++;
                s++;
                len--;
    131a:	91 50       	subi	r25, 0x01	; 1
uint16_t fill_tcp_data_len(uint8_t *buf,uint16_t pos, const uint8_t *s, uint8_t len)
{
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while (len) {
    131c:	e1 f7       	brne	.-8      	; 0x1316 <fill_tcp_data_len+0x16>
    131e:	21 50       	subi	r18, 0x01	; 1
    1320:	62 0f       	add	r22, r18
    1322:	71 1d       	adc	r23, r1
    1324:	6f 5f       	subi	r22, 0xFF	; 255
    1326:	7f 4f       	sbci	r23, 0xFF	; 255
                pos++;
                s++;
                len--;
        }
        return(pos);
}
    1328:	cb 01       	movw	r24, r22
    132a:	08 95       	ret

0000132c <fill_tcp_data>:
// fill in tcp data at position pos. pos=0 means start of
// tcp data. Returns the position at which the string after
// this string could be filled.
uint16_t fill_tcp_data(uint8_t *buf,uint16_t pos, const char *s)
{
        return(fill_tcp_data_len(buf,pos,(uint8_t*)s,strlen(s)));
    132c:	fa 01       	movw	r30, r20
    132e:	01 90       	ld	r0, Z+
    1330:	00 20       	and	r0, r0
    1332:	e9 f7       	brne	.-6      	; 0x132e <fill_tcp_data+0x2>
    1334:	31 97       	sbiw	r30, 0x01	; 1
    1336:	9f 01       	movw	r18, r30
    1338:	24 1b       	sub	r18, r20
    133a:	35 0b       	sbc	r19, r21
    133c:	0e 94 80 09 	call	0x1300	; 0x1300 <fill_tcp_data_len>
}
    1340:	08 95       	ret

00001342 <www_client_internal_datafill_callback>:
        return(tcp_fd);
}
#endif //  TCP_client

#if defined (WWW_client) 
uint16_t www_client_internal_datafill_callback(uint8_t fd){
    1342:	ef 92       	push	r14
    1344:	ff 92       	push	r15
    1346:	0f 93       	push	r16
    1348:	1f 93       	push	r17
    134a:	cf 93       	push	r28
    134c:	df 93       	push	r29
    134e:	00 d0       	rcall	.+0      	; 0x1350 <www_client_internal_datafill_callback+0xe>
    1350:	00 d0       	rcall	.+0      	; 0x1352 <www_client_internal_datafill_callback+0x10>
    1352:	1f 92       	push	r1
    1354:	cd b7       	in	r28, 0x3d	; 61
    1356:	de b7       	in	r29, 0x3e	; 62
        char strbuf[5];
        uint16_t len=0;
        if (fd==www_fd){
    1358:	90 91 7e 03 	lds	r25, 0x037E
    135c:	89 13       	cpse	r24, r25
    135e:	a8 c0       	rjmp	.+336    	; 0x14b0 <www_client_internal_datafill_callback+0x16e>
                if (browsertype==0){
    1360:	80 91 7d 03 	lds	r24, 0x037D
    1364:	81 11       	cpse	r24, r1
    1366:	30 c0       	rjmp	.+96     	; 0x13c8 <www_client_internal_datafill_callback+0x86>
                        // GET
                        len=fill_tcp_data_p(bufptr,0,PSTR("GET "));
    1368:	00 91 6f 03 	lds	r16, 0x036F
    136c:	10 91 70 03 	lds	r17, 0x0370
    1370:	47 e1       	ldi	r20, 0x17	; 23
    1372:	53 e0       	ldi	r21, 0x03	; 3
    1374:	60 e0       	ldi	r22, 0x00	; 0
    1376:	70 e0       	ldi	r23, 0x00	; 0
    1378:	c8 01       	movw	r24, r16
    137a:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <fill_tcp_data_p>
                        len=fill_tcp_data_p(bufptr,len,client_urlbuf_p);
    137e:	40 91 75 03 	lds	r20, 0x0375
    1382:	50 91 76 03 	lds	r21, 0x0376
    1386:	bc 01       	movw	r22, r24
    1388:	c8 01       	movw	r24, r16
    138a:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <fill_tcp_data_p>
                        len=fill_tcp_data(bufptr,len,client_urlbuf_var);
    138e:	40 91 73 03 	lds	r20, 0x0373
    1392:	50 91 74 03 	lds	r21, 0x0374
    1396:	bc 01       	movw	r22, r24
    1398:	c8 01       	movw	r24, r16
    139a:	0e 94 96 09 	call	0x132c	; 0x132c <fill_tcp_data>
                        // I would prefer http/1.0 but there is a funny
                        // bug in some apache webservers which causes
                        // them to send two packets (fragmented PDU)
                        // if we don't use HTTP/1.1 + Connection: close
                        len=fill_tcp_data_p(bufptr,len,PSTR(" HTTP/1.1\r\nHost: "));
    139e:	45 e0       	ldi	r20, 0x05	; 5
    13a0:	53 e0       	ldi	r21, 0x03	; 3
    13a2:	bc 01       	movw	r22, r24
    13a4:	c8 01       	movw	r24, r16
    13a6:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <fill_tcp_data_p>
                        len=fill_tcp_data_p(bufptr,len,client_hoststr);
    13aa:	40 91 71 03 	lds	r20, 0x0371
    13ae:	50 91 72 03 	lds	r21, 0x0372
    13b2:	bc 01       	movw	r22, r24
    13b4:	c8 01       	movw	r24, r16
    13b6:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <fill_tcp_data_p>
                        len=fill_tcp_data_p(bufptr,len,PSTR("\r\nUser-Agent: tgr/1.1\r\nAccept: text/html\r\n\r\n"));
    13ba:	48 ed       	ldi	r20, 0xD8	; 216
    13bc:	52 e0       	ldi	r21, 0x02	; 2
    13be:	bc 01       	movw	r22, r24
    13c0:	c8 01       	movw	r24, r16
    13c2:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <fill_tcp_data_p>
    13c6:	76 c0       	rjmp	.+236    	; 0x14b4 <www_client_internal_datafill_callback+0x172>
                }else{
                        // POST
                        len=fill_tcp_data_p(bufptr,0,PSTR("POST "));
    13c8:	00 91 6f 03 	lds	r16, 0x036F
    13cc:	10 91 70 03 	lds	r17, 0x0370
    13d0:	42 ed       	ldi	r20, 0xD2	; 210
    13d2:	52 e0       	ldi	r21, 0x02	; 2
    13d4:	60 e0       	ldi	r22, 0x00	; 0
    13d6:	70 e0       	ldi	r23, 0x00	; 0
    13d8:	c8 01       	movw	r24, r16
    13da:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <fill_tcp_data_p>
                        len=fill_tcp_data_p(bufptr,len,client_urlbuf_p);
    13de:	40 91 75 03 	lds	r20, 0x0375
    13e2:	50 91 76 03 	lds	r21, 0x0376
    13e6:	bc 01       	movw	r22, r24
    13e8:	c8 01       	movw	r24, r16
    13ea:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <fill_tcp_data_p>
                        len=fill_tcp_data(bufptr,len,client_urlbuf_var);
    13ee:	40 91 73 03 	lds	r20, 0x0373
    13f2:	50 91 74 03 	lds	r21, 0x0374
    13f6:	bc 01       	movw	r22, r24
    13f8:	c8 01       	movw	r24, r16
    13fa:	0e 94 96 09 	call	0x132c	; 0x132c <fill_tcp_data>
                        len=fill_tcp_data_p(bufptr,len,PSTR(" HTTP/1.1\r\nHost: "));
    13fe:	40 ec       	ldi	r20, 0xC0	; 192
    1400:	52 e0       	ldi	r21, 0x02	; 2
    1402:	bc 01       	movw	r22, r24
    1404:	c8 01       	movw	r24, r16
    1406:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <fill_tcp_data_p>
                        len=fill_tcp_data_p(bufptr,len,client_hoststr);
    140a:	40 91 71 03 	lds	r20, 0x0371
    140e:	50 91 72 03 	lds	r21, 0x0372
    1412:	bc 01       	movw	r22, r24
    1414:	c8 01       	movw	r24, r16
    1416:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <fill_tcp_data_p>
                        if (client_additionalheaderline_p){
    141a:	e0 90 79 03 	lds	r14, 0x0379
    141e:	f0 90 7a 03 	lds	r15, 0x037A
    1422:	e1 14       	cp	r14, r1
    1424:	f1 04       	cpc	r15, r1
    1426:	59 f0       	breq	.+22     	; 0x143e <www_client_internal_datafill_callback+0xfc>
                                len=fill_tcp_data_p(bufptr,len,PSTR("\r\n"));
    1428:	4d eb       	ldi	r20, 0xBD	; 189
    142a:	52 e0       	ldi	r21, 0x02	; 2
    142c:	bc 01       	movw	r22, r24
    142e:	c8 01       	movw	r24, r16
    1430:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <fill_tcp_data_p>
                                len=fill_tcp_data_p(bufptr,len,client_additionalheaderline_p);
    1434:	a7 01       	movw	r20, r14
    1436:	bc 01       	movw	r22, r24
    1438:	c8 01       	movw	r24, r16
    143a:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <fill_tcp_data_p>
                        }
                        len=fill_tcp_data_p(bufptr,len,PSTR("\r\nUser-Agent: tgr/1.1\r\nAccept: */*\r\n"));
    143e:	48 e9       	ldi	r20, 0x98	; 152
    1440:	52 e0       	ldi	r21, 0x02	; 2
    1442:	bc 01       	movw	r22, r24
    1444:	c8 01       	movw	r24, r16
    1446:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <fill_tcp_data_p>
                        len=fill_tcp_data_p(bufptr,len,PSTR("Content-Length: "));
    144a:	47 e8       	ldi	r20, 0x87	; 135
    144c:	52 e0       	ldi	r21, 0x02	; 2
    144e:	bc 01       	movw	r22, r24
    1450:	c8 01       	movw	r24, r16
    1452:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <fill_tcp_data_p>
    1456:	7c 01       	movw	r14, r24
                        itoa(strlen(client_postval),strbuf,10);
    1458:	a0 91 77 03 	lds	r26, 0x0377
    145c:	b0 91 78 03 	lds	r27, 0x0378
    1460:	fd 01       	movw	r30, r26
    1462:	01 90       	ld	r0, Z+
    1464:	00 20       	and	r0, r0
    1466:	e9 f7       	brne	.-6      	; 0x1462 <www_client_internal_datafill_callback+0x120>
    1468:	31 97       	sbiw	r30, 0x01	; 1
    146a:	4a e0       	ldi	r20, 0x0A	; 10
    146c:	be 01       	movw	r22, r28
    146e:	6f 5f       	subi	r22, 0xFF	; 255
    1470:	7f 4f       	sbci	r23, 0xFF	; 255
    1472:	cf 01       	movw	r24, r30
    1474:	8a 1b       	sub	r24, r26
    1476:	9b 0b       	sbc	r25, r27
    1478:	0e 94 17 10 	call	0x202e	; 0x202e <__itoa_ncheck>
                        len=fill_tcp_data(bufptr,len,strbuf);
    147c:	00 91 6f 03 	lds	r16, 0x036F
    1480:	10 91 70 03 	lds	r17, 0x0370
    1484:	ae 01       	movw	r20, r28
    1486:	4f 5f       	subi	r20, 0xFF	; 255
    1488:	5f 4f       	sbci	r21, 0xFF	; 255
    148a:	b7 01       	movw	r22, r14
    148c:	c8 01       	movw	r24, r16
    148e:	0e 94 96 09 	call	0x132c	; 0x132c <fill_tcp_data>
                        len=fill_tcp_data_p(bufptr,len,PSTR("\r\nContent-Type: application/x-www-form-urlencoded\r\n\r\n"));
    1492:	41 e5       	ldi	r20, 0x51	; 81
    1494:	52 e0       	ldi	r21, 0x02	; 2
    1496:	bc 01       	movw	r22, r24
    1498:	c8 01       	movw	r24, r16
    149a:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <fill_tcp_data_p>
                        len=fill_tcp_data(bufptr,len,client_postval);
    149e:	40 91 77 03 	lds	r20, 0x0377
    14a2:	50 91 78 03 	lds	r21, 0x0378
    14a6:	bc 01       	movw	r22, r24
    14a8:	c8 01       	movw	r24, r16
    14aa:	0e 94 96 09 	call	0x132c	; 0x132c <fill_tcp_data>
    14ae:	02 c0       	rjmp	.+4      	; 0x14b4 <www_client_internal_datafill_callback+0x172>
                }
                return(len);
        }
        return(0);
    14b0:	80 e0       	ldi	r24, 0x00	; 0
    14b2:	90 e0       	ldi	r25, 0x00	; 0
}
    14b4:	0f 90       	pop	r0
    14b6:	0f 90       	pop	r0
    14b8:	0f 90       	pop	r0
    14ba:	0f 90       	pop	r0
    14bc:	0f 90       	pop	r0
    14be:	df 91       	pop	r29
    14c0:	cf 91       	pop	r28
    14c2:	1f 91       	pop	r17
    14c4:	0f 91       	pop	r16
    14c6:	ff 90       	pop	r15
    14c8:	ef 90       	pop	r14
    14ca:	08 95       	ret

000014cc <make_tcp_ack_from_any>:
}

// Make just an ack packet with no tcp data inside
// This will modify the eth/ip/tcp header 
void make_tcp_ack_from_any(uint8_t *buf,int16_t datlentoack,uint8_t addflags)
{
    14cc:	ff 92       	push	r15
    14ce:	0f 93       	push	r16
    14d0:	1f 93       	push	r17
    14d2:	cf 93       	push	r28
    14d4:	df 93       	push	r29
    14d6:	ec 01       	movw	r28, r24
    14d8:	8b 01       	movw	r16, r22
    14da:	f4 2e       	mov	r15, r20
        uint16_t j;
        make_eth(buf);
    14dc:	0e 94 92 08 	call	0x1124	; 0x1124 <make_eth>
        // fill the header:
        buf[TCP_FLAGS_P]=TCP_FLAGS_ACK_V|addflags;
    14e0:	8f 2d       	mov	r24, r15
    14e2:	80 61       	ori	r24, 0x10	; 16
    14e4:	8f a7       	std	Y+47, r24	; 0x2f
        if (addflags==TCP_FLAGS_RST_V){
    14e6:	84 e0       	ldi	r24, 0x04	; 4
    14e8:	f8 12       	cpse	r15, r24
    14ea:	06 c0       	rjmp	.+12     	; 0x14f8 <make_tcp_ack_from_any+0x2c>
                make_tcphead(buf,datlentoack,1); 
    14ec:	41 e0       	ldi	r20, 0x01	; 1
    14ee:	b8 01       	movw	r22, r16
    14f0:	ce 01       	movw	r24, r28
    14f2:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <make_tcphead>
    14f6:	0a c0       	rjmp	.+20     	; 0x150c <make_tcp_ack_from_any+0x40>
        }else{
                if (datlentoack==0){
    14f8:	01 15       	cp	r16, r1
    14fa:	11 05       	cpc	r17, r1
    14fc:	11 f4       	brne	.+4      	; 0x1502 <make_tcp_ack_from_any+0x36>
                        // if there is no data then we must still acknoledge one packet
                        datlentoack=1;
    14fe:	01 e0       	ldi	r16, 0x01	; 1
    1500:	10 e0       	ldi	r17, 0x00	; 0
                }
                // normal case, ack the data:
                make_tcphead(buf,datlentoack,1); // no options
    1502:	41 e0       	ldi	r20, 0x01	; 1
    1504:	b8 01       	movw	r22, r16
    1506:	ce 01       	movw	r24, r28
    1508:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <make_tcphead>
        }
        // total length field in the IP header must be set:
        // 20 bytes IP + 20 bytes tcp (when no options) 
        j=IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN;
        buf[IP_TOTLEN_H_P]=j>>8;
    150c:	18 8a       	std	Y+16, r1	; 0x10
        buf[IP_TOTLEN_L_P]=j& 0xff;
    150e:	88 e2       	ldi	r24, 0x28	; 40
    1510:	89 8b       	std	Y+17, r24	; 0x11
        make_ip(buf);
    1512:	ce 01       	movw	r24, r28
    1514:	0e 94 ba 08 	call	0x1174	; 0x1174 <make_ip>
        // use a low window size otherwise we have to have
        // timers and can not just react on every packet.
        buf[TCP_WIN_SIZE]=0x4; // 1024=0x400, 1280=0x500 2048=0x800 768=0x300
    1518:	84 e0       	ldi	r24, 0x04	; 4
    151a:	88 ab       	std	Y+48, r24	; 0x30
        buf[TCP_WIN_SIZE+1]=0;
    151c:	19 aa       	std	Y+49, r1	; 0x31
        // calculate the checksum, len=8 (start from ip.src) + TCP_HEADER_LEN_PLAIN + data len
        j=checksum(&buf[IP_SRC_P], 8+TCP_HEADER_LEN_PLAIN,2);
    151e:	42 e0       	ldi	r20, 0x02	; 2
    1520:	6c e1       	ldi	r22, 0x1C	; 28
    1522:	70 e0       	ldi	r23, 0x00	; 0
    1524:	ce 01       	movw	r24, r28
    1526:	4a 96       	adiw	r24, 0x1a	; 26
    1528:	0e 94 a2 07 	call	0xf44	; 0xf44 <checksum>
        buf[TCP_CHECKSUM_H_P]=j>>8;
    152c:	9a ab       	std	Y+50, r25	; 0x32
        buf[TCP_CHECKSUM_L_P]=j& 0xff;
    152e:	8b ab       	std	Y+51, r24	; 0x33
        enc28j60PacketSend(IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+ETH_HEADER_LEN,buf);
    1530:	be 01       	movw	r22, r28
    1532:	86 e3       	ldi	r24, 0x36	; 54
    1534:	90 e0       	ldi	r25, 0x00	; 0
    1536:	0e 94 54 06 	call	0xca8	; 0xca8 <enc28j60PacketSend>
}
    153a:	df 91       	pop	r29
    153c:	cf 91       	pop	r28
    153e:	1f 91       	pop	r17
    1540:	0f 91       	pop	r16
    1542:	ff 90       	pop	r15
    1544:	08 95       	ret

00001546 <make_tcp_ack_with_data_noflags>:
// You can use this function only immediately after make_tcp_ack_from_any
// This is because this function will NOT modify the eth/ip/tcp header except for
// length and checksum
// You must set TCP_FLAGS before calling this
void make_tcp_ack_with_data_noflags(uint8_t *buf,uint16_t dlen)
{
    1546:	0f 93       	push	r16
    1548:	1f 93       	push	r17
    154a:	cf 93       	push	r28
    154c:	df 93       	push	r29
    154e:	ec 01       	movw	r28, r24
    1550:	8b 01       	movw	r16, r22
        uint16_t j;
        // total length field in the IP header must be set:
        // 20 bytes IP + 20 bytes tcp (when no options) + len of data
        j=IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+dlen;
    1552:	cb 01       	movw	r24, r22
    1554:	88 96       	adiw	r24, 0x28	; 40
        buf[IP_TOTLEN_H_P]=j>>8;
    1556:	98 8b       	std	Y+16, r25	; 0x10
        buf[IP_TOTLEN_L_P]=j& 0xff;
    1558:	89 8b       	std	Y+17, r24	; 0x11
        fill_ip_hdr_checksum(buf);
    155a:	ce 01       	movw	r24, r28
    155c:	0e 94 a5 08 	call	0x114a	; 0x114a <fill_ip_hdr_checksum>
        // zero the checksum
        buf[TCP_CHECKSUM_H_P]=0;
    1560:	1a aa       	std	Y+50, r1	; 0x32
        buf[TCP_CHECKSUM_L_P]=0;
    1562:	1b aa       	std	Y+51, r1	; 0x33
        // calculate the checksum, len=8 (start from ip.src) + TCP_HEADER_LEN_PLAIN + data len
        j=checksum(&buf[IP_SRC_P], 8+TCP_HEADER_LEN_PLAIN+dlen,2);
    1564:	b8 01       	movw	r22, r16
    1566:	64 5e       	subi	r22, 0xE4	; 228
    1568:	7f 4f       	sbci	r23, 0xFF	; 255
    156a:	42 e0       	ldi	r20, 0x02	; 2
    156c:	ce 01       	movw	r24, r28
    156e:	4a 96       	adiw	r24, 0x1a	; 26
    1570:	0e 94 a2 07 	call	0xf44	; 0xf44 <checksum>
        buf[TCP_CHECKSUM_H_P]=j>>8;
    1574:	9a ab       	std	Y+50, r25	; 0x32
        buf[TCP_CHECKSUM_L_P]=j& 0xff;
    1576:	8b ab       	std	Y+51, r24	; 0x33
        enc28j60PacketSend(IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+dlen+ETH_HEADER_LEN,buf);
    1578:	be 01       	movw	r22, r28
    157a:	c8 01       	movw	r24, r16
    157c:	c6 96       	adiw	r24, 0x36	; 54
    157e:	0e 94 54 06 	call	0xca8	; 0xca8 <enc28j60PacketSend>
}
    1582:	df 91       	pop	r29
    1584:	cf 91       	pop	r28
    1586:	1f 91       	pop	r17
    1588:	0f 91       	pop	r16
    158a:	08 95       	ret

0000158c <init_udp_or_www_server>:

#if defined (UDP_server) || defined (WWW_server)
// This initializes server
// you must call this function once before you use any of the other functions:
// mymac may be NULL and can be used if you did already call init_mac
void init_udp_or_www_server(uint8_t *mymac,uint8_t *myip){
    158c:	9c 01       	movw	r18, r24
        uint8_t i=0;
        if (myip){
    158e:	61 15       	cp	r22, r1
    1590:	71 05       	cpc	r23, r1
    1592:	51 f0       	breq	.+20     	; 0x15a8 <init_udp_or_www_server+0x1c>
    1594:	fb 01       	movw	r30, r22
    1596:	a3 e9       	ldi	r26, 0x93	; 147
    1598:	b3 e0       	ldi	r27, 0x03	; 3
    159a:	6c 5f       	subi	r22, 0xFC	; 252
    159c:	7f 4f       	sbci	r23, 0xFF	; 255
                while(i<4){
                        ipaddr[i]=myip[i];
    159e:	91 91       	ld	r25, Z+
    15a0:	9d 93       	st	X+, r25
// you must call this function once before you use any of the other functions:
// mymac may be NULL and can be used if you did already call init_mac
void init_udp_or_www_server(uint8_t *mymac,uint8_t *myip){
        uint8_t i=0;
        if (myip){
                while(i<4){
    15a2:	e6 17       	cp	r30, r22
    15a4:	f7 07       	cpc	r31, r23
    15a6:	d9 f7       	brne	.-10     	; 0x159e <init_udp_or_www_server+0x12>
                        ipaddr[i]=myip[i];
                        i++;
                }
        }
        if (mymac) init_mac(mymac);
    15a8:	21 15       	cp	r18, r1
    15aa:	31 05       	cpc	r19, r1
    15ac:	19 f0       	breq	.+6      	; 0x15b4 <init_udp_or_www_server+0x28>
    15ae:	c9 01       	movw	r24, r18
    15b0:	0e 94 20 08 	call	0x1040	; 0x1040 <init_mac>
    15b4:	08 95       	ret

000015b6 <www_server_port>:
#endif // UDP_server || WWW_server

#ifdef WWW_server
// not needed if you want port 80 (the default is port 80):
void www_server_port(uint16_t port){
        wwwport_h=(port>>8)&0xff;
    15b6:	90 93 68 03 	sts	0x0368, r25
        wwwport_l=(port&0xff);
    15ba:	80 93 73 00 	sts	0x0073, r24
    15be:	08 95       	ret

000015c0 <make_tcp_synack_from_syn>:
}

// this is for the server not the client:
void make_tcp_synack_from_syn(uint8_t *buf)
{
    15c0:	cf 93       	push	r28
    15c2:	df 93       	push	r29
    15c4:	ec 01       	movw	r28, r24
        uint16_t ck;
        make_eth(buf);
    15c6:	0e 94 92 08 	call	0x1124	; 0x1124 <make_eth>
        // total length field in the IP header must be set:
        // 20 bytes IP + 24 bytes (20tcp+4tcp options)
        buf[IP_TOTLEN_H_P]=0;
    15ca:	18 8a       	std	Y+16, r1	; 0x10
        buf[IP_TOTLEN_L_P]=IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+4;
    15cc:	8c e2       	ldi	r24, 0x2C	; 44
    15ce:	89 8b       	std	Y+17, r24	; 0x11
        make_ip(buf);
    15d0:	ce 01       	movw	r24, r28
    15d2:	0e 94 ba 08 	call	0x1174	; 0x1174 <make_ip>
        buf[TCP_FLAGS_P]=TCP_FLAGS_SYNACK_V;
    15d6:	82 e1       	ldi	r24, 0x12	; 18
    15d8:	8f a7       	std	Y+47, r24	; 0x2f
        make_tcphead(buf,1,0);
    15da:	40 e0       	ldi	r20, 0x00	; 0
    15dc:	61 e0       	ldi	r22, 0x01	; 1
    15de:	70 e0       	ldi	r23, 0x00	; 0
    15e0:	ce 01       	movw	r24, r28
    15e2:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <make_tcphead>
        // put an inital seq number
        buf[TCP_SEQ_H_P+0]= 0;
    15e6:	1e a2       	std	Y+38, r1	; 0x26
        buf[TCP_SEQ_H_P+1]= 0;
    15e8:	1f a2       	std	Y+39, r1	; 0x27
        // we step only the second byte, this allows us to send packts 
        // with 255 bytes, 512  or 765 (step by 3) without generating
        // overlapping numbers.
        buf[TCP_SEQ_H_P+2]= seqnum; 
    15ea:	80 91 77 00 	lds	r24, 0x0077
    15ee:	88 a7       	std	Y+40, r24	; 0x28
        buf[TCP_SEQ_H_P+3]= 0;
    15f0:	19 a6       	std	Y+41, r1	; 0x29
        // step the inititial seq num by something we will not use
        // during this tcp session:
        seqnum+=3;
    15f2:	8d 5f       	subi	r24, 0xFD	; 253
    15f4:	80 93 77 00 	sts	0x0077, r24
        // add an mss options field with MSS to 1280:
        // 1280 in hex is 0x500
        buf[TCP_OPTIONS_P]=2;
    15f8:	82 e0       	ldi	r24, 0x02	; 2
    15fa:	8e ab       	std	Y+54, r24	; 0x36
        buf[TCP_OPTIONS_P+1]=4;
    15fc:	84 e0       	ldi	r24, 0x04	; 4
    15fe:	8f ab       	std	Y+55, r24	; 0x37
        buf[TCP_OPTIONS_P+2]=0x05;
    1600:	85 e0       	ldi	r24, 0x05	; 5
    1602:	88 af       	std	Y+56, r24	; 0x38
        buf[TCP_OPTIONS_P+3]=0x0;
    1604:	19 ae       	std	Y+57, r1	; 0x39
        // The tcp header length is only a 4 bit field (the upper 4 bits).
        // It is calculated in units of 4 bytes.
        // E.g 24 bytes: 24/4=6 => 0x60=header len field
        buf[TCP_HEADER_LEN_P]=0x60;
    1606:	80 e6       	ldi	r24, 0x60	; 96
    1608:	8e a7       	std	Y+46, r24	; 0x2e
        // here we must just be sure that the web browser contacting us
        // will send only one get packet
        buf[TCP_WIN_SIZE]=0x0a; // was 1400=0x578, 2560=0xa00 suggested by Andras Tucsni to be able to receive bigger packets
    160a:	8a e0       	ldi	r24, 0x0A	; 10
    160c:	88 ab       	std	Y+48, r24	; 0x30
        buf[TCP_WIN_SIZE+1]=0; //
    160e:	19 aa       	std	Y+49, r1	; 0x31
        // calculate the checksum, len=8 (start from ip.src) + TCP_HEADER_LEN_PLAIN + 4 (one option: mss)
        ck=checksum(&buf[IP_SRC_P], 8+TCP_HEADER_LEN_PLAIN+4,2);
    1610:	42 e0       	ldi	r20, 0x02	; 2
    1612:	60 e2       	ldi	r22, 0x20	; 32
    1614:	70 e0       	ldi	r23, 0x00	; 0
    1616:	ce 01       	movw	r24, r28
    1618:	4a 96       	adiw	r24, 0x1a	; 26
    161a:	0e 94 a2 07 	call	0xf44	; 0xf44 <checksum>
        buf[TCP_CHECKSUM_H_P]=ck>>8;
    161e:	9a ab       	std	Y+50, r25	; 0x32
        buf[TCP_CHECKSUM_L_P]=ck& 0xff;
    1620:	8b ab       	std	Y+51, r24	; 0x33
        // add 4 for option mss:
        enc28j60PacketSend(IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+4+ETH_HEADER_LEN,buf);
    1622:	be 01       	movw	r22, r28
    1624:	8a e3       	ldi	r24, 0x3A	; 58
    1626:	90 e0       	ldi	r25, 0x00	; 0
    1628:	0e 94 54 06 	call	0xca8	; 0xca8 <enc28j60PacketSend>
}
    162c:	df 91       	pop	r29
    162e:	cf 91       	pop	r28
    1630:	08 95       	ret

00001632 <www_server_reply>:
// dlen is the amount of tcp data (http data) we send in this packet
// You can use this function only immediately after make_tcp_ack_from_any
// This is because this function will NOT modify the eth/ip/tcp header except for
// length and checksum
void www_server_reply(uint8_t *buf,uint16_t dlen)
{
    1632:	0f 93       	push	r16
    1634:	1f 93       	push	r17
    1636:	cf 93       	push	r28
    1638:	df 93       	push	r29
    163a:	ec 01       	movw	r28, r24
    163c:	8b 01       	movw	r16, r22
        make_tcp_ack_from_any(buf,info_data_len,0); // send ack for http get
    163e:	60 91 66 03 	lds	r22, 0x0366
    1642:	70 91 67 03 	lds	r23, 0x0367
    1646:	40 e0       	ldi	r20, 0x00	; 0
    1648:	0e 94 66 0a 	call	0x14cc	; 0x14cc <make_tcp_ack_from_any>
        // fill the header:
        // This code requires that we send only one data packet
        // because we keep no state information. We must therefore set
        // the fin here:
        buf[TCP_FLAGS_P]=TCP_FLAGS_ACK_V|TCP_FLAGS_PUSH_V|TCP_FLAGS_FIN_V;
    164c:	89 e1       	ldi	r24, 0x19	; 25
    164e:	8f a7       	std	Y+47, r24	; 0x2f
        make_tcp_ack_with_data_noflags(buf,dlen); // send data
    1650:	b8 01       	movw	r22, r16
    1652:	ce 01       	movw	r24, r28
    1654:	0e 94 a3 0a 	call	0x1546	; 0x1546 <make_tcp_ack_with_data_noflags>
}
    1658:	df 91       	pop	r29
    165a:	cf 91       	pop	r28
    165c:	1f 91       	pop	r17
    165e:	0f 91       	pop	r16
    1660:	08 95       	ret

00001662 <fill_buf_p>:
#endif // WWW_server

#if defined (ALL_clients) || defined (GRATARP) || defined (WOL_client)
// fill buffer with a prog-mem string
void fill_buf_p(uint8_t *buf,uint16_t len, const char *progmem_str_p)
{
    1662:	dc 01       	movw	r26, r24
    1664:	fa 01       	movw	r30, r20
        while (len){
    1666:	61 15       	cp	r22, r1
    1668:	71 05       	cpc	r23, r1
    166a:	41 f0       	breq	.+16     	; 0x167c <fill_buf_p+0x1a>
    166c:	68 0f       	add	r22, r24
    166e:	79 1f       	adc	r23, r25
                *buf= pgm_read_byte(progmem_str_p);
    1670:	84 91       	lpm	r24, Z
    1672:	8d 93       	st	X+, r24
                buf++;
                progmem_str_p++;
    1674:	31 96       	adiw	r30, 0x01	; 1

#if defined (ALL_clients) || defined (GRATARP) || defined (WOL_client)
// fill buffer with a prog-mem string
void fill_buf_p(uint8_t *buf,uint16_t len, const char *progmem_str_p)
{
        while (len){
    1676:	a6 17       	cp	r26, r22
    1678:	b7 07       	cpc	r27, r23
    167a:	d1 f7       	brne	.-12     	; 0x1670 <fill_buf_p+0xe>
    167c:	08 95       	ret

0000167e <send_udp_prepare>:
//
// 2) You just allocate a large enough buffer for you data and you call send_udp and nothing else
// needs to be done.
//
void send_udp_prepare(uint8_t *buf,uint16_t sport, const uint8_t *dip, uint16_t dport,const uint8_t *dstmac)
{
    167e:	af 92       	push	r10
    1680:	bf 92       	push	r11
    1682:	cf 92       	push	r12
    1684:	df 92       	push	r13
    1686:	ef 92       	push	r14
    1688:	ff 92       	push	r15
    168a:	0f 93       	push	r16
    168c:	1f 93       	push	r17
    168e:	cf 93       	push	r28
    1690:	df 93       	push	r29
    1692:	ec 01       	movw	r28, r24
    1694:	d6 2e       	mov	r13, r22
    1696:	c7 2e       	mov	r12, r23
    1698:	7a 01       	movw	r14, r20
    169a:	b2 2e       	mov	r11, r18
    169c:	a3 2e       	mov	r10, r19
    169e:	f8 01       	movw	r30, r16
    16a0:	ac 01       	movw	r20, r24
    16a2:	87 e9       	ldi	r24, 0x97	; 151
    16a4:	93 e0       	ldi	r25, 0x03	; 3
    16a6:	8e 01       	movw	r16, r28
    16a8:	0a 5f       	subi	r16, 0xFA	; 250
    16aa:	1f 4f       	sbci	r17, 0xFF	; 255
    16ac:	bf 01       	movw	r22, r30
    16ae:	6a 5f       	subi	r22, 0xFA	; 250
    16b0:	7f 4f       	sbci	r23, 0xFF	; 255
        uint8_t i=0;
        //
        while(i<6){
                buf[ETH_DST_MAC +i]=dstmac[i]; // gw mac in local lan or host mac
    16b2:	21 91       	ld	r18, Z+
    16b4:	da 01       	movw	r26, r20
    16b6:	2d 93       	st	X+, r18
    16b8:	ad 01       	movw	r20, r26
                buf[ETH_SRC_MAC +i]=macaddr[i];
    16ba:	dc 01       	movw	r26, r24
    16bc:	2d 91       	ld	r18, X+
    16be:	cd 01       	movw	r24, r26
    16c0:	d8 01       	movw	r26, r16
    16c2:	2d 93       	st	X+, r18
    16c4:	8d 01       	movw	r16, r26
//
void send_udp_prepare(uint8_t *buf,uint16_t sport, const uint8_t *dip, uint16_t dport,const uint8_t *dstmac)
{
        uint8_t i=0;
        //
        while(i<6){
    16c6:	e6 17       	cp	r30, r22
    16c8:	f7 07       	cpc	r31, r23
    16ca:	99 f7       	brne	.-26     	; 0x16b2 <send_udp_prepare+0x34>
                buf[ETH_DST_MAC +i]=dstmac[i]; // gw mac in local lan or host mac
                buf[ETH_SRC_MAC +i]=macaddr[i];
                i++;
        }
        buf[ETH_TYPE_H_P] = ETHTYPE_IP_H_V;
    16cc:	88 e0       	ldi	r24, 0x08	; 8
    16ce:	8c 87       	std	Y+12, r24	; 0x0c
        buf[ETH_TYPE_L_P] = ETHTYPE_IP_L_V;
    16d0:	1d 86       	std	Y+13, r1	; 0x0d
        fill_buf_p(&buf[IP_P],9,iphdr);
    16d2:	44 e2       	ldi	r20, 0x24	; 36
    16d4:	53 e0       	ldi	r21, 0x03	; 3
    16d6:	69 e0       	ldi	r22, 0x09	; 9
    16d8:	70 e0       	ldi	r23, 0x00	; 0
    16da:	ce 01       	movw	r24, r28
    16dc:	0e 96       	adiw	r24, 0x0e	; 14
    16de:	0e 94 31 0b 	call	0x1662	; 0x1662 <fill_buf_p>
        buf[IP_ID_L_P]=ipid; ipid++;
    16e2:	80 91 72 00 	lds	r24, 0x0072
    16e6:	8b 8b       	std	Y+19, r24	; 0x13
    16e8:	8f 5f       	subi	r24, 0xFF	; 255
    16ea:	80 93 72 00 	sts	0x0072, r24
        // total length field in the IP header must be set:
        buf[IP_TOTLEN_H_P]=0;
    16ee:	18 8a       	std	Y+16, r1	; 0x10
        // done in transmit: buf[IP_TOTLEN_L_P]=IP_HEADER_LEN+UDP_HEADER_LEN+datalen;
        buf[IP_PROTO_P]=IP_PROTO_UDP_V;
    16f0:	81 e1       	ldi	r24, 0x11	; 17
    16f2:	8f 8b       	std	Y+23, r24	; 0x17
    16f4:	f7 01       	movw	r30, r14
    16f6:	9e 01       	movw	r18, r28
    16f8:	22 5e       	subi	r18, 0xE2	; 226
    16fa:	3f 4f       	sbci	r19, 0xFF	; 255
    16fc:	83 e9       	ldi	r24, 0x93	; 147
    16fe:	93 e0       	ldi	r25, 0x03	; 3
    1700:	be 01       	movw	r22, r28
    1702:	66 5e       	subi	r22, 0xE6	; 230
    1704:	7f 4f       	sbci	r23, 0xFF	; 255
    1706:	b4 e0       	ldi	r27, 0x04	; 4
    1708:	eb 0e       	add	r14, r27
    170a:	f1 1c       	adc	r15, r1
        i=0;
        while(i<4){
                buf[IP_DST_P+i]=dip[i];
    170c:	41 91       	ld	r20, Z+
    170e:	d9 01       	movw	r26, r18
    1710:	4d 93       	st	X+, r20
    1712:	9d 01       	movw	r18, r26
                buf[IP_SRC_P+i]=ipaddr[i];
    1714:	dc 01       	movw	r26, r24
    1716:	4d 91       	ld	r20, X+
    1718:	cd 01       	movw	r24, r26
    171a:	db 01       	movw	r26, r22
    171c:	4d 93       	st	X+, r20
    171e:	bd 01       	movw	r22, r26
        // total length field in the IP header must be set:
        buf[IP_TOTLEN_H_P]=0;
        // done in transmit: buf[IP_TOTLEN_L_P]=IP_HEADER_LEN+UDP_HEADER_LEN+datalen;
        buf[IP_PROTO_P]=IP_PROTO_UDP_V;
        i=0;
        while(i<4){
    1720:	ee 15       	cp	r30, r14
    1722:	ff 05       	cpc	r31, r15
    1724:	99 f7       	brne	.-26     	; 0x170c <send_udp_prepare+0x8e>
                buf[IP_DST_P+i]=dip[i];
                buf[IP_SRC_P+i]=ipaddr[i];
                i++;
        }
        // done in transmit: fill_ip_hdr_checksum(buf);
        buf[UDP_DST_PORT_H_P]=(dport>>8);
    1726:	ac a2       	std	Y+36, r10	; 0x24
        buf[UDP_DST_PORT_L_P]=0xff&dport; 
    1728:	bd a2       	std	Y+37, r11	; 0x25
        buf[UDP_SRC_PORT_H_P]=(sport>>8);
    172a:	ca a2       	std	Y+34, r12	; 0x22
        buf[UDP_SRC_PORT_L_P]=sport&0xff; 
    172c:	db a2       	std	Y+35, r13	; 0x23
        buf[UDP_LEN_H_P]=0;
    172e:	1e a2       	std	Y+38, r1	; 0x26
        // done in transmit: buf[UDP_LEN_L_P]=UDP_HEADER_LEN+datalen;
        // zero the checksum
        buf[UDP_CHECKSUM_H_P]=0;
    1730:	18 a6       	std	Y+40, r1	; 0x28
        buf[UDP_CHECKSUM_L_P]=0;
    1732:	19 a6       	std	Y+41, r1	; 0x29
        // copy the data:
        // now starting with the first byte at buf[UDP_DATA_P]
        //
}
    1734:	df 91       	pop	r29
    1736:	cf 91       	pop	r28
    1738:	1f 91       	pop	r17
    173a:	0f 91       	pop	r16
    173c:	ff 90       	pop	r15
    173e:	ef 90       	pop	r14
    1740:	df 90       	pop	r13
    1742:	cf 90       	pop	r12
    1744:	bf 90       	pop	r11
    1746:	af 90       	pop	r10
    1748:	08 95       	ret

0000174a <send_udp_transmit>:

void send_udp_transmit(uint8_t *buf,uint16_t datalen)
{
    174a:	0f 93       	push	r16
    174c:	1f 93       	push	r17
    174e:	cf 93       	push	r28
    1750:	df 93       	push	r29
    1752:	ec 01       	movw	r28, r24
    1754:	8b 01       	movw	r16, r22
        uint16_t tmp16;
        tmp16=IP_HEADER_LEN+UDP_HEADER_LEN+datalen;
    1756:	cb 01       	movw	r24, r22
    1758:	4c 96       	adiw	r24, 0x1c	; 28
        buf[IP_TOTLEN_L_P]=tmp16& 0xff;
    175a:	89 8b       	std	Y+17, r24	; 0x11
        buf[IP_TOTLEN_H_P]=tmp16>>8;
    175c:	98 8b       	std	Y+16, r25	; 0x10
        fill_ip_hdr_checksum(buf);
    175e:	ce 01       	movw	r24, r28
    1760:	0e 94 a5 08 	call	0x114a	; 0x114a <fill_ip_hdr_checksum>
        tmp16=UDP_HEADER_LEN+datalen;
    1764:	c8 01       	movw	r24, r16
    1766:	08 96       	adiw	r24, 0x08	; 8
        buf[UDP_LEN_L_P]=tmp16& 0xff;
    1768:	8f a3       	std	Y+39, r24	; 0x27
        buf[UDP_LEN_H_P]=tmp16>>8;
    176a:	9e a3       	std	Y+38, r25	; 0x26
        //
        tmp16=checksum(&buf[IP_SRC_P], 16 + datalen,1);
    176c:	b8 01       	movw	r22, r16
    176e:	60 5f       	subi	r22, 0xF0	; 240
    1770:	7f 4f       	sbci	r23, 0xFF	; 255
    1772:	41 e0       	ldi	r20, 0x01	; 1
    1774:	ce 01       	movw	r24, r28
    1776:	4a 96       	adiw	r24, 0x1a	; 26
    1778:	0e 94 a2 07 	call	0xf44	; 0xf44 <checksum>
        buf[UDP_CHECKSUM_L_P]=tmp16& 0xff;
    177c:	89 a7       	std	Y+41, r24	; 0x29
        buf[UDP_CHECKSUM_H_P]=tmp16>>8;
    177e:	98 a7       	std	Y+40, r25	; 0x28
        enc28j60PacketSend(UDP_HEADER_LEN+IP_HEADER_LEN+ETH_HEADER_LEN+datalen,buf);
    1780:	be 01       	movw	r22, r28
    1782:	c8 01       	movw	r24, r16
    1784:	8a 96       	adiw	r24, 0x2a	; 42
    1786:	0e 94 54 06 	call	0xca8	; 0xca8 <enc28j60PacketSend>
}
    178a:	df 91       	pop	r29
    178c:	cf 91       	pop	r28
    178e:	1f 91       	pop	r17
    1790:	0f 91       	pop	r16
    1792:	08 95       	ret

00001794 <client_arp_whohas>:
// make a arp request
// Note: you must have initialized the stack with 
// init_udp_or_www_server or client_ifconfig 
// before you can use this function
void client_arp_whohas(uint8_t *buf,uint8_t *ip_we_search)
{
    1794:	cf 92       	push	r12
    1796:	df 92       	push	r13
    1798:	ef 92       	push	r14
    179a:	ff 92       	push	r15
    179c:	0f 93       	push	r16
    179e:	1f 93       	push	r17
    17a0:	cf 93       	push	r28
    17a2:	df 93       	push	r29
    17a4:	6c 01       	movw	r12, r24
        uint8_t i=0;
        if (ipaddr[0]==0) return; // error ipaddr not set
    17a6:	80 91 93 03 	lds	r24, 0x0393
    17aa:	88 23       	and	r24, r24
    17ac:	09 f4       	brne	.+2      	; 0x17b0 <client_arp_whohas+0x1c>
    17ae:	45 c0       	rjmp	.+138    	; 0x183a <client_arp_whohas+0xa6>
    17b0:	f6 01       	movw	r30, r12
    17b2:	07 e9       	ldi	r16, 0x97	; 151
    17b4:	13 e0       	ldi	r17, 0x03	; 3
    17b6:	96 01       	movw	r18, r12
    17b8:	2a 5f       	subi	r18, 0xFA	; 250
    17ba:	3f 4f       	sbci	r19, 0xFF	; 255
    17bc:	e9 01       	movw	r28, r18
    17be:	d8 01       	movw	r26, r16
        //
        while(i<6){
                buf[ETH_DST_MAC +i]=0xff;
    17c0:	4f ef       	ldi	r20, 0xFF	; 255
    17c2:	41 93       	st	Z+, r20
                buf[ETH_SRC_MAC +i]=macaddr[i];
    17c4:	9d 91       	ld	r25, X+
    17c6:	99 93       	st	Y+, r25
void client_arp_whohas(uint8_t *buf,uint8_t *ip_we_search)
{
        uint8_t i=0;
        if (ipaddr[0]==0) return; // error ipaddr not set
        //
        while(i<6){
    17c8:	e2 17       	cp	r30, r18
    17ca:	f3 07       	cpc	r31, r19
    17cc:	d1 f7       	brne	.-12     	; 0x17c2 <client_arp_whohas+0x2e>
    17ce:	7b 01       	movw	r14, r22
                buf[ETH_DST_MAC +i]=0xff;
                buf[ETH_SRC_MAC +i]=macaddr[i];
                i++;
        }
        buf[ETH_TYPE_H_P] = ETHTYPE_ARP_H_V;
    17d0:	88 e0       	ldi	r24, 0x08	; 8
    17d2:	e6 01       	movw	r28, r12
    17d4:	8c 87       	std	Y+12, r24	; 0x0c
        buf[ETH_TYPE_L_P] = ETHTYPE_ARP_L_V;
    17d6:	86 e0       	ldi	r24, 0x06	; 6
    17d8:	8d 87       	std	Y+13, r24	; 0x0d
        fill_buf_p(&buf[ETH_ARP_P],8,arpreqhdr);
    17da:	4c e1       	ldi	r20, 0x1C	; 28
    17dc:	53 e0       	ldi	r21, 0x03	; 3
    17de:	68 e0       	ldi	r22, 0x08	; 8
    17e0:	70 e0       	ldi	r23, 0x00	; 0
    17e2:	c6 01       	movw	r24, r12
    17e4:	0e 96       	adiw	r24, 0x0e	; 14
    17e6:	0e 94 31 0b 	call	0x1662	; 0x1662 <fill_buf_p>
    17ea:	c6 01       	movw	r24, r12
    17ec:	46 96       	adiw	r24, 0x16	; 22
    17ee:	f6 01       	movw	r30, r12
    17f0:	b0 96       	adiw	r30, 0x20	; 32
    17f2:	d6 01       	movw	r26, r12
    17f4:	96 96       	adiw	r26, 0x26	; 38
        i=0;
        while(i<6){
                buf[ETH_ARP_SRC_MAC_P +i]=macaddr[i];
    17f6:	e8 01       	movw	r28, r16
    17f8:	29 91       	ld	r18, Y+
    17fa:	8e 01       	movw	r16, r28
    17fc:	ec 01       	movw	r28, r24
    17fe:	29 93       	st	Y+, r18
    1800:	ce 01       	movw	r24, r28
                buf[ETH_ARP_DST_MAC_P+i]=0;
    1802:	11 92       	st	Z+, r1
        }
        buf[ETH_TYPE_H_P] = ETHTYPE_ARP_H_V;
        buf[ETH_TYPE_L_P] = ETHTYPE_ARP_L_V;
        fill_buf_p(&buf[ETH_ARP_P],8,arpreqhdr);
        i=0;
        while(i<6){
    1804:	ea 17       	cp	r30, r26
    1806:	fb 07       	cpc	r31, r27
    1808:	b1 f7       	brne	.-20     	; 0x17f6 <client_arp_whohas+0x62>
    180a:	f7 01       	movw	r30, r14
    180c:	23 e9       	ldi	r18, 0x93	; 147
    180e:	33 e0       	ldi	r19, 0x03	; 3
    1810:	c6 01       	movw	r24, r12
    1812:	4c 96       	adiw	r24, 0x1c	; 28
    1814:	d4 e0       	ldi	r29, 0x04	; 4
    1816:	ed 0e       	add	r14, r29
    1818:	f1 1c       	adc	r15, r1
                buf[ETH_ARP_DST_MAC_P+i]=0;
                i++;
        }
        i=0;
        while(i<4){
                buf[ETH_ARP_DST_IP_P+i]=*(ip_we_search +i);
    181a:	41 91       	ld	r20, Z+
    181c:	4d 93       	st	X+, r20
                buf[ETH_ARP_SRC_IP_P+i]=ipaddr[i];
    181e:	e9 01       	movw	r28, r18
    1820:	49 91       	ld	r20, Y+
    1822:	9e 01       	movw	r18, r28
    1824:	ec 01       	movw	r28, r24
    1826:	49 93       	st	Y+, r20
    1828:	ce 01       	movw	r24, r28
                buf[ETH_ARP_SRC_MAC_P +i]=macaddr[i];
                buf[ETH_ARP_DST_MAC_P+i]=0;
                i++;
        }
        i=0;
        while(i<4){
    182a:	ee 15       	cp	r30, r14
    182c:	ff 05       	cpc	r31, r15
    182e:	a9 f7       	brne	.-22     	; 0x181a <client_arp_whohas+0x86>
                buf[ETH_ARP_DST_IP_P+i]=*(ip_we_search +i);
                buf[ETH_ARP_SRC_IP_P+i]=ipaddr[i];
                i++;
        }
        // 0x2a=42=len of packet
        enc28j60PacketSend(0x2a,buf);
    1830:	b6 01       	movw	r22, r12
    1832:	8a e2       	ldi	r24, 0x2A	; 42
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	0e 94 54 06 	call	0xca8	; 0xca8 <enc28j60PacketSend>
}
    183a:	df 91       	pop	r29
    183c:	cf 91       	pop	r28
    183e:	1f 91       	pop	r17
    1840:	0f 91       	pop	r16
    1842:	ff 90       	pop	r15
    1844:	ef 90       	pop	r14
    1846:	df 90       	pop	r13
    1848:	cf 90       	pop	r12
    184a:	08 95       	ret

0000184c <get_mac_with_arp_wait>:

// return zero when current transaction is finished
uint8_t get_mac_with_arp_wait(void)
{
        if (arpip_state == WGW_HAVE_MAC){
    184c:	81 e0       	ldi	r24, 0x01	; 1
    184e:	90 91 6a 03 	lds	r25, 0x036A
    1852:	92 30       	cpi	r25, 0x02	; 2
    1854:	09 f4       	brne	.+2      	; 0x1858 <get_mac_with_arp_wait+0xc>
    1856:	80 e0       	ldi	r24, 0x00	; 0
                return(0);
        }
        return(1);
}
    1858:	08 95       	ret

0000185a <get_mac_with_arp>:
// init_udp_or_www_server or client_ifconfig 
// before you can use this function
void get_mac_with_arp(uint8_t *ip, uint8_t reference_number,void (*arp_result_callback)(uint8_t *ip,uint8_t reference_number,uint8_t *mac))
{
        uint8_t i=0;
        client_arp_result_callback=arp_result_callback;
    185a:	50 93 9e 03 	sts	0x039E, r21
    185e:	40 93 9d 03 	sts	0x039D, r20
        arpip_state=WGW_INITIAL_ARP; // causes an arp request in the packet loop
    1862:	21 e0       	ldi	r18, 0x01	; 1
    1864:	20 93 6a 03 	sts	0x036A, r18
        arp_reference_number=reference_number;
    1868:	60 93 69 03 	sts	0x0369, r22
    186c:	fc 01       	movw	r30, r24
    186e:	ab e6       	ldi	r26, 0x6B	; 107
    1870:	b3 e0       	ldi	r27, 0x03	; 3
    1872:	04 96       	adiw	r24, 0x04	; 4
        while(i<4){
                arpip[i]=ip[i];
    1874:	21 91       	ld	r18, Z+
    1876:	2d 93       	st	X+, r18
{
        uint8_t i=0;
        client_arp_result_callback=arp_result_callback;
        arpip_state=WGW_INITIAL_ARP; // causes an arp request in the packet loop
        arp_reference_number=reference_number;
        while(i<4){
    1878:	e8 17       	cp	r30, r24
    187a:	f9 07       	cpc	r31, r25
    187c:	d9 f7       	brne	.-10     	; 0x1874 <get_mac_with_arp+0x1a>
                arpip[i]=ip[i];
                i++;
        }
}
    187e:	08 95       	ret

00001880 <tcp_client_syn>:
#endif 

#if defined (TCP_client)
// Make a tcp syn packet
void tcp_client_syn(uint8_t *buf,uint8_t srcport,uint16_t dstport)
{
    1880:	af 92       	push	r10
    1882:	bf 92       	push	r11
    1884:	df 92       	push	r13
    1886:	ef 92       	push	r14
    1888:	ff 92       	push	r15
    188a:	0f 93       	push	r16
    188c:	1f 93       	push	r17
    188e:	cf 93       	push	r28
    1890:	df 93       	push	r29
    1892:	ec 01       	movw	r28, r24
    1894:	f6 2e       	mov	r15, r22
    1896:	e4 2e       	mov	r14, r20
    1898:	d5 2e       	mov	r13, r21
    189a:	e6 e8       	ldi	r30, 0x86	; 134
    189c:	f3 e0       	ldi	r31, 0x03	; 3
    189e:	9c 01       	movw	r18, r24
    18a0:	87 e9       	ldi	r24, 0x97	; 151
    18a2:	93 e0       	ldi	r25, 0x03	; 3
    18a4:	5e 01       	movw	r10, r28
    18a6:	46 e0       	ldi	r20, 0x06	; 6
    18a8:	a4 0e       	add	r10, r20
    18aa:	b1 1c       	adc	r11, r1
    18ac:	0c e8       	ldi	r16, 0x8C	; 140
    18ae:	13 e0       	ldi	r17, 0x03	; 3
        uint16_t ck;
        uint8_t i=0;
        // -- make the main part of the eth/IP/tcp header:
        while(i<6){
                buf[ETH_DST_MAC +i]=tcp_dst_mac[i]; // gw mac in local lan or host mac
    18b0:	41 91       	ld	r20, Z+
    18b2:	d9 01       	movw	r26, r18
    18b4:	4d 93       	st	X+, r20
    18b6:	9d 01       	movw	r18, r26
                buf[ETH_SRC_MAC +i]=macaddr[i];
    18b8:	dc 01       	movw	r26, r24
    18ba:	7d 91       	ld	r23, X+
    18bc:	cd 01       	movw	r24, r26
    18be:	d5 01       	movw	r26, r10
    18c0:	7d 93       	st	X+, r23
    18c2:	5d 01       	movw	r10, r26
void tcp_client_syn(uint8_t *buf,uint8_t srcport,uint16_t dstport)
{
        uint16_t ck;
        uint8_t i=0;
        // -- make the main part of the eth/IP/tcp header:
        while(i<6){
    18c4:	e0 17       	cp	r30, r16
    18c6:	f1 07       	cpc	r31, r17
    18c8:	99 f7       	brne	.-26     	; 0x18b0 <tcp_client_syn+0x30>
                buf[ETH_DST_MAC +i]=tcp_dst_mac[i]; // gw mac in local lan or host mac
                buf[ETH_SRC_MAC +i]=macaddr[i];
                i++;
        }
        buf[ETH_TYPE_H_P] = ETHTYPE_IP_H_V;
    18ca:	88 e0       	ldi	r24, 0x08	; 8
    18cc:	8c 87       	std	Y+12, r24	; 0x0c
        buf[ETH_TYPE_L_P] = ETHTYPE_IP_L_V;
    18ce:	1d 86       	std	Y+13, r1	; 0x0d
        fill_buf_p(&buf[IP_P],9,iphdr);
    18d0:	44 e2       	ldi	r20, 0x24	; 36
    18d2:	53 e0       	ldi	r21, 0x03	; 3
    18d4:	69 e0       	ldi	r22, 0x09	; 9
    18d6:	70 e0       	ldi	r23, 0x00	; 0
    18d8:	ce 01       	movw	r24, r28
    18da:	0e 96       	adiw	r24, 0x0e	; 14
    18dc:	0e 94 31 0b 	call	0x1662	; 0x1662 <fill_buf_p>
        buf[IP_TOTLEN_L_P]=44; // good for syn
    18e0:	8c e2       	ldi	r24, 0x2C	; 44
    18e2:	89 8b       	std	Y+17, r24	; 0x11
        buf[IP_ID_L_P]=ipid; ipid++;
    18e4:	80 91 72 00 	lds	r24, 0x0072
    18e8:	8b 8b       	std	Y+19, r24	; 0x13
    18ea:	8f 5f       	subi	r24, 0xFF	; 255
    18ec:	80 93 72 00 	sts	0x0072, r24
        buf[IP_PROTO_P]=IP_PROTO_TCP_V;
    18f0:	86 e0       	ldi	r24, 0x06	; 6
    18f2:	8f 8b       	std	Y+23, r24	; 0x17
    18f4:	ec e8       	ldi	r30, 0x8C	; 140
    18f6:	f3 e0       	ldi	r31, 0x03	; 3
    18f8:	9e 01       	movw	r18, r28
    18fa:	22 5e       	subi	r18, 0xE2	; 226
    18fc:	3f 4f       	sbci	r19, 0xFF	; 255
    18fe:	83 e9       	ldi	r24, 0x93	; 147
    1900:	93 e0       	ldi	r25, 0x03	; 3
    1902:	8e 01       	movw	r16, r28
    1904:	06 5e       	subi	r16, 0xE6	; 230
    1906:	1f 4f       	sbci	r17, 0xFF	; 255
    1908:	58 01       	movw	r10, r16
    190a:	60 e9       	ldi	r22, 0x90	; 144
    190c:	73 e0       	ldi	r23, 0x03	; 3
        i=0;
        while(i<4){
                buf[IP_DST_P+i]=tcp_otherside_ip[i];
    190e:	41 91       	ld	r20, Z+
    1910:	d9 01       	movw	r26, r18
    1912:	4d 93       	st	X+, r20
    1914:	9d 01       	movw	r18, r26
                buf[IP_SRC_P+i]=ipaddr[i];
    1916:	dc 01       	movw	r26, r24
    1918:	4d 91       	ld	r20, X+
    191a:	cd 01       	movw	r24, r26
    191c:	d5 01       	movw	r26, r10
    191e:	4d 93       	st	X+, r20
    1920:	5d 01       	movw	r10, r26
        fill_buf_p(&buf[IP_P],9,iphdr);
        buf[IP_TOTLEN_L_P]=44; // good for syn
        buf[IP_ID_L_P]=ipid; ipid++;
        buf[IP_PROTO_P]=IP_PROTO_TCP_V;
        i=0;
        while(i<4){
    1922:	e6 17       	cp	r30, r22
    1924:	f7 07       	cpc	r31, r23
    1926:	99 f7       	brne	.-26     	; 0x190e <tcp_client_syn+0x8e>
                buf[IP_DST_P+i]=tcp_otherside_ip[i];
                buf[IP_SRC_P+i]=ipaddr[i];
                i++;
        }
        fill_ip_hdr_checksum(buf);
    1928:	ce 01       	movw	r24, r28
    192a:	0e 94 a5 08 	call	0x114a	; 0x114a <fill_ip_hdr_checksum>
        buf[TCP_DST_PORT_H_P]=(dstport>>8)&0xff;
    192e:	dc a2       	std	Y+36, r13	; 0x24
        buf[TCP_DST_PORT_L_P]=(dstport&0xff);
    1930:	ed a2       	std	Y+37, r14	; 0x25
        buf[TCP_SRC_PORT_H_P]=TCPCLIENT_SRC_PORT_H;
    1932:	8b e0       	ldi	r24, 0x0B	; 11
    1934:	8a a3       	std	Y+34, r24	; 0x22
        buf[TCP_SRC_PORT_L_P]=srcport; // lower 8 bit of src port
    1936:	fb a2       	std	Y+35, r15	; 0x23
    1938:	fe 01       	movw	r30, r28
    193a:	b6 96       	adiw	r30, 0x26	; 38
    193c:	ce 01       	movw	r24, r28
    193e:	8e 96       	adiw	r24, 0x2e	; 46
        i=0;
        // zero out sequence number and acknowledgement number
        while(i<8){
                buf[TCP_SEQ_H_P+i]=0;
    1940:	11 92       	st	Z+, r1
        buf[TCP_DST_PORT_L_P]=(dstport&0xff);
        buf[TCP_SRC_PORT_H_P]=TCPCLIENT_SRC_PORT_H;
        buf[TCP_SRC_PORT_L_P]=srcport; // lower 8 bit of src port
        i=0;
        // zero out sequence number and acknowledgement number
        while(i<8){
    1942:	e8 17       	cp	r30, r24
    1944:	f9 07       	cpc	r31, r25
    1946:	e1 f7       	brne	.-8      	; 0x1940 <tcp_client_syn+0xc0>
        // -- header ready 
        // put inital seq number
        // we step only the second byte, this allows us to send packts 
        // with 255 bytes 512 (if we step the initial seqnum by 2)
        // or 765 (step by 3)
        buf[TCP_SEQ_H_P+2]= seqnum; 
    1948:	80 91 77 00 	lds	r24, 0x0077
    194c:	88 a7       	std	Y+40, r24	; 0x28
        // step the inititial seq num by something we will not use
        // during this tcp session:
        seqnum+=3;
    194e:	8d 5f       	subi	r24, 0xFD	; 253
    1950:	80 93 77 00 	sts	0x0077, r24
        buf[TCP_HEADER_LEN_P]=0x60; // 0x60=24 len: (0x60>>4) * 4
    1954:	80 e6       	ldi	r24, 0x60	; 96
    1956:	8e a7       	std	Y+46, r24	; 0x2e
        buf[TCP_FLAGS_P]=TCP_FLAGS_SYN_V;
    1958:	82 e0       	ldi	r24, 0x02	; 2
    195a:	8f a7       	std	Y+47, r24	; 0x2f
        // use a low window size otherwise we have to have
        // timers and can not just react on every packet.
        buf[TCP_WIN_SIZE]=0x3; // 1024=0x400 768=0x300, initial window
    195c:	93 e0       	ldi	r25, 0x03	; 3
    195e:	98 ab       	std	Y+48, r25	; 0x30
        buf[TCP_WIN_SIZE+1]=0x0;
    1960:	19 aa       	std	Y+49, r1	; 0x31
        // zero the checksum
        buf[TCP_CHECKSUM_H_P]=0;
    1962:	1a aa       	std	Y+50, r1	; 0x32
        buf[TCP_CHECKSUM_L_P]=0;
    1964:	1b aa       	std	Y+51, r1	; 0x33
        // urgent pointer
        buf[TCP_CHECKSUM_L_P+1]=0;
    1966:	1c aa       	std	Y+52, r1	; 0x34
        buf[TCP_CHECKSUM_L_P+2]=0;
    1968:	1d aa       	std	Y+53, r1	; 0x35
        // MSS= max IP len that we want to have:
        buf[TCP_OPTIONS_P]=2;
    196a:	8e ab       	std	Y+54, r24	; 0x36
        buf[TCP_OPTIONS_P+1]=4;
    196c:	94 e0       	ldi	r25, 0x04	; 4
    196e:	9f ab       	std	Y+55, r25	; 0x37
        buf[TCP_OPTIONS_P+2]=(CLIENTMSS>>8);
    1970:	88 af       	std	Y+56, r24	; 0x38
        buf[TCP_OPTIONS_P+3]=CLIENTMSS & 0xff;
    1972:	8e ee       	ldi	r24, 0xEE	; 238
    1974:	89 af       	std	Y+57, r24	; 0x39
        ck=checksum(&buf[IP_SRC_P], 8 +TCP_HEADER_LEN_PLAIN+4,2);
    1976:	42 e0       	ldi	r20, 0x02	; 2
    1978:	60 e2       	ldi	r22, 0x20	; 32
    197a:	70 e0       	ldi	r23, 0x00	; 0
    197c:	c8 01       	movw	r24, r16
    197e:	0e 94 a2 07 	call	0xf44	; 0xf44 <checksum>
        buf[TCP_CHECKSUM_H_P]=ck>>8;
    1982:	9a ab       	std	Y+50, r25	; 0x32
        buf[TCP_CHECKSUM_L_P]=ck& 0xff;
    1984:	8b ab       	std	Y+51, r24	; 0x33
        // 4 is the tcp mss option:
        enc28j60PacketSend(IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+ETH_HEADER_LEN+4,buf);
    1986:	be 01       	movw	r22, r28
    1988:	8a e3       	ldi	r24, 0x3A	; 58
    198a:	90 e0       	ldi	r25, 0x00	; 0
    198c:	0e 94 54 06 	call	0xca8	; 0xca8 <enc28j60PacketSend>
}
    1990:	df 91       	pop	r29
    1992:	cf 91       	pop	r28
    1994:	1f 91       	pop	r17
    1996:	0f 91       	pop	r16
    1998:	ff 90       	pop	r15
    199a:	ef 90       	pop	r14
    199c:	df 90       	pop	r13
    199e:	bf 90       	pop	r11
    19a0:	af 90       	pop	r10
    19a2:	08 95       	ret

000019a4 <client_tcp_req>:
//
// We use callback functions because that saves memory and a uC is very
// limited in memory
//
uint8_t client_tcp_req(uint8_t (*result_callback)(uint8_t fd,uint8_t statuscode,uint16_t data_start_pos_in_buf, uint16_t len_of_data),uint16_t (*datafill_callback)(uint8_t fd),uint16_t port,uint8_t *dstip,uint8_t *dstmac)
{
    19a4:	0f 93       	push	r16
    19a6:	1f 93       	push	r17
        uint8_t i=0;
        client_tcp_result_callback=result_callback;
    19a8:	90 93 82 03 	sts	0x0382, r25
    19ac:	80 93 81 03 	sts	0x0381, r24
        client_tcp_datafill_callback=datafill_callback;
    19b0:	70 93 80 03 	sts	0x0380, r23
    19b4:	60 93 7f 03 	sts	0x037F, r22
    19b8:	f9 01       	movw	r30, r18
    19ba:	ac e8       	ldi	r26, 0x8C	; 140
    19bc:	b3 e0       	ldi	r27, 0x03	; 3
    19be:	2c 5f       	subi	r18, 0xFC	; 252
    19c0:	3f 4f       	sbci	r19, 0xFF	; 255
        while(i<4){tcp_otherside_ip[i]=dstip[i];i++;}
    19c2:	81 91       	ld	r24, Z+
    19c4:	8d 93       	st	X+, r24
    19c6:	e2 17       	cp	r30, r18
    19c8:	f3 07       	cpc	r31, r19
    19ca:	d9 f7       	brne	.-10     	; 0x19c2 <client_tcp_req+0x1e>
    19cc:	f8 01       	movw	r30, r16
    19ce:	a6 e8       	ldi	r26, 0x86	; 134
    19d0:	b3 e0       	ldi	r27, 0x03	; 3
    19d2:	0a 5f       	subi	r16, 0xFA	; 250
    19d4:	1f 4f       	sbci	r17, 0xFF	; 255
        i=0;
        while(i<6){tcp_dst_mac[i]=dstmac[i];i++;}
    19d6:	81 91       	ld	r24, Z+
    19d8:	8d 93       	st	X+, r24
    19da:	e0 17       	cp	r30, r16
    19dc:	f1 07       	cpc	r31, r17
    19de:	d9 f7       	brne	.-10     	; 0x19d6 <client_tcp_req+0x32>
        tcp_client_port=port;
    19e0:	50 93 84 03 	sts	0x0384, r21
    19e4:	40 93 83 03 	sts	0x0383, r20
        tcp_client_state=1; // send a syn
    19e8:	81 e0       	ldi	r24, 0x01	; 1
    19ea:	80 93 85 03 	sts	0x0385, r24
        tcp_fd++;
    19ee:	80 91 90 03 	lds	r24, 0x0390
    19f2:	8f 5f       	subi	r24, 0xFF	; 255
        if (tcp_fd>7){
    19f4:	88 30       	cpi	r24, 0x08	; 8
    19f6:	18 f4       	brcc	.+6      	; 0x19fe <client_tcp_req+0x5a>
        while(i<4){tcp_otherside_ip[i]=dstip[i];i++;}
        i=0;
        while(i<6){tcp_dst_mac[i]=dstmac[i];i++;}
        tcp_client_port=port;
        tcp_client_state=1; // send a syn
        tcp_fd++;
    19f8:	80 93 90 03 	sts	0x0390, r24
    19fc:	02 c0       	rjmp	.+4      	; 0x1a02 <client_tcp_req+0x5e>
        if (tcp_fd>7){
                tcp_fd=0;
    19fe:	10 92 90 03 	sts	0x0390, r1
        }
        return(tcp_fd);
}
    1a02:	80 91 90 03 	lds	r24, 0x0390
    1a06:	1f 91       	pop	r17
    1a08:	0f 91       	pop	r16
    1a0a:	08 95       	ret

00001a0c <client_browse_url>:
// Basically 2xx is success and any 5xx, 4xx is a failure.
// The string buffers to which urlbuf_varpart and hoststr are pointing
// must not be changed until the callback is executed.
//
void client_browse_url(const char *urlbuf_p,char *urlbuf_varpart,const char *hoststr,void (*callback)(uint16_t,uint16_t,uint16_t),uint8_t *dstip,uint8_t *dstmac)
{
    1a0c:	6f 92       	push	r6
    1a0e:	7f 92       	push	r7
    1a10:	8f 92       	push	r8
    1a12:	9f 92       	push	r9
    1a14:	af 92       	push	r10
    1a16:	bf 92       	push	r11
    1a18:	cf 92       	push	r12
    1a1a:	df 92       	push	r13
    1a1c:	ef 92       	push	r14
    1a1e:	ff 92       	push	r15
    1a20:	0f 93       	push	r16
    1a22:	1f 93       	push	r17
    1a24:	cf 93       	push	r28
    1a26:	df 93       	push	r29
    1a28:	4c 01       	movw	r8, r24
    1a2a:	5b 01       	movw	r10, r22
    1a2c:	6a 01       	movw	r12, r20
    1a2e:	39 01       	movw	r6, r18
    1a30:	e8 01       	movw	r28, r16
        if (!enc28j60linkup())return;
    1a32:	0e 94 4d 06 	call	0xc9a	; 0xc9a <enc28j60linkup>
    1a36:	88 23       	and	r24, r24
    1a38:	f1 f0       	breq	.+60     	; 0x1a76 <client_browse_url+0x6a>
        client_urlbuf_p=urlbuf_p;
    1a3a:	90 92 76 03 	sts	0x0376, r9
    1a3e:	80 92 75 03 	sts	0x0375, r8
        client_urlbuf_var=urlbuf_varpart;
    1a42:	b0 92 74 03 	sts	0x0374, r11
    1a46:	a0 92 73 03 	sts	0x0373, r10
        client_hoststr=hoststr;
    1a4a:	d0 92 72 03 	sts	0x0372, r13
    1a4e:	c0 92 71 03 	sts	0x0371, r12
        browsertype=0;
    1a52:	10 92 7d 03 	sts	0x037D, r1
        client_browser_callback=callback;
    1a56:	70 92 7c 03 	sts	0x037C, r7
    1a5a:	60 92 7b 03 	sts	0x037B, r6
        www_fd=client_tcp_req(&www_client_internal_result_callback,&www_client_internal_datafill_callback,80,dstip,dstmac);
    1a5e:	87 01       	movw	r16, r14
    1a60:	9e 01       	movw	r18, r28
    1a62:	40 e5       	ldi	r20, 0x50	; 80
    1a64:	50 e0       	ldi	r21, 0x00	; 0
    1a66:	61 ea       	ldi	r22, 0xA1	; 161
    1a68:	79 e0       	ldi	r23, 0x09	; 9
    1a6a:	80 e2       	ldi	r24, 0x20	; 32
    1a6c:	97 e0       	ldi	r25, 0x07	; 7
    1a6e:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <client_tcp_req>
    1a72:	80 93 7e 03 	sts	0x037E, r24
}
    1a76:	df 91       	pop	r29
    1a78:	cf 91       	pop	r28
    1a7a:	1f 91       	pop	r17
    1a7c:	0f 91       	pop	r16
    1a7e:	ff 90       	pop	r15
    1a80:	ef 90       	pop	r14
    1a82:	df 90       	pop	r13
    1a84:	cf 90       	pop	r12
    1a86:	bf 90       	pop	r11
    1a88:	af 90       	pop	r10
    1a8a:	9f 90       	pop	r9
    1a8c:	8f 90       	pop	r8
    1a8e:	7f 90       	pop	r7
    1a90:	6f 90       	pop	r6
    1a92:	08 95       	ret

00001a94 <register_ping_rec_callback>:
}
#endif // WWW_client

void register_ping_rec_callback(void (*callback)(uint8_t *srcip))
{
        icmp_callback=callback;
    1a94:	90 93 92 03 	sts	0x0392, r25
    1a98:	80 93 91 03 	sts	0x0391, r24
    1a9c:	08 95       	ret

00001a9e <packetloop_arp_icmp_tcp>:


// return 0 to just continue in the packet loop and return the position 
// of the tcp data if there is tcp data part
uint16_t packetloop_arp_icmp_tcp(uint8_t *buf,uint16_t plen)
{
    1a9e:	df 92       	push	r13
    1aa0:	ef 92       	push	r14
    1aa2:	ff 92       	push	r15
    1aa4:	0f 93       	push	r16
    1aa6:	1f 93       	push	r17
    1aa8:	cf 93       	push	r28
    1aaa:	df 93       	push	r29
    1aac:	8c 01       	movw	r16, r24
    1aae:	eb 01       	movw	r28, r22
        uint16_t save_len;
#endif
#ifdef ARP_MAC_resolver_client
        //plen will be unequal to zero if there is a valid 
        // packet (without crc error):
        if(plen==0){
    1ab0:	20 97       	sbiw	r28, 0x00	; 0
    1ab2:	09 f0       	breq	.+2      	; 0x1ab6 <packetloop_arp_icmp_tcp+0x18>
    1ab4:	56 c0       	rjmp	.+172    	; 0x1b62 <packetloop_arp_icmp_tcp+0xc4>
                if (arpip_state == (WGW_ACCEPT_ARP_REPLY|WGW_INITIAL_ARP) && arp_delaycnt==0 ){
    1ab6:	80 91 6a 03 	lds	r24, 0x036A
    1aba:	89 30       	cpi	r24, 0x09	; 9
    1abc:	79 f4       	brne	.+30     	; 0x1adc <packetloop_arp_icmp_tcp+0x3e>
    1abe:	80 91 74 00 	lds	r24, 0x0074
    1ac2:	90 91 75 00 	lds	r25, 0x0075
    1ac6:	89 2b       	or	r24, r25
    1ac8:	f9 f4       	brne	.+62     	; 0x1b08 <packetloop_arp_icmp_tcp+0x6a>
                        // arp_delaycnt has wrapped no arp reply yet
                        if (enc28j60linkup()) client_arp_whohas(buf,arpip);
    1aca:	0e 94 4d 06 	call	0xc9a	; 0xc9a <enc28j60linkup>
    1ace:	88 23       	and	r24, r24
    1ad0:	29 f0       	breq	.+10     	; 0x1adc <packetloop_arp_icmp_tcp+0x3e>
    1ad2:	6b e6       	ldi	r22, 0x6B	; 107
    1ad4:	73 e0       	ldi	r23, 0x03	; 3
    1ad6:	c8 01       	movw	r24, r16
    1ad8:	0e 94 ca 0b 	call	0x1794	; 0x1794 <client_arp_whohas>
                }
                if (arpip_state == WGW_INITIAL_ARP && enc28j60linkup()){
    1adc:	80 91 6a 03 	lds	r24, 0x036A
    1ae0:	81 30       	cpi	r24, 0x01	; 1
    1ae2:	91 f4       	brne	.+36     	; 0x1b08 <packetloop_arp_icmp_tcp+0x6a>
    1ae4:	0e 94 4d 06 	call	0xc9a	; 0xc9a <enc28j60linkup>
    1ae8:	88 23       	and	r24, r24
    1aea:	71 f0       	breq	.+28     	; 0x1b08 <packetloop_arp_icmp_tcp+0x6a>
                        client_arp_whohas(buf,arpip);
    1aec:	6b e6       	ldi	r22, 0x6B	; 107
    1aee:	73 e0       	ldi	r23, 0x03	; 3
    1af0:	c8 01       	movw	r24, r16
    1af2:	0e 94 ca 0b 	call	0x1794	; 0x1794 <client_arp_whohas>
                        arpip_state|=WGW_ACCEPT_ARP_REPLY; // WGW_INITIAL_ARP and WGW_ACCEPT_ARP_REPLY set
    1af6:	80 91 6a 03 	lds	r24, 0x036A
    1afa:	88 60       	ori	r24, 0x08	; 8
    1afc:	80 93 6a 03 	sts	0x036A, r24
                        arp_delaycnt=0; // this is like a timer, not so precise but good enough, it wraps in about 2 sec
    1b00:	10 92 75 00 	sts	0x0075, r1
    1b04:	10 92 74 00 	sts	0x0074, r1
                }
                arp_delaycnt++;
    1b08:	80 91 74 00 	lds	r24, 0x0074
    1b0c:	90 91 75 00 	lds	r25, 0x0075
    1b10:	01 96       	adiw	r24, 0x01	; 1
    1b12:	90 93 75 00 	sts	0x0075, r25
    1b16:	80 93 74 00 	sts	0x0074, r24
#if defined (TCP_client)
                if (tcp_client_state==1 && enc28j60linkup()){ // send a syn
    1b1a:	80 91 85 03 	lds	r24, 0x0385
    1b1e:	81 30       	cpi	r24, 0x01	; 1
    1b20:	09 f0       	breq	.+2      	; 0x1b24 <packetloop_arp_icmp_tcp+0x86>
    1b22:	a8 c1       	rjmp	.+848    	; 0x1e74 <packetloop_arp_icmp_tcp+0x3d6>
    1b24:	0e 94 4d 06 	call	0xc9a	; 0xc9a <enc28j60linkup>
    1b28:	88 23       	and	r24, r24
    1b2a:	09 f4       	brne	.+2      	; 0x1b2e <packetloop_arp_icmp_tcp+0x90>
    1b2c:	a6 c1       	rjmp	.+844    	; 0x1e7a <packetloop_arp_icmp_tcp+0x3dc>
                        tcp_client_state=2;
    1b2e:	82 e0       	ldi	r24, 0x02	; 2
    1b30:	80 93 85 03 	sts	0x0385, r24
                        tcpclient_src_port_l++; // allocate a new port
    1b34:	60 91 76 00 	lds	r22, 0x0076
    1b38:	6f 5f       	subi	r22, 0xFF	; 255
    1b3a:	60 93 76 00 	sts	0x0076, r22
                        // we encode our 3 bit fd into the src port this
                        // way we get it back in every message that comes
                        // from the server:
                        tcp_client_syn(buf,((tcp_fd<<5) | (0x1f & tcpclient_src_port_l)),tcp_client_port);
    1b3e:	40 91 83 03 	lds	r20, 0x0383
    1b42:	50 91 84 03 	lds	r21, 0x0384
    1b46:	6f 71       	andi	r22, 0x1F	; 31
    1b48:	80 91 90 03 	lds	r24, 0x0390
    1b4c:	20 e2       	ldi	r18, 0x20	; 32
    1b4e:	82 9f       	mul	r24, r18
    1b50:	c0 01       	movw	r24, r0
    1b52:	11 24       	eor	r1, r1
    1b54:	68 2b       	or	r22, r24
    1b56:	c8 01       	movw	r24, r16
    1b58:	0e 94 40 0c 	call	0x1880	; 0x1880 <tcp_client_syn>
                }
#endif
                return(0);
    1b5c:	e1 2c       	mov	r14, r1
    1b5e:	f1 2c       	mov	r15, r1
    1b60:	c0 c1       	rjmp	.+896    	; 0x1ee2 <packetloop_arp_icmp_tcp+0x444>
        }
#endif // ARP_MAC_resolver_client
        // arp is broadcast if unknown but a host may also
        // verify the mac address by sending it to 
        // a unicast address.
        if(eth_type_is_arp_and_my_ip(buf,plen)){
    1b62:	0e 94 42 08 	call	0x1084	; 0x1084 <eth_type_is_arp_and_my_ip>
    1b66:	88 23       	and	r24, r24
    1b68:	71 f1       	breq	.+92     	; 0x1bc6 <packetloop_arp_icmp_tcp+0x128>
                if (buf[ETH_ARP_OPCODE_L_P]==ETH_ARP_OPCODE_REQ_L_V){
    1b6a:	d8 01       	movw	r26, r16
    1b6c:	55 96       	adiw	r26, 0x15	; 21
    1b6e:	8c 91       	ld	r24, X
    1b70:	81 30       	cpi	r24, 0x01	; 1
    1b72:	19 f4       	brne	.+6      	; 0x1b7a <packetloop_arp_icmp_tcp+0xdc>
                        // is it an arp request 
                        make_arp_answer_from_request(buf);
    1b74:	c8 01       	movw	r24, r16
    1b76:	0e 94 fe 08 	call	0x11fc	; 0x11fc <make_arp_answer_from_request>
                }
#ifdef ARP_MAC_resolver_client
                if ((arpip_state & WGW_ACCEPT_ARP_REPLY) && (buf[ETH_ARP_OPCODE_L_P]==ETH_ARP_OPCODE_REPLY_L_V)){
    1b7a:	80 91 6a 03 	lds	r24, 0x036A
    1b7e:	83 ff       	sbrs	r24, 3
    1b80:	7f c1       	rjmp	.+766    	; 0x1e80 <packetloop_arp_icmp_tcp+0x3e2>
    1b82:	f8 01       	movw	r30, r16
    1b84:	85 89       	ldd	r24, Z+21	; 0x15
    1b86:	82 30       	cpi	r24, 0x02	; 2
    1b88:	09 f0       	breq	.+2      	; 0x1b8c <packetloop_arp_icmp_tcp+0xee>
    1b8a:	7d c1       	rjmp	.+762    	; 0x1e86 <packetloop_arp_icmp_tcp+0x3e8>
                        // is it an arp reply 
                        if (memcmp(&buf[ETH_ARP_SRC_IP_P],arpip,4)!=0) return(0); // not an arp reply for the IP we were searching           
    1b8c:	44 e0       	ldi	r20, 0x04	; 4
    1b8e:	50 e0       	ldi	r21, 0x00	; 0
    1b90:	6b e6       	ldi	r22, 0x6B	; 107
    1b92:	73 e0       	ldi	r23, 0x03	; 3
    1b94:	c8 01       	movw	r24, r16
    1b96:	4c 96       	adiw	r24, 0x1c	; 28
    1b98:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <memcmp>
    1b9c:	89 2b       	or	r24, r25
    1b9e:	09 f0       	breq	.+2      	; 0x1ba2 <packetloop_arp_icmp_tcp+0x104>
    1ba0:	75 c1       	rjmp	.+746    	; 0x1e8c <packetloop_arp_icmp_tcp+0x3ee>
                        (*client_arp_result_callback)(arpip,arp_reference_number,buf+ETH_ARP_SRC_MAC_P);
    1ba2:	a8 01       	movw	r20, r16
    1ba4:	4a 5e       	subi	r20, 0xEA	; 234
    1ba6:	5f 4f       	sbci	r21, 0xFF	; 255
    1ba8:	e0 91 9d 03 	lds	r30, 0x039D
    1bac:	f0 91 9e 03 	lds	r31, 0x039E
    1bb0:	60 91 69 03 	lds	r22, 0x0369
    1bb4:	8b e6       	ldi	r24, 0x6B	; 107
    1bb6:	93 e0       	ldi	r25, 0x03	; 3
    1bb8:	09 95       	icall
                        arpip_state=WGW_HAVE_MAC;
    1bba:	82 e0       	ldi	r24, 0x02	; 2
    1bbc:	80 93 6a 03 	sts	0x036A, r24
                }
#endif // ARP_MAC_resolver_client
                return(0);
    1bc0:	e1 2c       	mov	r14, r1
    1bc2:	f1 2c       	mov	r15, r1
    1bc4:	8e c1       	rjmp	.+796    	; 0x1ee2 <packetloop_arp_icmp_tcp+0x444>

        }
        // check if ip packets are for us:
        if(eth_type_is_ip_and_my_ip(buf,plen)==0){
    1bc6:	be 01       	movw	r22, r28
    1bc8:	c8 01       	movw	r24, r16
    1bca:	0e 94 68 08 	call	0x10d0	; 0x10d0 <eth_type_is_ip_and_my_ip>
    1bce:	88 23       	and	r24, r24
    1bd0:	09 f4       	brne	.+2      	; 0x1bd4 <packetloop_arp_icmp_tcp+0x136>
    1bd2:	5f c1       	rjmp	.+702    	; 0x1e92 <packetloop_arp_icmp_tcp+0x3f4>
                return(0);
        }
        if(buf[IP_PROTO_P]==IP_PROTO_ICMP_V && buf[ICMP_TYPE_P]==ICMP_TYPE_ECHOREQUEST_V){
    1bd4:	d8 01       	movw	r26, r16
    1bd6:	57 96       	adiw	r26, 0x17	; 23
    1bd8:	8c 91       	ld	r24, X
    1bda:	57 97       	sbiw	r26, 0x17	; 23
    1bdc:	81 30       	cpi	r24, 0x01	; 1
    1bde:	a9 f4       	brne	.+42     	; 0x1c0a <packetloop_arp_icmp_tcp+0x16c>
    1be0:	92 96       	adiw	r26, 0x22	; 34
    1be2:	8c 91       	ld	r24, X
    1be4:	88 30       	cpi	r24, 0x08	; 8
    1be6:	09 f0       	breq	.+2      	; 0x1bea <packetloop_arp_icmp_tcp+0x14c>
    1be8:	57 c1       	rjmp	.+686    	; 0x1e98 <packetloop_arp_icmp_tcp+0x3fa>
                if (icmp_callback){
    1bea:	e0 91 91 03 	lds	r30, 0x0391
    1bee:	f0 91 92 03 	lds	r31, 0x0392
    1bf2:	30 97       	sbiw	r30, 0x00	; 0
    1bf4:	19 f0       	breq	.+6      	; 0x1bfc <packetloop_arp_icmp_tcp+0x15e>
                        (*icmp_callback)(&(buf[IP_SRC_P]));
    1bf6:	c8 01       	movw	r24, r16
    1bf8:	4a 96       	adiw	r24, 0x1a	; 26
    1bfa:	09 95       	icall
                }
                // a ping packet, let's send pong
                make_echo_reply_from_request(buf,plen);
    1bfc:	be 01       	movw	r22, r28
    1bfe:	c8 01       	movw	r24, r16
    1c00:	0e 94 35 09 	call	0x126a	; 0x126a <make_echo_reply_from_request>
                return(0);
    1c04:	e1 2c       	mov	r14, r1
    1c06:	f1 2c       	mov	r15, r1
    1c08:	6c c1       	rjmp	.+728    	; 0x1ee2 <packetloop_arp_icmp_tcp+0x444>
        }
        // this is an important check to avoid working on the wrong packets:
        if (plen<54 || buf[IP_PROTO_P]!=IP_PROTO_TCP_V ){
    1c0a:	c6 33       	cpi	r28, 0x36	; 54
    1c0c:	d1 05       	cpc	r29, r1
    1c0e:	08 f4       	brcc	.+2      	; 0x1c12 <packetloop_arp_icmp_tcp+0x174>
    1c10:	46 c1       	rjmp	.+652    	; 0x1e9e <packetloop_arp_icmp_tcp+0x400>
    1c12:	86 30       	cpi	r24, 0x06	; 6
    1c14:	09 f0       	breq	.+2      	; 0x1c18 <packetloop_arp_icmp_tcp+0x17a>
    1c16:	46 c1       	rjmp	.+652    	; 0x1ea4 <packetloop_arp_icmp_tcp+0x406>
                // smaller than the smallest TCP packet (TCP packet with no options section) or not tcp port
                return(0);
        }
#if defined (TCP_client)
        // a message for the tcp client, tcp_client_state is zero if client was never used
        if ( buf[TCP_DST_PORT_H_P]==TCPCLIENT_SRC_PORT_H){
    1c18:	f8 01       	movw	r30, r16
    1c1a:	84 a1       	ldd	r24, Z+36	; 0x24
    1c1c:	8b 30       	cpi	r24, 0x0B	; 11
    1c1e:	09 f0       	breq	.+2      	; 0x1c22 <packetloop_arp_icmp_tcp+0x184>
    1c20:	f0 c0       	rjmp	.+480    	; 0x1e02 <packetloop_arp_icmp_tcp+0x364>
#if defined (WWW_client)
                // workaround to pass pointer to www_client_internal..
                bufptr=buf; 
    1c22:	10 93 70 03 	sts	0x0370, r17
    1c26:	00 93 6f 03 	sts	0x036F, r16
#endif // WWW_client
                if (check_ip_message_is_from(buf,tcp_otherside_ip)==0){
    1c2a:	6c e8       	ldi	r22, 0x8C	; 140
    1c2c:	73 e0       	ldi	r23, 0x03	; 3
    1c2e:	c8 01       	movw	r24, r16
    1c30:	0e 94 2b 08 	call	0x1056	; 0x1056 <check_ip_message_is_from>
    1c34:	88 23       	and	r24, r24
    1c36:	09 f4       	brne	.+2      	; 0x1c3a <packetloop_arp_icmp_tcp+0x19c>
    1c38:	38 c1       	rjmp	.+624    	; 0x1eaa <packetloop_arp_icmp_tcp+0x40c>
                        return(0);
                }
                // if we get a reset:
                if (buf[TCP_FLAGS_P] & TCP_FLAGS_RST_V){
    1c3a:	d8 01       	movw	r26, r16
    1c3c:	9f 96       	adiw	r26, 0x2f	; 47
    1c3e:	dc 90       	ld	r13, X
    1c40:	9f 97       	sbiw	r26, 0x2f	; 47
    1c42:	d2 fe       	sbrs	r13, 2
    1c44:	17 c0       	rjmp	.+46     	; 0x1c74 <packetloop_arp_icmp_tcp+0x1d6>
                        if (client_tcp_result_callback){
    1c46:	e0 91 81 03 	lds	r30, 0x0381
    1c4a:	f0 91 82 03 	lds	r31, 0x0382
    1c4e:	30 97       	sbiw	r30, 0x00	; 0
    1c50:	59 f0       	breq	.+22     	; 0x1c68 <packetloop_arp_icmp_tcp+0x1ca>
                                // parameters in client_tcp_result_callback: fd, status, buf_start, len
                                (*client_tcp_result_callback)((buf[TCP_DST_PORT_L_P]>>5)&0x7,3,0,0);
    1c52:	95 96       	adiw	r26, 0x25	; 37
    1c54:	8c 91       	ld	r24, X
    1c56:	20 e0       	ldi	r18, 0x00	; 0
    1c58:	30 e0       	ldi	r19, 0x00	; 0
    1c5a:	40 e0       	ldi	r20, 0x00	; 0
    1c5c:	50 e0       	ldi	r21, 0x00	; 0
    1c5e:	63 e0       	ldi	r22, 0x03	; 3
    1c60:	82 95       	swap	r24
    1c62:	86 95       	lsr	r24
    1c64:	87 70       	andi	r24, 0x07	; 7
    1c66:	09 95       	icall
                        }
                        tcp_client_state=6;
    1c68:	86 e0       	ldi	r24, 0x06	; 6
    1c6a:	80 93 85 03 	sts	0x0385, r24
                        return(0);
    1c6e:	e1 2c       	mov	r14, r1
    1c70:	f1 2c       	mov	r15, r1
    1c72:	37 c1       	rjmp	.+622    	; 0x1ee2 <packetloop_arp_icmp_tcp+0x444>
                }
                len=get_tcp_data_len(buf);
    1c74:	c8 01       	movw	r24, r16
    1c76:	0e 94 52 09 	call	0x12a4	; 0x12a4 <get_tcp_data_len>
    1c7a:	7c 01       	movw	r14, r24
                if (tcp_client_state==2){
    1c7c:	80 91 85 03 	lds	r24, 0x0385
    1c80:	82 30       	cpi	r24, 0x02	; 2
    1c82:	d9 f5       	brne	.+118    	; 0x1cfa <packetloop_arp_icmp_tcp+0x25c>
                        if ((buf[TCP_FLAGS_P] & TCP_FLAGS_SYN_V) && (buf[TCP_FLAGS_P] &TCP_FLAGS_ACK_V)){
    1c84:	9d 2d       	mov	r25, r13
    1c86:	90 71       	andi	r25, 0x10	; 16
    1c88:	8d 2d       	mov	r24, r13
    1c8a:	82 71       	andi	r24, 0x12	; 18
    1c8c:	82 31       	cpi	r24, 0x12	; 18
    1c8e:	19 f5       	brne	.+70     	; 0x1cd6 <packetloop_arp_icmp_tcp+0x238>
                                // synack, answer with ack
                                make_tcp_ack_from_any(buf,0,0);
    1c90:	40 e0       	ldi	r20, 0x00	; 0
    1c92:	60 e0       	ldi	r22, 0x00	; 0
    1c94:	70 e0       	ldi	r23, 0x00	; 0
    1c96:	c8 01       	movw	r24, r16
    1c98:	0e 94 66 0a 	call	0x14cc	; 0x14cc <make_tcp_ack_from_any>
                                buf[TCP_FLAGS_P]=TCP_FLAGS_ACK_V|TCP_FLAGS_PUSH_V;
    1c9c:	88 e1       	ldi	r24, 0x18	; 24
    1c9e:	f8 01       	movw	r30, r16
    1ca0:	87 a7       	std	Z+47, r24	; 0x2f

                                // Make a tcp message with data. When calling this function we must
                                // still have a valid tcp-ack in the buffer. In other words
                                // you have just called make_tcp_ack_from_any(buf,0).
                                if (client_tcp_datafill_callback){
    1ca2:	e0 91 7f 03 	lds	r30, 0x037F
    1ca6:	f0 91 80 03 	lds	r31, 0x0380
    1caa:	30 97       	sbiw	r30, 0x00	; 0
    1cac:	41 f0       	breq	.+16     	; 0x1cbe <packetloop_arp_icmp_tcp+0x220>
                                        // in this case it is src port because the above 
                                        // make_tcp_ack_from_any swaps the dst and src port:
                                        len=(*client_tcp_datafill_callback)((buf[TCP_SRC_PORT_L_P]>>5)&0x7);
    1cae:	d8 01       	movw	r26, r16
    1cb0:	93 96       	adiw	r26, 0x23	; 35
    1cb2:	8c 91       	ld	r24, X
    1cb4:	82 95       	swap	r24
    1cb6:	86 95       	lsr	r24
    1cb8:	87 70       	andi	r24, 0x07	; 7
    1cba:	09 95       	icall
    1cbc:	02 c0       	rjmp	.+4      	; 0x1cc2 <packetloop_arp_icmp_tcp+0x224>
                                }else{
                                        // this is just to prevent a crash
                                        len=0;
    1cbe:	80 e0       	ldi	r24, 0x00	; 0
    1cc0:	90 e0       	ldi	r25, 0x00	; 0
                                }
                                tcp_client_state=3;
    1cc2:	23 e0       	ldi	r18, 0x03	; 3
    1cc4:	20 93 85 03 	sts	0x0385, r18
                                make_tcp_ack_with_data_noflags(buf,len);
    1cc8:	bc 01       	movw	r22, r24
    1cca:	c8 01       	movw	r24, r16
    1ccc:	0e 94 a3 0a 	call	0x1546	; 0x1546 <make_tcp_ack_with_data_noflags>
                                return(0);
    1cd0:	e1 2c       	mov	r14, r1
    1cd2:	f1 2c       	mov	r15, r1
    1cd4:	06 c1       	rjmp	.+524    	; 0x1ee2 <packetloop_arp_icmp_tcp+0x444>
                        }else{
                                // reset only if we have sent a syn and don't get syn-ack back.
                                // If we connect to a non listen port then we get a RST
                                // which will be handeled above. In other words there is
                                // normally no danger for an endless loop.
                                tcp_client_state=1; // retry
    1cd6:	81 e0       	ldi	r24, 0x01	; 1
    1cd8:	80 93 85 03 	sts	0x0385, r24
                                // do not inform application layer as we retry.
                                len++;
                                if (buf[TCP_FLAGS_P] & TCP_FLAGS_ACK_V){
    1cdc:	91 11       	cpse	r25, r1
    1cde:	04 c0       	rjmp	.+8      	; 0x1ce8 <packetloop_arp_icmp_tcp+0x24a>
                                // If we connect to a non listen port then we get a RST
                                // which will be handeled above. In other words there is
                                // normally no danger for an endless loop.
                                tcp_client_state=1; // retry
                                // do not inform application layer as we retry.
                                len++;
    1ce0:	b7 01       	movw	r22, r14
    1ce2:	6f 5f       	subi	r22, 0xFF	; 255
    1ce4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ce6:	02 c0       	rjmp	.+4      	; 0x1cec <packetloop_arp_icmp_tcp+0x24e>
                                if (buf[TCP_FLAGS_P] & TCP_FLAGS_ACK_V){
                                        // if packet was an ack then do not step the ack number
                                        len=0;
    1ce8:	60 e0       	ldi	r22, 0x00	; 0
    1cea:	70 e0       	ldi	r23, 0x00	; 0
                                }
                                // refuse and reset the connection
                                make_tcp_ack_from_any(buf,len,TCP_FLAGS_RST_V);
    1cec:	44 e0       	ldi	r20, 0x04	; 4
    1cee:	c8 01       	movw	r24, r16
    1cf0:	0e 94 66 0a 	call	0x14cc	; 0x14cc <make_tcp_ack_from_any>
                                return(0);
    1cf4:	e1 2c       	mov	r14, r1
    1cf6:	f1 2c       	mov	r15, r1
    1cf8:	f4 c0       	rjmp	.+488    	; 0x1ee2 <packetloop_arp_icmp_tcp+0x444>
                        }
                }
                // in tcp_client_state==3 we will normally first get an empty
                // ack-packet and then a ack-packet with data.
                if (tcp_client_state==3 && len>0){ 
    1cfa:	83 30       	cpi	r24, 0x03	; 3
    1cfc:	09 f0       	breq	.+2      	; 0x1d00 <packetloop_arp_icmp_tcp+0x262>
    1cfe:	3f c0       	rjmp	.+126    	; 0x1d7e <packetloop_arp_icmp_tcp+0x2e0>
    1d00:	e1 14       	cp	r14, r1
    1d02:	f1 04       	cpc	r15, r1
    1d04:	09 f4       	brne	.+2      	; 0x1d08 <packetloop_arp_icmp_tcp+0x26a>
    1d06:	e6 c0       	rjmp	.+460    	; 0x1ed4 <packetloop_arp_icmp_tcp+0x436>
                        // our first real data packet
                        tcp_client_state=4;
    1d08:	84 e0       	ldi	r24, 0x04	; 4
    1d0a:	80 93 85 03 	sts	0x0385, r24
                        // return the data we received
                        if (client_tcp_result_callback){
    1d0e:	e0 91 81 03 	lds	r30, 0x0381
    1d12:	f0 91 82 03 	lds	r31, 0x0382
    1d16:	30 97       	sbiw	r30, 0x00	; 0
    1d18:	09 f4       	brne	.+2      	; 0x1d1c <packetloop_arp_icmp_tcp+0x27e>
    1d1a:	56 c0       	rjmp	.+172    	; 0x1dc8 <packetloop_arp_icmp_tcp+0x32a>
                                tcpstart=TCP_DATA_START; // TCP_DATA_START is a formula
    1d1c:	d8 01       	movw	r26, r16
    1d1e:	9e 96       	adiw	r26, 0x2e	; 46
    1d20:	4c 91       	ld	r20, X
    1d22:	42 95       	swap	r20
    1d24:	4f 70       	andi	r20, 0x0F	; 15
    1d26:	b4 e0       	ldi	r27, 0x04	; 4
    1d28:	4b 9f       	mul	r20, r27
    1d2a:	a0 01       	movw	r20, r0
    1d2c:	11 24       	eor	r1, r1
                                // out of buffer bounds check, needed in case of fragmented IP packets
                                if (tcpstart>plen-8){
    1d2e:	ce 01       	movw	r24, r28
    1d30:	08 97       	sbiw	r24, 0x08	; 8
    1d32:	4e 5d       	subi	r20, 0xDE	; 222
    1d34:	5f 4f       	sbci	r21, 0xFF	; 255
    1d36:	84 17       	cp	r24, r20
    1d38:	95 07       	cpc	r25, r21
    1d3a:	08 f4       	brcc	.+2      	; 0x1d3e <packetloop_arp_icmp_tcp+0x2a0>
    1d3c:	ac 01       	movw	r20, r24
                                        tcpstart=plen-8; // dummy but save
                                }
                                save_len=len;
                                if (tcpstart+len>plen){
    1d3e:	c7 01       	movw	r24, r14
    1d40:	84 0f       	add	r24, r20
    1d42:	95 1f       	adc	r25, r21
    1d44:	c8 17       	cp	r28, r24
    1d46:	d9 07       	cpc	r29, r25
    1d48:	20 f4       	brcc	.+8      	; 0x1d52 <packetloop_arp_icmp_tcp+0x2b4>
                                        save_len=plen-tcpstart;
    1d4a:	9e 01       	movw	r18, r28
    1d4c:	24 1b       	sub	r18, r20
    1d4e:	35 0b       	sbc	r19, r21
    1d50:	01 c0       	rjmp	.+2      	; 0x1d54 <packetloop_arp_icmp_tcp+0x2b6>
                                tcpstart=TCP_DATA_START; // TCP_DATA_START is a formula
                                // out of buffer bounds check, needed in case of fragmented IP packets
                                if (tcpstart>plen-8){
                                        tcpstart=plen-8; // dummy but save
                                }
                                save_len=len;
    1d52:	97 01       	movw	r18, r14
                                if (tcpstart+len>plen){
                                        save_len=plen-tcpstart;
                                }
                                send_fin=(*client_tcp_result_callback)((buf[TCP_DST_PORT_L_P]>>5)&0x7,0,tcpstart,save_len);
    1d54:	d8 01       	movw	r26, r16
    1d56:	95 96       	adiw	r26, 0x25	; 37
    1d58:	8c 91       	ld	r24, X
    1d5a:	60 e0       	ldi	r22, 0x00	; 0
    1d5c:	82 95       	swap	r24
    1d5e:	86 95       	lsr	r24
    1d60:	87 70       	andi	r24, 0x07	; 7
    1d62:	09 95       	icall
                        }
                        if (send_fin){
    1d64:	88 23       	and	r24, r24
    1d66:	59 f0       	breq	.+22     	; 0x1d7e <packetloop_arp_icmp_tcp+0x2e0>
                                make_tcp_ack_from_any(buf,len,TCP_FLAGS_PUSH_V|TCP_FLAGS_FIN_V);
    1d68:	49 e0       	ldi	r20, 0x09	; 9
    1d6a:	b7 01       	movw	r22, r14
    1d6c:	c8 01       	movw	r24, r16
    1d6e:	0e 94 66 0a 	call	0x14cc	; 0x14cc <make_tcp_ack_from_any>
                                tcp_client_state=5;
    1d72:	85 e0       	ldi	r24, 0x05	; 5
    1d74:	80 93 85 03 	sts	0x0385, r24
                                return(0);
    1d78:	e1 2c       	mov	r14, r1
    1d7a:	f1 2c       	mov	r15, r1
    1d7c:	b2 c0       	rjmp	.+356    	; 0x1ee2 <packetloop_arp_icmp_tcp+0x444>
                        }
                }
                if(tcp_client_state==5){
    1d7e:	80 91 85 03 	lds	r24, 0x0385
    1d82:	85 30       	cpi	r24, 0x05	; 5
    1d84:	51 f4       	brne	.+20     	; 0x1d9a <packetloop_arp_icmp_tcp+0x2fc>
                        // we get one more final ack to our fin-ack:
                        if (buf[TCP_FLAGS_P] & TCP_FLAGS_ACK_V){
    1d86:	f8 01       	movw	r30, r16
    1d88:	87 a5       	ldd	r24, Z+47	; 0x2f
    1d8a:	84 ff       	sbrs	r24, 4
    1d8c:	91 c0       	rjmp	.+290    	; 0x1eb0 <packetloop_arp_icmp_tcp+0x412>
                                tcp_client_state=6; // in state 6 communication should be finished
    1d8e:	86 e0       	ldi	r24, 0x06	; 6
    1d90:	80 93 85 03 	sts	0x0385, r24
                        }
                        return(0);
    1d94:	e1 2c       	mov	r14, r1
    1d96:	f1 2c       	mov	r15, r1
    1d98:	a4 c0       	rjmp	.+328    	; 0x1ee2 <packetloop_arp_icmp_tcp+0x444>
                }
                if(tcp_client_state==6){
    1d9a:	86 30       	cpi	r24, 0x06	; 6
    1d9c:	a9 f4       	brne	.+42     	; 0x1dc8 <packetloop_arp_icmp_tcp+0x32a>
                        // something wrong, can't deal with this, reset the connection
                        len++;
                        if (buf[TCP_FLAGS_P] & TCP_FLAGS_ACK_V) len=0; // if packet was an ack then do not step the ack number
    1d9e:	d8 01       	movw	r26, r16
    1da0:	9f 96       	adiw	r26, 0x2f	; 47
    1da2:	8c 91       	ld	r24, X
    1da4:	84 fd       	sbrc	r24, 4
    1da6:	04 c0       	rjmp	.+8      	; 0x1db0 <packetloop_arp_icmp_tcp+0x312>
                        }
                        return(0);
                }
                if(tcp_client_state==6){
                        // something wrong, can't deal with this, reset the connection
                        len++;
    1da8:	b7 01       	movw	r22, r14
    1daa:	6f 5f       	subi	r22, 0xFF	; 255
    1dac:	7f 4f       	sbci	r23, 0xFF	; 255
    1dae:	02 c0       	rjmp	.+4      	; 0x1db4 <packetloop_arp_icmp_tcp+0x316>
                        if (buf[TCP_FLAGS_P] & TCP_FLAGS_ACK_V) len=0; // if packet was an ack then do not step the ack number
    1db0:	60 e0       	ldi	r22, 0x00	; 0
    1db2:	70 e0       	ldi	r23, 0x00	; 0
                        make_tcp_ack_from_any(buf,len,TCP_FLAGS_RST_V);
    1db4:	44 e0       	ldi	r20, 0x04	; 4
    1db6:	c8 01       	movw	r24, r16
    1db8:	0e 94 66 0a 	call	0x14cc	; 0x14cc <make_tcp_ack_from_any>
                        // just a single reset, do not repeat if more messages:
                        tcp_client_state=7;
    1dbc:	87 e0       	ldi	r24, 0x07	; 7
    1dbe:	80 93 85 03 	sts	0x0385, r24
                        return(0);
    1dc2:	e1 2c       	mov	r14, r1
    1dc4:	f1 2c       	mov	r15, r1
    1dc6:	8d c0       	rjmp	.+282    	; 0x1ee2 <packetloop_arp_icmp_tcp+0x444>
                }
                if (buf[TCP_FLAGS_P] & TCP_FLAGS_FIN_V){
    1dc8:	f8 01       	movw	r30, r16
    1dca:	87 a5       	ldd	r24, Z+47	; 0x2f
    1dcc:	80 ff       	sbrs	r24, 0
    1dce:	0d c0       	rjmp	.+26     	; 0x1dea <packetloop_arp_icmp_tcp+0x34c>
                        // this normally a fin ack message but it could be
                        // any message with fin we answer with fin-ack:
                        make_tcp_ack_from_any(buf,len+1,TCP_FLAGS_FIN_V);
    1dd0:	b7 01       	movw	r22, r14
    1dd2:	6f 5f       	subi	r22, 0xFF	; 255
    1dd4:	7f 4f       	sbci	r23, 0xFF	; 255
    1dd6:	41 e0       	ldi	r20, 0x01	; 1
    1dd8:	c8 01       	movw	r24, r16
    1dda:	0e 94 66 0a 	call	0x14cc	; 0x14cc <make_tcp_ack_from_any>
                        tcp_client_state=5; // connection terminated
    1dde:	85 e0       	ldi	r24, 0x05	; 5
    1de0:	80 93 85 03 	sts	0x0385, r24
                        return(0);
    1de4:	e1 2c       	mov	r14, r1
    1de6:	f1 2c       	mov	r15, r1
    1de8:	7c c0       	rjmp	.+248    	; 0x1ee2 <packetloop_arp_icmp_tcp+0x444>
                }
                // ack all data (the web page may be long):
                // if we just get a fragment then len will be zero
                // and we ack only once we have the full packet
                if (len>0){
    1dea:	e1 14       	cp	r14, r1
    1dec:	f1 04       	cpc	r15, r1
    1dee:	09 f4       	brne	.+2      	; 0x1df2 <packetloop_arp_icmp_tcp+0x354>
    1df0:	62 c0       	rjmp	.+196    	; 0x1eb6 <packetloop_arp_icmp_tcp+0x418>
                        make_tcp_ack_from_any(buf,len,0);
    1df2:	40 e0       	ldi	r20, 0x00	; 0
    1df4:	b7 01       	movw	r22, r14
    1df6:	c8 01       	movw	r24, r16
    1df8:	0e 94 66 0a 	call	0x14cc	; 0x14cc <make_tcp_ack_from_any>
                }
                return(0);
    1dfc:	e1 2c       	mov	r14, r1
    1dfe:	f1 2c       	mov	r15, r1
    1e00:	70 c0       	rjmp	.+224    	; 0x1ee2 <packetloop_arp_icmp_tcp+0x444>
        }
#endif // TCP_client
        //
#ifdef WWW_server
        // tcp port web server start
        if (buf[TCP_DST_PORT_H_P]==wwwport_h && buf[TCP_DST_PORT_L_P]==wwwport_l){
    1e02:	90 91 68 03 	lds	r25, 0x0368
    1e06:	89 13       	cpse	r24, r25
    1e08:	59 c0       	rjmp	.+178    	; 0x1ebc <packetloop_arp_icmp_tcp+0x41e>
    1e0a:	95 a1       	ldd	r25, Z+37	; 0x25
    1e0c:	80 91 73 00 	lds	r24, 0x0073
    1e10:	98 13       	cpse	r25, r24
    1e12:	57 c0       	rjmp	.+174    	; 0x1ec2 <packetloop_arp_icmp_tcp+0x424>
                if (buf[TCP_FLAGS_P] & TCP_FLAGS_SYN_V){
    1e14:	d7 a4       	ldd	r13, Z+47	; 0x2f
    1e16:	d1 fe       	sbrs	r13, 1
    1e18:	06 c0       	rjmp	.+12     	; 0x1e26 <packetloop_arp_icmp_tcp+0x388>
                        make_tcp_synack_from_syn(buf);
    1e1a:	c8 01       	movw	r24, r16
    1e1c:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <make_tcp_synack_from_syn>
                        // make_tcp_synack_from_syn does already send the syn,ack
                        return(0);
    1e20:	e1 2c       	mov	r14, r1
    1e22:	f1 2c       	mov	r15, r1
    1e24:	5e c0       	rjmp	.+188    	; 0x1ee2 <packetloop_arp_icmp_tcp+0x444>
                }
                if (buf[TCP_FLAGS_P] & TCP_FLAGS_ACK_V){
    1e26:	d4 fe       	sbrs	r13, 4
    1e28:	4f c0       	rjmp	.+158    	; 0x1ec8 <packetloop_arp_icmp_tcp+0x42a>
                        info_data_len=get_tcp_data_len(buf);
    1e2a:	c8 01       	movw	r24, r16
    1e2c:	0e 94 52 09 	call	0x12a4	; 0x12a4 <get_tcp_data_len>
    1e30:	7c 01       	movw	r14, r24
    1e32:	90 93 67 03 	sts	0x0367, r25
    1e36:	80 93 66 03 	sts	0x0366, r24
                        // we can possibly have no data, just ack:
                        // Here we misuse plen for something else to save a variable.
                        // plen is now the position of start of the tcp user data.
                        if (info_data_len==0){
    1e3a:	89 2b       	or	r24, r25
    1e3c:	49 f4       	brne	.+18     	; 0x1e50 <packetloop_arp_icmp_tcp+0x3b2>
                                if (buf[TCP_FLAGS_P] & TCP_FLAGS_FIN_V){
    1e3e:	d0 fe       	sbrs	r13, 0
    1e40:	50 c0       	rjmp	.+160    	; 0x1ee2 <packetloop_arp_icmp_tcp+0x444>
                                        // finack, answer with ack
                                        make_tcp_ack_from_any(buf,0,0);
    1e42:	40 e0       	ldi	r20, 0x00	; 0
    1e44:	60 e0       	ldi	r22, 0x00	; 0
    1e46:	70 e0       	ldi	r23, 0x00	; 0
    1e48:	c8 01       	movw	r24, r16
    1e4a:	0e 94 66 0a 	call	0x14cc	; 0x14cc <make_tcp_ack_from_any>
    1e4e:	49 c0       	rjmp	.+146    	; 0x1ee2 <packetloop_arp_icmp_tcp+0x444>
                                }
                                // just an ack with no data, wait for next packet
                                return(0);
                        }
                        // Here we misuse len for something else to save a variable
                        len=TCP_DATA_START; // TCP_DATA_START is a formula
    1e50:	f8 01       	movw	r30, r16
    1e52:	e6 a4       	ldd	r14, Z+46	; 0x2e
    1e54:	e6 94       	lsr	r14
    1e56:	e6 94       	lsr	r14
    1e58:	e6 94       	lsr	r14
    1e5a:	e6 94       	lsr	r14
    1e5c:	f4 e0       	ldi	r31, 0x04	; 4
    1e5e:	ef 9e       	mul	r14, r31
    1e60:	70 01       	movw	r14, r0
    1e62:	11 24       	eor	r1, r1
    1e64:	22 e2       	ldi	r18, 0x22	; 34
    1e66:	e2 0e       	add	r14, r18
    1e68:	f1 1c       	adc	r15, r1
                        // check for data corruption
                        if (len>plen-8){
    1e6a:	28 97       	sbiw	r28, 0x08	; 8
    1e6c:	ce 15       	cp	r28, r14
    1e6e:	df 05       	cpc	r29, r15
    1e70:	70 f1       	brcs	.+92     	; 0x1ece <packetloop_arp_icmp_tcp+0x430>
    1e72:	37 c0       	rjmp	.+110    	; 0x1ee2 <packetloop_arp_icmp_tcp+0x444>
                        // way we get it back in every message that comes
                        // from the server:
                        tcp_client_syn(buf,((tcp_fd<<5) | (0x1f & tcpclient_src_port_l)),tcp_client_port);
                }
#endif
                return(0);
    1e74:	e1 2c       	mov	r14, r1
    1e76:	f1 2c       	mov	r15, r1
    1e78:	34 c0       	rjmp	.+104    	; 0x1ee2 <packetloop_arp_icmp_tcp+0x444>
    1e7a:	e1 2c       	mov	r14, r1
    1e7c:	f1 2c       	mov	r15, r1
    1e7e:	31 c0       	rjmp	.+98     	; 0x1ee2 <packetloop_arp_icmp_tcp+0x444>
                        if (memcmp(&buf[ETH_ARP_SRC_IP_P],arpip,4)!=0) return(0); // not an arp reply for the IP we were searching           
                        (*client_arp_result_callback)(arpip,arp_reference_number,buf+ETH_ARP_SRC_MAC_P);
                        arpip_state=WGW_HAVE_MAC;
                }
#endif // ARP_MAC_resolver_client
                return(0);
    1e80:	e1 2c       	mov	r14, r1
    1e82:	f1 2c       	mov	r15, r1
    1e84:	2e c0       	rjmp	.+92     	; 0x1ee2 <packetloop_arp_icmp_tcp+0x444>
    1e86:	e1 2c       	mov	r14, r1
    1e88:	f1 2c       	mov	r15, r1
    1e8a:	2b c0       	rjmp	.+86     	; 0x1ee2 <packetloop_arp_icmp_tcp+0x444>
                        make_arp_answer_from_request(buf);
                }
#ifdef ARP_MAC_resolver_client
                if ((arpip_state & WGW_ACCEPT_ARP_REPLY) && (buf[ETH_ARP_OPCODE_L_P]==ETH_ARP_OPCODE_REPLY_L_V)){
                        // is it an arp reply 
                        if (memcmp(&buf[ETH_ARP_SRC_IP_P],arpip,4)!=0) return(0); // not an arp reply for the IP we were searching           
    1e8c:	e1 2c       	mov	r14, r1
    1e8e:	f1 2c       	mov	r15, r1
    1e90:	28 c0       	rjmp	.+80     	; 0x1ee2 <packetloop_arp_icmp_tcp+0x444>
                return(0);

        }
        // check if ip packets are for us:
        if(eth_type_is_ip_and_my_ip(buf,plen)==0){
                return(0);
    1e92:	e1 2c       	mov	r14, r1
    1e94:	f1 2c       	mov	r15, r1
    1e96:	25 c0       	rjmp	.+74     	; 0x1ee2 <packetloop_arp_icmp_tcp+0x444>
                return(0);
        }
        // this is an important check to avoid working on the wrong packets:
        if (plen<54 || buf[IP_PROTO_P]!=IP_PROTO_TCP_V ){
                // smaller than the smallest TCP packet (TCP packet with no options section) or not tcp port
                return(0);
    1e98:	e1 2c       	mov	r14, r1
    1e9a:	f1 2c       	mov	r15, r1
    1e9c:	22 c0       	rjmp	.+68     	; 0x1ee2 <packetloop_arp_icmp_tcp+0x444>
    1e9e:	e1 2c       	mov	r14, r1
    1ea0:	f1 2c       	mov	r15, r1
    1ea2:	1f c0       	rjmp	.+62     	; 0x1ee2 <packetloop_arp_icmp_tcp+0x444>
    1ea4:	e1 2c       	mov	r14, r1
    1ea6:	f1 2c       	mov	r15, r1
    1ea8:	1c c0       	rjmp	.+56     	; 0x1ee2 <packetloop_arp_icmp_tcp+0x444>
#if defined (WWW_client)
                // workaround to pass pointer to www_client_internal..
                bufptr=buf; 
#endif // WWW_client
                if (check_ip_message_is_from(buf,tcp_otherside_ip)==0){
                        return(0);
    1eaa:	e1 2c       	mov	r14, r1
    1eac:	f1 2c       	mov	r15, r1
    1eae:	19 c0       	rjmp	.+50     	; 0x1ee2 <packetloop_arp_icmp_tcp+0x444>
                if(tcp_client_state==5){
                        // we get one more final ack to our fin-ack:
                        if (buf[TCP_FLAGS_P] & TCP_FLAGS_ACK_V){
                                tcp_client_state=6; // in state 6 communication should be finished
                        }
                        return(0);
    1eb0:	e1 2c       	mov	r14, r1
    1eb2:	f1 2c       	mov	r15, r1
    1eb4:	16 c0       	rjmp	.+44     	; 0x1ee2 <packetloop_arp_icmp_tcp+0x444>
                // if we just get a fragment then len will be zero
                // and we ack only once we have the full packet
                if (len>0){
                        make_tcp_ack_from_any(buf,len,0);
                }
                return(0);
    1eb6:	e1 2c       	mov	r14, r1
    1eb8:	f1 2c       	mov	r15, r1
    1eba:	13 c0       	rjmp	.+38     	; 0x1ee2 <packetloop_arp_icmp_tcp+0x444>
                        }
                        return(len);
                }
        }
#endif // WWW_server
        return(0);
    1ebc:	e1 2c       	mov	r14, r1
    1ebe:	f1 2c       	mov	r15, r1
    1ec0:	10 c0       	rjmp	.+32     	; 0x1ee2 <packetloop_arp_icmp_tcp+0x444>
    1ec2:	e1 2c       	mov	r14, r1
    1ec4:	f1 2c       	mov	r15, r1
    1ec6:	0d c0       	rjmp	.+26     	; 0x1ee2 <packetloop_arp_icmp_tcp+0x444>
    1ec8:	e1 2c       	mov	r14, r1
    1eca:	f1 2c       	mov	r15, r1
    1ecc:	0a c0       	rjmp	.+20     	; 0x1ee2 <packetloop_arp_icmp_tcp+0x444>
                        }
                        // Here we misuse len for something else to save a variable
                        len=TCP_DATA_START; // TCP_DATA_START is a formula
                        // check for data corruption
                        if (len>plen-8){
                                return(0);
    1ece:	e1 2c       	mov	r14, r1
    1ed0:	f1 2c       	mov	r15, r1
    1ed2:	07 c0       	rjmp	.+14     	; 0x1ee2 <packetloop_arp_icmp_tcp+0x444>
                        make_tcp_ack_from_any(buf,len,TCP_FLAGS_RST_V);
                        // just a single reset, do not repeat if more messages:
                        tcp_client_state=7;
                        return(0);
                }
                if (buf[TCP_FLAGS_P] & TCP_FLAGS_FIN_V){
    1ed4:	d8 01       	movw	r26, r16
    1ed6:	9f 96       	adiw	r26, 0x2f	; 47
    1ed8:	8c 91       	ld	r24, X
    1eda:	80 fd       	sbrc	r24, 0
    1edc:	79 cf       	rjmp	.-270    	; 0x1dd0 <packetloop_arp_icmp_tcp+0x332>
                // if we just get a fragment then len will be zero
                // and we ack only once we have the full packet
                if (len>0){
                        make_tcp_ack_from_any(buf,len,0);
                }
                return(0);
    1ede:	e1 2c       	mov	r14, r1
    1ee0:	f1 2c       	mov	r15, r1
                        return(len);
                }
        }
#endif // WWW_server
        return(0);
}
    1ee2:	c7 01       	movw	r24, r14
    1ee4:	df 91       	pop	r29
    1ee6:	cf 91       	pop	r28
    1ee8:	1f 91       	pop	r17
    1eea:	0f 91       	pop	r16
    1eec:	ff 90       	pop	r15
    1eee:	ef 90       	pop	r14
    1ef0:	df 90       	pop	r13
    1ef2:	08 95       	ret

00001ef4 <mk_net_str>:
        return(1);
}

// take a byte string and convert it to a human readable display string  (base is 10 for ip and 16 for mac addr), len is 4 for IP addr and 6 for mac.
void mk_net_str(char *resultstr,uint8_t *ip_byte_str,uint8_t len,char separator,uint8_t base)
{
    1ef4:	8f 92       	push	r8
    1ef6:	9f 92       	push	r9
    1ef8:	af 92       	push	r10
    1efa:	bf 92       	push	r11
    1efc:	cf 92       	push	r12
    1efe:	df 92       	push	r13
    1f00:	ef 92       	push	r14
    1f02:	ff 92       	push	r15
    1f04:	0f 93       	push	r16
    1f06:	1f 93       	push	r17
    1f08:	cf 93       	push	r28
    1f0a:	df 93       	push	r29
    1f0c:	7c 01       	movw	r14, r24
    1f0e:	d2 2f       	mov	r29, r18
        uint8_t i=0;
        uint8_t j=0;
        while(i<len){
    1f10:	44 23       	and	r20, r20
    1f12:	59 f1       	breq	.+86     	; 0x1f6a <mk_net_str+0x76>
    1f14:	6b 01       	movw	r12, r22
    1f16:	41 50       	subi	r20, 0x01	; 1
    1f18:	84 2f       	mov	r24, r20
    1f1a:	90 e0       	ldi	r25, 0x00	; 0
    1f1c:	01 96       	adiw	r24, 0x01	; 1
    1f1e:	5b 01       	movw	r10, r22
    1f20:	a8 0e       	add	r10, r24
    1f22:	b9 1e       	adc	r11, r25
    1f24:	c0 e0       	ldi	r28, 0x00	; 0
                itoa((int)ip_byte_str[i],&resultstr[j],base);
    1f26:	80 2e       	mov	r8, r16
    1f28:	91 2c       	mov	r9, r1
    1f2a:	87 01       	movw	r16, r14
    1f2c:	0c 0f       	add	r16, r28
    1f2e:	11 1d       	adc	r17, r1
    1f30:	f6 01       	movw	r30, r12
    1f32:	81 91       	ld	r24, Z+
    1f34:	6f 01       	movw	r12, r30
extern __inline__ __ATTR_GNU_INLINE__
char *itoa (int __val, char *__s, int __radix)
{
    if (!__builtin_constant_p (__radix)) {
	extern char *__itoa (int, char *, int);
	return __itoa (__val, __s, __radix);
    1f36:	a4 01       	movw	r20, r8
    1f38:	b8 01       	movw	r22, r16
    1f3a:	90 e0       	ldi	r25, 0x00	; 0
    1f3c:	0e 94 0c 10 	call	0x2018	; 0x2018 <itoa>
                // search end of str:
                while(resultstr[j]){j++;}
    1f40:	f8 01       	movw	r30, r16
    1f42:	80 81       	ld	r24, Z
    1f44:	88 23       	and	r24, r24
    1f46:	41 f0       	breq	.+16     	; 0x1f58 <mk_net_str+0x64>
    1f48:	cf 5f       	subi	r28, 0xFF	; 255
    1f4a:	87 01       	movw	r16, r14
    1f4c:	0c 0f       	add	r16, r28
    1f4e:	11 1d       	adc	r17, r1
    1f50:	f8 01       	movw	r30, r16
    1f52:	80 81       	ld	r24, Z
    1f54:	81 11       	cpse	r24, r1
    1f56:	f8 cf       	rjmp	.-16     	; 0x1f48 <mk_net_str+0x54>
                if (separator){ // no separator, separator==NULL is as well possible, suggested by andras tucsni
    1f58:	dd 23       	and	r29, r29
    1f5a:	19 f0       	breq	.+6      	; 0x1f62 <mk_net_str+0x6e>
                        resultstr[j]=separator;
    1f5c:	f8 01       	movw	r30, r16
    1f5e:	d0 83       	st	Z, r29
                        j++;
    1f60:	cf 5f       	subi	r28, 0xFF	; 255
// take a byte string and convert it to a human readable display string  (base is 10 for ip and 16 for mac addr), len is 4 for IP addr and 6 for mac.
void mk_net_str(char *resultstr,uint8_t *ip_byte_str,uint8_t len,char separator,uint8_t base)
{
        uint8_t i=0;
        uint8_t j=0;
        while(i<len){
    1f62:	ca 14       	cp	r12, r10
    1f64:	db 04       	cpc	r13, r11
    1f66:	09 f7       	brne	.-62     	; 0x1f2a <mk_net_str+0x36>
    1f68:	01 c0       	rjmp	.+2      	; 0x1f6c <mk_net_str+0x78>

// take a byte string and convert it to a human readable display string  (base is 10 for ip and 16 for mac addr), len is 4 for IP addr and 6 for mac.
void mk_net_str(char *resultstr,uint8_t *ip_byte_str,uint8_t len,char separator,uint8_t base)
{
        uint8_t i=0;
        uint8_t j=0;
    1f6a:	c0 e0       	ldi	r28, 0x00	; 0
                        resultstr[j]=separator;
                        j++;
                }
                i++;
        }
        j--;
    1f6c:	c1 50       	subi	r28, 0x01	; 1
        resultstr[j]='\0';
    1f6e:	f7 01       	movw	r30, r14
    1f70:	ec 0f       	add	r30, r28
    1f72:	f1 1d       	adc	r31, r1
    1f74:	10 82       	st	Z, r1
}
    1f76:	df 91       	pop	r29
    1f78:	cf 91       	pop	r28
    1f7a:	1f 91       	pop	r17
    1f7c:	0f 91       	pop	r16
    1f7e:	ff 90       	pop	r15
    1f80:	ef 90       	pop	r14
    1f82:	df 90       	pop	r13
    1f84:	cf 90       	pop	r12
    1f86:	bf 90       	pop	r11
    1f88:	af 90       	pop	r10
    1f8a:	9f 90       	pop	r9
    1f8c:	8f 90       	pop	r8
    1f8e:	08 95       	ret

00001f90 <atoi>:
    1f90:	fc 01       	movw	r30, r24
    1f92:	88 27       	eor	r24, r24
    1f94:	99 27       	eor	r25, r25
    1f96:	e8 94       	clt
    1f98:	21 91       	ld	r18, Z+
    1f9a:	20 32       	cpi	r18, 0x20	; 32
    1f9c:	e9 f3       	breq	.-6      	; 0x1f98 <atoi+0x8>
    1f9e:	29 30       	cpi	r18, 0x09	; 9
    1fa0:	10 f0       	brcs	.+4      	; 0x1fa6 <atoi+0x16>
    1fa2:	2e 30       	cpi	r18, 0x0E	; 14
    1fa4:	c8 f3       	brcs	.-14     	; 0x1f98 <atoi+0x8>
    1fa6:	2b 32       	cpi	r18, 0x2B	; 43
    1fa8:	41 f0       	breq	.+16     	; 0x1fba <atoi+0x2a>
    1faa:	2d 32       	cpi	r18, 0x2D	; 45
    1fac:	39 f4       	brne	.+14     	; 0x1fbc <atoi+0x2c>
    1fae:	68 94       	set
    1fb0:	04 c0       	rjmp	.+8      	; 0x1fba <atoi+0x2a>
    1fb2:	0e 94 22 10 	call	0x2044	; 0x2044 <__mulhi_const_10>
    1fb6:	82 0f       	add	r24, r18
    1fb8:	91 1d       	adc	r25, r1
    1fba:	21 91       	ld	r18, Z+
    1fbc:	20 53       	subi	r18, 0x30	; 48
    1fbe:	2a 30       	cpi	r18, 0x0A	; 10
    1fc0:	c0 f3       	brcs	.-16     	; 0x1fb2 <atoi+0x22>
    1fc2:	1e f4       	brtc	.+6      	; 0x1fca <atoi+0x3a>
    1fc4:	90 95       	com	r25
    1fc6:	81 95       	neg	r24
    1fc8:	9f 4f       	sbci	r25, 0xFF	; 255
    1fca:	08 95       	ret

00001fcc <__ctype_isfalse>:
    1fcc:	99 27       	eor	r25, r25
    1fce:	88 27       	eor	r24, r24

00001fd0 <__ctype_istrue>:
    1fd0:	08 95       	ret

00001fd2 <isblank>:
    1fd2:	91 11       	cpse	r25, r1
    1fd4:	0c 94 e6 0f 	jmp	0x1fcc	; 0x1fcc <__ctype_isfalse>
    1fd8:	80 32       	cpi	r24, 0x20	; 32
    1fda:	11 f0       	breq	.+4      	; 0x1fe0 <isblank+0xe>
    1fdc:	89 30       	cpi	r24, 0x09	; 9
    1fde:	d1 f7       	brne	.-12     	; 0x1fd4 <isblank+0x2>
    1fe0:	08 95       	ret

00001fe2 <memcmp>:
    1fe2:	fb 01       	movw	r30, r22
    1fe4:	dc 01       	movw	r26, r24
    1fe6:	04 c0       	rjmp	.+8      	; 0x1ff0 <memcmp+0xe>
    1fe8:	8d 91       	ld	r24, X+
    1fea:	01 90       	ld	r0, Z+
    1fec:	80 19       	sub	r24, r0
    1fee:	21 f4       	brne	.+8      	; 0x1ff8 <memcmp+0x16>
    1ff0:	41 50       	subi	r20, 0x01	; 1
    1ff2:	50 40       	sbci	r21, 0x00	; 0
    1ff4:	c8 f7       	brcc	.-14     	; 0x1fe8 <memcmp+0x6>
    1ff6:	88 1b       	sub	r24, r24
    1ff8:	99 0b       	sbc	r25, r25
    1ffa:	08 95       	ret

00001ffc <strncmp>:
    1ffc:	fb 01       	movw	r30, r22
    1ffe:	dc 01       	movw	r26, r24
    2000:	41 50       	subi	r20, 0x01	; 1
    2002:	50 40       	sbci	r21, 0x00	; 0
    2004:	30 f0       	brcs	.+12     	; 0x2012 <strncmp+0x16>
    2006:	8d 91       	ld	r24, X+
    2008:	01 90       	ld	r0, Z+
    200a:	80 19       	sub	r24, r0
    200c:	19 f4       	brne	.+6      	; 0x2014 <strncmp+0x18>
    200e:	00 20       	and	r0, r0
    2010:	b9 f7       	brne	.-18     	; 0x2000 <strncmp+0x4>
    2012:	88 1b       	sub	r24, r24
    2014:	99 0b       	sbc	r25, r25
    2016:	08 95       	ret

00002018 <itoa>:
    2018:	45 32       	cpi	r20, 0x25	; 37
    201a:	51 05       	cpc	r21, r1
    201c:	20 f4       	brcc	.+8      	; 0x2026 <itoa+0xe>
    201e:	42 30       	cpi	r20, 0x02	; 2
    2020:	10 f0       	brcs	.+4      	; 0x2026 <itoa+0xe>
    2022:	0c 94 17 10 	jmp	0x202e	; 0x202e <__itoa_ncheck>
    2026:	fb 01       	movw	r30, r22
    2028:	10 82       	st	Z, r1
    202a:	cb 01       	movw	r24, r22
    202c:	08 95       	ret

0000202e <__itoa_ncheck>:
    202e:	bb 27       	eor	r27, r27
    2030:	4a 30       	cpi	r20, 0x0A	; 10
    2032:	31 f4       	brne	.+12     	; 0x2040 <__itoa_ncheck+0x12>
    2034:	99 23       	and	r25, r25
    2036:	22 f4       	brpl	.+8      	; 0x2040 <__itoa_ncheck+0x12>
    2038:	bd e2       	ldi	r27, 0x2D	; 45
    203a:	90 95       	com	r25
    203c:	81 95       	neg	r24
    203e:	9f 4f       	sbci	r25, 0xFF	; 255
    2040:	0c 94 2b 10 	jmp	0x2056	; 0x2056 <__utoa_common>

00002044 <__mulhi_const_10>:
    2044:	7a e0       	ldi	r23, 0x0A	; 10
    2046:	97 9f       	mul	r25, r23
    2048:	90 2d       	mov	r25, r0
    204a:	87 9f       	mul	r24, r23
    204c:	80 2d       	mov	r24, r0
    204e:	91 0d       	add	r25, r1
    2050:	11 24       	eor	r1, r1
    2052:	08 95       	ret

00002054 <__utoa_ncheck>:
    2054:	bb 27       	eor	r27, r27

00002056 <__utoa_common>:
    2056:	fb 01       	movw	r30, r22
    2058:	55 27       	eor	r21, r21
    205a:	aa 27       	eor	r26, r26
    205c:	88 0f       	add	r24, r24
    205e:	99 1f       	adc	r25, r25
    2060:	aa 1f       	adc	r26, r26
    2062:	a4 17       	cp	r26, r20
    2064:	10 f0       	brcs	.+4      	; 0x206a <__utoa_common+0x14>
    2066:	a4 1b       	sub	r26, r20
    2068:	83 95       	inc	r24
    206a:	50 51       	subi	r21, 0x10	; 16
    206c:	b9 f7       	brne	.-18     	; 0x205c <__utoa_common+0x6>
    206e:	a0 5d       	subi	r26, 0xD0	; 208
    2070:	aa 33       	cpi	r26, 0x3A	; 58
    2072:	08 f0       	brcs	.+2      	; 0x2076 <__utoa_common+0x20>
    2074:	a9 5d       	subi	r26, 0xD9	; 217
    2076:	a1 93       	st	Z+, r26
    2078:	00 97       	sbiw	r24, 0x00	; 0
    207a:	79 f7       	brne	.-34     	; 0x205a <__utoa_common+0x4>
    207c:	b1 11       	cpse	r27, r1
    207e:	b1 93       	st	Z+, r27
    2080:	11 92       	st	Z+, r1
    2082:	cb 01       	movw	r24, r22
    2084:	0c 94 44 10 	jmp	0x2088	; 0x2088 <strrev>

00002088 <strrev>:
    2088:	dc 01       	movw	r26, r24
    208a:	fc 01       	movw	r30, r24
    208c:	67 2f       	mov	r22, r23
    208e:	71 91       	ld	r23, Z+
    2090:	77 23       	and	r23, r23
    2092:	e1 f7       	brne	.-8      	; 0x208c <strrev+0x4>
    2094:	32 97       	sbiw	r30, 0x02	; 2
    2096:	04 c0       	rjmp	.+8      	; 0x20a0 <strrev+0x18>
    2098:	7c 91       	ld	r23, X
    209a:	6d 93       	st	X+, r22
    209c:	70 83       	st	Z, r23
    209e:	62 91       	ld	r22, -Z
    20a0:	ae 17       	cp	r26, r30
    20a2:	bf 07       	cpc	r27, r31
    20a4:	c8 f3       	brcs	.-14     	; 0x2098 <strrev+0x10>
    20a6:	08 95       	ret

000020a8 <_exit>:
    20a8:	f8 94       	cli

000020aa <__stop_program>:
    20aa:	ff cf       	rjmp	.-2      	; 0x20aa <__stop_program>
